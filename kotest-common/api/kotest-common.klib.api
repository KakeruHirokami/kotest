// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.kotest:kotest-common>
abstract interface io.kotest.common.errors/ComparisonError { // io.kotest.common.errors/ComparisonError|null[0]
    abstract val actualValue // io.kotest.common.errors/ComparisonError.actualValue|{}actualValue[0]
        abstract fun <get-actualValue>(): kotlin/String // io.kotest.common.errors/ComparisonError.actualValue.<get-actualValue>|<get-actualValue>(){}[0]
    abstract val expectedValue // io.kotest.common.errors/ComparisonError.expectedValue|{}expectedValue[0]
        abstract fun <get-expectedValue>(): kotlin/String // io.kotest.common.errors/ComparisonError.expectedValue.<get-expectedValue>|<get-expectedValue>(){}[0]
}
abstract interface io.kotest.mpp/Reflection { // io.kotest.mpp/Reflection|null[0]
    abstract fun <#A1: kotlin/Any> isDataClass(kotlin.reflect/KClass<#A1>): kotlin/Boolean // io.kotest.mpp/Reflection.isDataClass|isDataClass(kotlin.reflect.KClass<0:0>){0§<kotlin.Any>}[0]
    abstract fun <#A1: kotlin/Any> isEnumClass(kotlin.reflect/KClass<#A1>): kotlin/Boolean // io.kotest.mpp/Reflection.isEnumClass|isEnumClass(kotlin.reflect.KClass<0:0>){0§<kotlin.Any>}[0]
    abstract fun <#A1: kotlin/Any> newInstanceNoArgConstructor(kotlin.reflect/KClass<#A1>): #A1 // io.kotest.mpp/Reflection.newInstanceNoArgConstructor|newInstanceNoArgConstructor(kotlin.reflect.KClass<0:0>){0§<kotlin.Any>}[0]
    abstract fun <#A1: kotlin/Any> newInstanceNoArgConstructorOrObjectInstance(kotlin.reflect/KClass<#A1>): #A1 // io.kotest.mpp/Reflection.newInstanceNoArgConstructorOrObjectInstance|newInstanceNoArgConstructorOrObjectInstance(kotlin.reflect.KClass<0:0>){0§<kotlin.Any>}[0]
    abstract fun <#A1: kotlin/Any> primaryConstructorMembers(kotlin.reflect/KClass<#A1>): kotlin.collections/List<io.kotest.mpp/Property> // io.kotest.mpp/Reflection.primaryConstructorMembers|primaryConstructorMembers(kotlin.reflect.KClass<0:0>){0§<kotlin.Any>}[0]
    abstract fun annotations(kotlin.reflect/KClass<*>, kotlin.collections/Set<io.kotest.mpp/AnnotationSearchParameter>): kotlin.collections/List<kotlin/Annotation> // io.kotest.mpp/Reflection.annotations|annotations(kotlin.reflect.KClass<*>;kotlin.collections.Set<io.kotest.mpp.AnnotationSearchParameter>){}[0]
    abstract fun fqn(kotlin.reflect/KClass<*>): kotlin/String? // io.kotest.mpp/Reflection.fqn|fqn(kotlin.reflect.KClass<*>){}[0]
    abstract fun isPublic(kotlin.reflect/KClass<out kotlin/Any>): kotlin/Boolean // io.kotest.mpp/Reflection.isPublic|isPublic(kotlin.reflect.KClass<out|kotlin.Any>){}[0]
    abstract fun paramNames(kotlin/Function<*>): kotlin.collections/List<kotlin/String>? // io.kotest.mpp/Reflection.paramNames|paramNames(kotlin.Function<*>){}[0]
}
abstract interface io.kotest.mpp/StackTraces { // io.kotest.mpp/StackTraces|null[0]
    abstract fun <#A1: kotlin/Throwable> cleanStackTrace(#A1): #A1 // io.kotest.mpp/StackTraces.cleanStackTrace|cleanStackTrace(0:0){0§<kotlin.Throwable>}[0]
    abstract fun root(kotlin/Throwable): kotlin/Throwable // io.kotest.mpp/StackTraces.root|root(kotlin.Throwable){}[0]
    abstract fun throwableLocation(kotlin/Throwable, kotlin/Int): kotlin.collections/List<kotlin/String>? // io.kotest.mpp/StackTraces.throwableLocation|throwableLocation(kotlin.Throwable;kotlin.Int){}[0]
    open fun throwableLocation(kotlin/Throwable): kotlin/String? // io.kotest.mpp/StackTraces.throwableLocation|throwableLocation(kotlin.Throwable){}[0]
}
final class <#A: kotlin/Any?, #B: kotlin/Any?> io.kotest.mpp.atomics/AtomicProperty : kotlin.properties/ReadWriteProperty<#A, #B> { // io.kotest.mpp.atomics/AtomicProperty|null[0]
    constructor <init>(kotlin/Function0<#B> =...) // io.kotest.mpp.atomics/AtomicProperty.<init>|<init>(kotlin.Function0<1:1>){}[0]
    final fun getValue(#A, kotlin.reflect/KProperty<*>): #B // io.kotest.mpp.atomics/AtomicProperty.getValue|getValue(1:0;kotlin.reflect.KProperty<*>){}[0]
    final fun setValue(#A, kotlin.reflect/KProperty<*>, #B) // io.kotest.mpp.atomics/AtomicProperty.setValue|setValue(1:0;kotlin.reflect.KProperty<*>;1:1){}[0]
}
final class <#A: kotlin/Any?> io.kotest.mpp.atomics/AtomicReference { // io.kotest.mpp.atomics/AtomicReference|null[0]
    constructor <init>(#A) // io.kotest.mpp.atomics/AtomicReference.<init>|<init>(1:0){}[0]
    final fun compareAndSet(#A, #A): kotlin/Boolean // io.kotest.mpp.atomics/AtomicReference.compareAndSet|compareAndSet(1:0;1:0){}[0]
    final var value // io.kotest.mpp.atomics/AtomicReference.value|{}value[0]
        final fun <get-value>(): #A // io.kotest.mpp.atomics/AtomicReference.value.<get-value>|<get-value>(){}[0]
        final fun <set-value>(#A) // io.kotest.mpp.atomics/AtomicReference.value.<set-value>|<set-value>(1:0){}[0]
}
final class io.kotest.common/TestNameContextElement : kotlin.coroutines/AbstractCoroutineContextElement { // io.kotest.common/TestNameContextElement|null[0]
    constructor <init>(kotlin/String) // io.kotest.common/TestNameContextElement.<init>|<init>(kotlin.String){}[0]
    final object Key : kotlin.coroutines/CoroutineContext.Key<io.kotest.common/TestNameContextElement> // io.kotest.common/TestNameContextElement.Key|null[0]
    final val testName // io.kotest.common/TestNameContextElement.testName|{}testName[0]
        final fun <get-testName>(): kotlin/String // io.kotest.common/TestNameContextElement.testName.<get-testName>|<get-testName>(){}[0]
}
final class io.kotest.common/TestPath { // io.kotest.common/TestPath|null[0]
    constructor <init>(kotlin/String) // io.kotest.common/TestPath.<init>|<init>(kotlin.String){}[0]
    final fun component1(): kotlin/String // io.kotest.common/TestPath.component1|component1(){}[0]
    final fun copy(kotlin/String =...): io.kotest.common/TestPath // io.kotest.common/TestPath.copy|copy(kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.common/TestPath.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.kotest.common/TestPath.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.kotest.common/TestPath.toString|toString(){}[0]
    final val value // io.kotest.common/TestPath.value|{}value[0]
        final fun <get-value>(): kotlin/String // io.kotest.common/TestPath.value.<get-value>|<get-value>(){}[0]
}
final class io.kotest.common/TestPathContextElement : kotlin.coroutines/AbstractCoroutineContextElement { // io.kotest.common/TestPathContextElement|null[0]
    constructor <init>(io.kotest.common/TestPath) // io.kotest.common/TestPathContextElement.<init>|<init>(io.kotest.common.TestPath){}[0]
    final object Key : kotlin.coroutines/CoroutineContext.Key<io.kotest.common/TestPathContextElement> // io.kotest.common/TestPathContextElement.Key|null[0]
    final val testPath // io.kotest.common/TestPathContextElement.testPath|{}testPath[0]
        final fun <get-testPath>(): io.kotest.common/TestPath // io.kotest.common/TestPathContextElement.testPath.<get-testPath>|<get-testPath>(){}[0]
}
final class io.kotest.common/TimeMarkCompat { // io.kotest.common/TimeMarkCompat|null[0]
    final fun elapsedNow(): kotlin.time/Duration // io.kotest.common/TimeMarkCompat.elapsedNow|elapsedNow(){}[0]
    final fun hasNotPassedNow(): kotlin/Boolean // io.kotest.common/TimeMarkCompat.hasNotPassedNow|hasNotPassedNow(){}[0]
    final fun hasPassedNow(): kotlin/Boolean // io.kotest.common/TimeMarkCompat.hasPassedNow|hasPassedNow(){}[0]
    final fun minus(kotlin.time/Duration): io.kotest.common/TimeMarkCompat // io.kotest.common/TimeMarkCompat.minus|minus(kotlin.time.Duration){}[0]
    final fun plus(kotlin.time/Duration): io.kotest.common/TimeMarkCompat // io.kotest.common/TimeMarkCompat.plus|plus(kotlin.time.Duration){}[0]
}
final class io.kotest.mpp/Logger { // io.kotest.mpp/Logger|null[0]
    constructor <init>(kotlin.reflect/KClass<*>) // io.kotest.mpp/Logger.<init>|<init>(kotlin.reflect.KClass<*>){}[0]
    final fun log(kotlin/Function0<kotlin/Pair<kotlin/String?, kotlin/String>>) // io.kotest.mpp/Logger.log|log(kotlin.Function0<kotlin.Pair<kotlin.String?,kotlin.String>>){}[0]
    final fun log(kotlin/Function0<kotlin/String>) // io.kotest.mpp/Logger.log|log(kotlin.Function0<kotlin.String>){}[0]
}
final class io.kotest.mpp/Property { // io.kotest.mpp/Property|null[0]
    constructor <init>(kotlin/String, kotlin.reflect/KType, kotlin/Function1<kotlin/Any, kotlin/Any?>) // io.kotest.mpp/Property.<init>|<init>(kotlin.String;kotlin.reflect.KType;kotlin.Function1<kotlin.Any,kotlin.Any?>){}[0]
    final fun component1(): kotlin/String // io.kotest.mpp/Property.component1|component1(){}[0]
    final fun component2(): kotlin.reflect/KType // io.kotest.mpp/Property.component2|component2(){}[0]
    final fun component3(): kotlin/Function1<kotlin/Any, kotlin/Any?> // io.kotest.mpp/Property.component3|component3(){}[0]
    final fun copy(kotlin/String =..., kotlin.reflect/KType =..., kotlin/Function1<kotlin/Any, kotlin/Any?> =...): io.kotest.mpp/Property // io.kotest.mpp/Property.copy|copy(kotlin.String;kotlin.reflect.KType;kotlin.Function1<kotlin.Any,kotlin.Any?>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.mpp/Property.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.kotest.mpp/Property.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.kotest.mpp/Property.toString|toString(){}[0]
    final val call // io.kotest.mpp/Property.call|{}call[0]
        final fun <get-call>(): kotlin/Function1<kotlin/Any, kotlin/Any?> // io.kotest.mpp/Property.call.<get-call>|<get-call>(){}[0]
    final val name // io.kotest.mpp/Property.name|{}name[0]
        final fun <get-name>(): kotlin/String // io.kotest.mpp/Property.name.<get-name>|<get-name>(){}[0]
    final val type // io.kotest.mpp/Property.type|{}type[0]
        final fun <get-type>(): kotlin.reflect/KType // io.kotest.mpp/Property.type.<get-type>|<get-type>(){}[0]
}
final enum class io.kotest.common/Platform : kotlin/Enum<io.kotest.common/Platform> { // io.kotest.common/Platform|null[0]
    enum entry JS // io.kotest.common/Platform.JS|null[0]
    enum entry JVM // io.kotest.common/Platform.JVM|null[0]
    enum entry Native // io.kotest.common/Platform.Native|null[0]
    enum entry WasmJs // io.kotest.common/Platform.WasmJs|null[0]
    final fun valueOf(kotlin/String): io.kotest.common/Platform // io.kotest.common/Platform.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.kotest.common/Platform> // io.kotest.common/Platform.values|values#static(){}[0]
    final val entries // io.kotest.common/Platform.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.kotest.common/Platform> // io.kotest.common/Platform.entries.<get-entries>|<get-entries>#static(){}[0]
}
final fun (kotlin.reflect/KClass<*>).io.kotest.mpp/bestName(): kotlin/String // io.kotest.mpp/bestName|bestName@kotlin.reflect.KClass<*>(){}[0]
final fun (kotlin.reflect/KClass<*>).io.kotest.mpp/qualifiedNameOrNull(): kotlin/String? // io.kotest.mpp/qualifiedNameOrNull|qualifiedNameOrNull@kotlin.reflect.KClass<*>(){}[0]
final fun <#A: kotlin/Any> (kotlin.reflect/KClass<#A>).io.kotest.mpp/newInstanceNoArgConstructor(): #A // io.kotest.mpp/newInstanceNoArgConstructor|newInstanceNoArgConstructor@kotlin.reflect.KClass<0:0>(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any> (kotlin.reflect/KClass<#A>).io.kotest.mpp/newInstanceNoArgConstructorOrObjectInstance(): #A // io.kotest.mpp/newInstanceNoArgConstructorOrObjectInstance|newInstanceNoArgConstructorOrObjectInstance@kotlin.reflect.KClass<0:0>(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/List<kotlin/Result<#A>>).io.kotest.common/collect(kotlin/Function1<kotlin.collections/List<kotlin/Throwable>, kotlin/Throwable>): kotlin/Result<kotlin.collections/List<#A>> // io.kotest.common/collect|collect@kotlin.collections.List<kotlin.Result<0:0>>(kotlin.Function1<kotlin.collections.List<kotlin.Throwable>,kotlin.Throwable>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Result<#A>).io.kotest.common/mapError(kotlin/Function1<kotlin/Throwable, kotlin/Throwable>): kotlin/Result<#A> // io.kotest.common/mapError|mapError@kotlin.Result<0:0>(kotlin.Function1<kotlin.Throwable,kotlin.Throwable>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> io.kotest.common/runBlocking(kotlin.coroutines/SuspendFunction0<#A>): #A // io.kotest.common/runBlocking|runBlocking(kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> io.kotest.mpp/sysprop(kotlin/String, #A, kotlin/Function1<kotlin/String, #A>): #A // io.kotest.mpp/sysprop|sysprop(kotlin.String;0:0;kotlin.Function1<kotlin.String,0:0>){0§<kotlin.Any?>}[0]
final fun io.kotest.common/isIntellij(): kotlin/Boolean // io.kotest.common/isIntellij|isIntellij(){}[0]
final fun io.kotest.common/runPromise(kotlin.coroutines/SuspendFunction0<kotlin/Unit>) // io.kotest.common/runPromise|runPromise(kotlin.coroutines.SuspendFunction0<kotlin.Unit>){}[0]
final fun io.kotest.mpp/env(kotlin/String): kotlin/String? // io.kotest.mpp/env|env(kotlin.String){}[0]
final fun io.kotest.mpp/isLoggingEnabled(): kotlin/Boolean // io.kotest.mpp/isLoggingEnabled|isLoggingEnabled(){}[0]
final fun io.kotest.mpp/isPlatformStable(kotlin.reflect/KClass<*>): kotlin/Boolean // io.kotest.mpp/isPlatformStable|isPlatformStable(kotlin.reflect.KClass<*>){}[0]
final fun io.kotest.mpp/isStable(kotlin.reflect/KClass<*>): kotlin/Boolean // io.kotest.mpp/isStable|isStable(kotlin.reflect.KClass<*>){}[0]
final fun io.kotest.mpp/isStable(kotlin.reflect/KType): kotlin/Boolean // io.kotest.mpp/isStable|isStable(kotlin.reflect.KType){}[0]
final fun io.kotest.mpp/log(kotlin/Function0<kotlin/String>) // io.kotest.mpp/log|log(kotlin.Function0<kotlin.String>){}[0]
final fun io.kotest.mpp/log(kotlin/Throwable?, kotlin/Function0<kotlin/String>) // io.kotest.mpp/log|log(kotlin.Throwable?;kotlin.Function0<kotlin.String>){}[0]
final fun io.kotest.mpp/sysprop(kotlin/String): kotlin/String? // io.kotest.mpp/sysprop|sysprop(kotlin.String){}[0]
final fun io.kotest.mpp/sysprop(kotlin/String, kotlin/Boolean): kotlin/Boolean // io.kotest.mpp/sysprop|sysprop(kotlin.String;kotlin.Boolean){}[0]
final fun io.kotest.mpp/sysprop(kotlin/String, kotlin/Double): kotlin/Double // io.kotest.mpp/sysprop|sysprop(kotlin.String;kotlin.Double){}[0]
final fun io.kotest.mpp/sysprop(kotlin/String, kotlin/Int): kotlin/Int // io.kotest.mpp/sysprop|sysprop(kotlin.String;kotlin.Int){}[0]
final fun io.kotest.mpp/sysprop(kotlin/String, kotlin/String): kotlin/String // io.kotest.mpp/sysprop|sysprop(kotlin.String;kotlin.String){}[0]
final fun io.kotest.mpp/syspropOrEnv(kotlin/String): kotlin/String? // io.kotest.mpp/syspropOrEnv|syspropOrEnv(kotlin.String){}[0]
final fun io.kotest.mpp/timeInMillis(): kotlin/Long // io.kotest.mpp/timeInMillis|timeInMillis(){}[0]
final fun io.kotest.mpp/uniqueId(): kotlin/String // io.kotest.mpp/uniqueId|uniqueId(){}[0]
final fun io.kotest.mpp/writeLog(io.kotest.common/TimeMarkCompat, kotlin/Throwable?, kotlin/Function0<kotlin/String>) // io.kotest.mpp/writeLog|writeLog(io.kotest.common.TimeMarkCompat;kotlin.Throwable?;kotlin.Function0<kotlin.String>){}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Result<#A>).io.kotest.common/flatMap(kotlin/Function1<#A, kotlin/Result<#B>>): kotlin/Result<#B> // io.kotest.common/flatMap|flatMap@kotlin.Result<0:0>(kotlin.Function1<0:0,kotlin.Result<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin/Result<kotlin/Result<#A>>).io.kotest.common/flatten(): kotlin/Result<#A> // io.kotest.common/flatten|flatten@kotlin.Result<kotlin.Result<0:0>>(){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any> (kotlin.reflect/KClass<*>).io.kotest.mpp/annotation(kotlin/Array<out io.kotest.mpp/AnnotationSearchParameter>... =...): #A? // io.kotest.mpp/annotation|annotation@kotlin.reflect.KClass<*>(kotlin.Array<out|io.kotest.mpp.AnnotationSearchParameter>...){0§<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (kotlin.reflect/KClass<*>).io.kotest.mpp/annotations(kotlin/Array<out io.kotest.mpp/AnnotationSearchParameter>... =...): kotlin.collections/List<#A> // io.kotest.mpp/annotations|annotations@kotlin.reflect.KClass<*>(kotlin.Array<out|io.kotest.mpp.AnnotationSearchParameter>...){0§<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (kotlin.reflect/KClass<*>).io.kotest.mpp/hasAnnotation(kotlin/Array<out io.kotest.mpp/AnnotationSearchParameter>... =...): kotlin/Boolean // io.kotest.mpp/hasAnnotation|hasAnnotation@kotlin.reflect.KClass<*>(kotlin.Array<out|io.kotest.mpp.AnnotationSearchParameter>...){0§<kotlin.Any>}[0]
final inline fun io.kotest.common/measureTimeMillisCompat(kotlin/Function0<kotlin/Unit>): kotlin/Long // io.kotest.common/measureTimeMillisCompat|measureTimeMillisCompat(kotlin.Function0<kotlin.Unit>){}[0]
final object io.kotest.common/MonotonicTimeSourceCompat { // io.kotest.common/MonotonicTimeSourceCompat|null[0]
    final fun adjustReading(io.kotest.common/TimeMarkCompat, kotlin.time/Duration): io.kotest.common/TimeMarkCompat // io.kotest.common/MonotonicTimeSourceCompat.adjustReading|adjustReading(io.kotest.common.TimeMarkCompat;kotlin.time.Duration){}[0]
    final fun elapsedFrom(io.kotest.common/TimeMarkCompat): kotlin.time/Duration // io.kotest.common/MonotonicTimeSourceCompat.elapsedFrom|elapsedFrom(io.kotest.common.TimeMarkCompat){}[0]
    final fun markNow(): io.kotest.common/TimeMarkCompat // io.kotest.common/MonotonicTimeSourceCompat.markNow|markNow(){}[0]
}
final object io.kotest.mpp/BasicReflection : io.kotest.mpp/Reflection { // io.kotest.mpp/BasicReflection|null[0]
    final fun <#A1: kotlin/Any> isDataClass(kotlin.reflect/KClass<#A1>): kotlin/Boolean // io.kotest.mpp/BasicReflection.isDataClass|isDataClass(kotlin.reflect.KClass<0:0>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> isEnumClass(kotlin.reflect/KClass<#A1>): kotlin/Boolean // io.kotest.mpp/BasicReflection.isEnumClass|isEnumClass(kotlin.reflect.KClass<0:0>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> newInstanceNoArgConstructor(kotlin.reflect/KClass<#A1>): #A1 // io.kotest.mpp/BasicReflection.newInstanceNoArgConstructor|newInstanceNoArgConstructor(kotlin.reflect.KClass<0:0>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> newInstanceNoArgConstructorOrObjectInstance(kotlin.reflect/KClass<#A1>): #A1 // io.kotest.mpp/BasicReflection.newInstanceNoArgConstructorOrObjectInstance|newInstanceNoArgConstructorOrObjectInstance(kotlin.reflect.KClass<0:0>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> primaryConstructorMembers(kotlin.reflect/KClass<#A1>): kotlin.collections/List<io.kotest.mpp/Property> // io.kotest.mpp/BasicReflection.primaryConstructorMembers|primaryConstructorMembers(kotlin.reflect.KClass<0:0>){0§<kotlin.Any>}[0]
    final fun annotations(kotlin.reflect/KClass<*>, kotlin.collections/Set<io.kotest.mpp/AnnotationSearchParameter>): kotlin.collections/List<kotlin/Annotation> // io.kotest.mpp/BasicReflection.annotations|annotations(kotlin.reflect.KClass<*>;kotlin.collections.Set<io.kotest.mpp.AnnotationSearchParameter>){}[0]
    final fun fqn(kotlin.reflect/KClass<*>): kotlin/String? // io.kotest.mpp/BasicReflection.fqn|fqn(kotlin.reflect.KClass<*>){}[0]
    final fun isPublic(kotlin.reflect/KClass<out kotlin/Any>): kotlin/Boolean // io.kotest.mpp/BasicReflection.isPublic|isPublic(kotlin.reflect.KClass<out|kotlin.Any>){}[0]
    final fun paramNames(kotlin/Function<*>): kotlin.collections/List<kotlin/String>? // io.kotest.mpp/BasicReflection.paramNames|paramNames(kotlin.Function<*>){}[0]
}
final object io.kotest.mpp/BasicStackTraces : io.kotest.mpp/StackTraces { // io.kotest.mpp/BasicStackTraces|null[0]
    final fun <#A1: kotlin/Throwable> cleanStackTrace(#A1): #A1 // io.kotest.mpp/BasicStackTraces.cleanStackTrace|cleanStackTrace(0:0){0§<kotlin.Throwable>}[0]
    final fun root(kotlin/Throwable): kotlin/Throwable // io.kotest.mpp/BasicStackTraces.root|root(kotlin.Throwable){}[0]
    final fun throwableLocation(kotlin/Throwable, kotlin/Int): kotlin.collections/List<kotlin/String>? // io.kotest.mpp/BasicStackTraces.throwableLocation|throwableLocation(kotlin.Throwable;kotlin.Int){}[0]
}
final object io.kotest.mpp/IncludingAnnotations : io.kotest.mpp/AnnotationSearchParameter // io.kotest.mpp/IncludingAnnotations|null[0]
final object io.kotest.mpp/IncludingSuperclasses : io.kotest.mpp/AnnotationSearchParameter // io.kotest.mpp/IncludingSuperclasses|null[0]
final suspend fun io.kotest.mpp/replay(kotlin/Int, kotlin/Int, kotlin.coroutines/SuspendFunction1<kotlin/Int, kotlin/Unit>) // io.kotest.mpp/replay|replay(kotlin.Int;kotlin.Int;kotlin.coroutines.SuspendFunction1<kotlin.Int,kotlin.Unit>){}[0]
final val io.kotest.common/platform // io.kotest.common/platform|{}platform[0]
    final fun <get-platform>(): io.kotest.common/Platform // io.kotest.common/platform.<get-platform>|<get-platform>(){}[0]
final val io.kotest.mpp/reflection // io.kotest.mpp/reflection|{}reflection[0]
    final fun <get-reflection>(): io.kotest.mpp/Reflection // io.kotest.mpp/reflection.<get-reflection>|<get-reflection>(){}[0]
final val io.kotest.mpp/stacktraces // io.kotest.mpp/stacktraces|{}stacktraces[0]
    final fun <get-stacktraces>(): io.kotest.mpp/StackTraces // io.kotest.mpp/stacktraces.<get-stacktraces>|<get-stacktraces>(){}[0]
final val io.kotest.mpp/start // io.kotest.mpp/start|{}start[0]
    final fun <get-start>(): io.kotest.common/TimeMarkCompat // io.kotest.mpp/start.<get-start>|<get-start>(){}[0]
final var io.kotest.mpp/shouldRemoveKotestElementsFromStacktrace // io.kotest.mpp/shouldRemoveKotestElementsFromStacktrace|{}shouldRemoveKotestElementsFromStacktrace[0]
    final fun <get-shouldRemoveKotestElementsFromStacktrace>(): kotlin/Boolean // io.kotest.mpp/shouldRemoveKotestElementsFromStacktrace.<get-shouldRemoveKotestElementsFromStacktrace>|<get-shouldRemoveKotestElementsFromStacktrace>(){}[0]
    final fun <set-shouldRemoveKotestElementsFromStacktrace>(kotlin/Boolean) // io.kotest.mpp/shouldRemoveKotestElementsFromStacktrace.<set-shouldRemoveKotestElementsFromStacktrace>|<set-shouldRemoveKotestElementsFromStacktrace>(kotlin.Boolean){}[0]
open annotation class io.kotest.common/DelicateKotest : kotlin/Annotation { // io.kotest.common/DelicateKotest|null[0]
    constructor <init>() // io.kotest.common/DelicateKotest.<init>|<init>(){}[0]
}
open annotation class io.kotest.common/ExperimentalKotest : kotlin/Annotation { // io.kotest.common/ExperimentalKotest|null[0]
    constructor <init>() // io.kotest.common/ExperimentalKotest.<init>|<init>(){}[0]
}
open annotation class io.kotest.common/JVMOnly : kotlin/Annotation { // io.kotest.common/JVMOnly|null[0]
    constructor <init>() // io.kotest.common/JVMOnly.<init>|<init>(){}[0]
}
open annotation class io.kotest.common/KotestInternal : kotlin/Annotation { // io.kotest.common/KotestInternal|null[0]
    constructor <init>() // io.kotest.common/KotestInternal.<init>|<init>(){}[0]
}
open annotation class io.kotest.common/SoftDeprecated : kotlin/Annotation { // io.kotest.common/SoftDeprecated|null[0]
    constructor <init>(kotlin/String) // io.kotest.common/SoftDeprecated.<init>|<init>(kotlin.String){}[0]
    final val message // io.kotest.common/SoftDeprecated.message|{}message[0]
        final fun <get-message>(): kotlin/String // io.kotest.common/SoftDeprecated.message.<get-message>|<get-message>(){}[0]
}
sealed interface io.kotest.mpp/AnnotationSearchParameter // io.kotest.mpp/AnnotationSearchParameter|null[0]
// Targets: [js, wasmJs]
final fun io.kotest.common/jsConsoleLog(kotlin/String) // io.kotest.common/jsConsoleLog|jsConsoleLog(kotlin.String){}[0]
// Targets: [js, wasmJs]
final fun io.kotest.mpp/jsProcessEnv(kotlin/String): kotlin/String? // io.kotest.mpp/jsProcessEnv|jsProcessEnv(kotlin.String){}[0]
// Targets: [js, wasmJs]
final object io.kotest.common/console { // io.kotest.common/console|null[0]
    final fun log(kotlin/Any?) // io.kotest.common/console.log|log(kotlin.Any?){}[0]
}
