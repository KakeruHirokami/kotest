// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.kotest:kotest-framework-datatest>
abstract interface io.kotest.datatest/WithDataTestName { // io.kotest.datatest/WithDataTestName|null[0]
    abstract fun dataTestName(): kotlin/String // io.kotest.datatest/WithDataTestName.dataTestName|dataTestName(){}[0]
}
final fun <#A: kotlin/Any?> (io.kotest.core.spec.style.scopes/RootScope).io.kotest.datatest/withData(#A, #A, kotlin/Array<out #A>..., kotlin.coroutines/SuspendFunction2<io.kotest.core.spec.style.scopes/ContainerScope, #A, kotlin/Unit>) // io.kotest.datatest/withData|withData@io.kotest.core.spec.style.scopes.RootScope(0:0;0:0;kotlin.Array<out|0:0>...;kotlin.coroutines.SuspendFunction2<io.kotest.core.spec.style.scopes.ContainerScope,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (io.kotest.core.spec.style.scopes/RootScope).io.kotest.datatest/withData(kotlin.collections/Iterable<#A>, kotlin.coroutines/SuspendFunction2<io.kotest.core.spec.style.scopes/ContainerScope, #A, kotlin/Unit>) // io.kotest.datatest/withData|withData@io.kotest.core.spec.style.scopes.RootScope(kotlin.collections.Iterable<0:0>;kotlin.coroutines.SuspendFunction2<io.kotest.core.spec.style.scopes.ContainerScope,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (io.kotest.core.spec.style.scopes/RootScope).io.kotest.datatest/withData(kotlin.collections/Map<kotlin/String, #A>, kotlin.coroutines/SuspendFunction2<io.kotest.core.spec.style.scopes/ContainerScope, #A, kotlin/Unit>) // io.kotest.datatest/withData|withData@io.kotest.core.spec.style.scopes.RootScope(kotlin.collections.Map<kotlin.String,0:0>;kotlin.coroutines.SuspendFunction2<io.kotest.core.spec.style.scopes.ContainerScope,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (io.kotest.core.spec.style.scopes/RootScope).io.kotest.datatest/withData(kotlin.sequences/Sequence<#A>, kotlin.coroutines/SuspendFunction2<io.kotest.core.spec.style.scopes/ContainerScope, #A, kotlin/Unit>) // io.kotest.datatest/withData|withData@io.kotest.core.spec.style.scopes.RootScope(kotlin.sequences.Sequence<0:0>;kotlin.coroutines.SuspendFunction2<io.kotest.core.spec.style.scopes.ContainerScope,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (io.kotest.core.spec.style.scopes/RootScope).io.kotest.datatest/withData(kotlin/Function1<#A, kotlin/String>, #A, #A, kotlin/Array<out #A>..., kotlin.coroutines/SuspendFunction2<io.kotest.core.spec.style.scopes/ContainerScope, #A, kotlin/Unit>) // io.kotest.datatest/withData|withData@io.kotest.core.spec.style.scopes.RootScope(kotlin.Function1<0:0,kotlin.String>;0:0;0:0;kotlin.Array<out|0:0>...;kotlin.coroutines.SuspendFunction2<io.kotest.core.spec.style.scopes.ContainerScope,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (io.kotest.core.spec.style.scopes/RootScope).io.kotest.datatest/withData(kotlin/Function1<#A, kotlin/String>, kotlin.collections/Iterable<#A>, kotlin.coroutines/SuspendFunction2<io.kotest.core.spec.style.scopes/ContainerScope, #A, kotlin/Unit>) // io.kotest.datatest/withData|withData@io.kotest.core.spec.style.scopes.RootScope(kotlin.Function1<0:0,kotlin.String>;kotlin.collections.Iterable<0:0>;kotlin.coroutines.SuspendFunction2<io.kotest.core.spec.style.scopes.ContainerScope,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (io.kotest.core.spec.style.scopes/RootScope).io.kotest.datatest/withData(kotlin/Function1<#A, kotlin/String>, kotlin.sequences/Sequence<#A>, kotlin.coroutines/SuspendFunction2<io.kotest.core.spec.style.scopes/ContainerScope, #A, kotlin/Unit>) // io.kotest.datatest/withData|withData@io.kotest.core.spec.style.scopes.RootScope(kotlin.Function1<0:0,kotlin.String>;kotlin.sequences.Sequence<0:0>;kotlin.coroutines.SuspendFunction2<io.kotest.core.spec.style.scopes.ContainerScope,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun io.kotest.datatest/getStableIdentifier(kotlin/Any?): kotlin/String // io.kotest.datatest/getStableIdentifier|getStableIdentifier(kotlin.Any?){}[0]
final object io.kotest.datatest/StableIdentifiers { // io.kotest.datatest/StableIdentifiers|null[0]
    final fun stableIdentifier(kotlin/Any): kotlin/String // io.kotest.datatest/StableIdentifiers.stableIdentifier|stableIdentifier(kotlin.Any){}[0]
}
final suspend fun <#A: kotlin/Any?> (io.kotest.core.spec.style.scopes/ContainerScope).io.kotest.datatest/withData(#A, #A, kotlin/Array<out #A>..., kotlin.coroutines/SuspendFunction2<io.kotest.core.spec.style.scopes/ContainerScope, #A, kotlin/Unit>) // io.kotest.datatest/withData|withData@io.kotest.core.spec.style.scopes.ContainerScope(0:0;0:0;kotlin.Array<out|0:0>...;kotlin.coroutines.SuspendFunction2<io.kotest.core.spec.style.scopes.ContainerScope,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (io.kotest.core.spec.style.scopes/ContainerScope).io.kotest.datatest/withData(kotlin.collections/Iterable<#A>, kotlin.coroutines/SuspendFunction2<io.kotest.core.spec.style.scopes/ContainerScope, #A, kotlin/Unit>) // io.kotest.datatest/withData|withData@io.kotest.core.spec.style.scopes.ContainerScope(kotlin.collections.Iterable<0:0>;kotlin.coroutines.SuspendFunction2<io.kotest.core.spec.style.scopes.ContainerScope,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (io.kotest.core.spec.style.scopes/ContainerScope).io.kotest.datatest/withData(kotlin.collections/Map<kotlin/String, #A>, kotlin.coroutines/SuspendFunction2<io.kotest.core.spec.style.scopes/ContainerScope, #A, kotlin/Unit>) // io.kotest.datatest/withData|withData@io.kotest.core.spec.style.scopes.ContainerScope(kotlin.collections.Map<kotlin.String,0:0>;kotlin.coroutines.SuspendFunction2<io.kotest.core.spec.style.scopes.ContainerScope,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (io.kotest.core.spec.style.scopes/ContainerScope).io.kotest.datatest/withData(kotlin.sequences/Sequence<#A>, kotlin.coroutines/SuspendFunction2<io.kotest.core.spec.style.scopes/ContainerScope, #A, kotlin/Unit>) // io.kotest.datatest/withData|withData@io.kotest.core.spec.style.scopes.ContainerScope(kotlin.sequences.Sequence<0:0>;kotlin.coroutines.SuspendFunction2<io.kotest.core.spec.style.scopes.ContainerScope,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (io.kotest.core.spec.style.scopes/ContainerScope).io.kotest.datatest/withData(kotlin/Function1<#A, kotlin/String>, #A, #A, kotlin/Array<out #A>..., kotlin.coroutines/SuspendFunction2<io.kotest.core.spec.style.scopes/ContainerScope, #A, kotlin/Unit>) // io.kotest.datatest/withData|withData@io.kotest.core.spec.style.scopes.ContainerScope(kotlin.Function1<0:0,kotlin.String>;0:0;0:0;kotlin.Array<out|0:0>...;kotlin.coroutines.SuspendFunction2<io.kotest.core.spec.style.scopes.ContainerScope,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (io.kotest.core.spec.style.scopes/ContainerScope).io.kotest.datatest/withData(kotlin/Function1<#A, kotlin/String>, kotlin.collections/Iterable<#A>, kotlin.coroutines/SuspendFunction2<io.kotest.core.spec.style.scopes/ContainerScope, #A, kotlin/Unit>) // io.kotest.datatest/withData|withData@io.kotest.core.spec.style.scopes.ContainerScope(kotlin.Function1<0:0,kotlin.String>;kotlin.collections.Iterable<0:0>;kotlin.coroutines.SuspendFunction2<io.kotest.core.spec.style.scopes.ContainerScope,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (io.kotest.core.spec.style.scopes/ContainerScope).io.kotest.datatest/withData(kotlin/Function1<#A, kotlin/String>, kotlin.sequences/Sequence<#A>, kotlin.coroutines/SuspendFunction2<io.kotest.core.spec.style.scopes/ContainerScope, #A, kotlin/Unit>) // io.kotest.datatest/withData|withData@io.kotest.core.spec.style.scopes.ContainerScope(kotlin.Function1<0:0,kotlin.String>;kotlin.sequences.Sequence<0:0>;kotlin.coroutines.SuspendFunction2<io.kotest.core.spec.style.scopes.ContainerScope,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
open annotation class io.kotest.datatest/IsStableType : kotlin/Annotation { // io.kotest.datatest/IsStableType|null[0]
    constructor <init>() // io.kotest.datatest/IsStableType.<init>|<init>(){}[0]
}
