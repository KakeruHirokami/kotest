// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.kotest:kotest-framework-concurrency>
abstract interface io.kotest.framework.concurrency/Interval { // io.kotest.framework.concurrency/Interval|null[0]
    abstract fun next(kotlin/Int): kotlin/Long // io.kotest.framework.concurrency/Interval.next|next(kotlin.Int){}[0]
}
final class <#A: kotlin/Any?> io.kotest.framework.concurrency/ContinuallyBuilder { // io.kotest.framework.concurrency/ContinuallyBuilder|null[0]
    constructor <init>() // io.kotest.framework.concurrency/ContinuallyBuilder.<init>|<init>(){}[0]
    constructor <init>(io.kotest.framework.concurrency/ContinuallyConfig<#A>) // io.kotest.framework.concurrency/ContinuallyBuilder.<init>|<init>(io.kotest.framework.concurrency.ContinuallyConfig<1:0>){}[0]
    final fun toConfig(): io.kotest.framework.concurrency/ContinuallyConfig<#A> // io.kotest.framework.concurrency/ContinuallyBuilder.toConfig|toConfig(){}[0]
    final var duration // io.kotest.framework.concurrency/ContinuallyBuilder.duration|{}duration[0]
        final fun <get-duration>(): kotlin/Long // io.kotest.framework.concurrency/ContinuallyBuilder.duration.<get-duration>|<get-duration>(){}[0]
        final fun <set-duration>(kotlin/Long) // io.kotest.framework.concurrency/ContinuallyBuilder.duration.<set-duration>|<set-duration>(kotlin.Long){}[0]
    final var initialDelay // io.kotest.framework.concurrency/ContinuallyBuilder.initialDelay|{}initialDelay[0]
        final fun <get-initialDelay>(): kotlin/Long // io.kotest.framework.concurrency/ContinuallyBuilder.initialDelay.<get-initialDelay>|<get-initialDelay>(){}[0]
        final fun <set-initialDelay>(kotlin/Long) // io.kotest.framework.concurrency/ContinuallyBuilder.initialDelay.<set-initialDelay>|<set-initialDelay>(kotlin.Long){}[0]
    final var interval // io.kotest.framework.concurrency/ContinuallyBuilder.interval|{}interval[0]
        final fun <get-interval>(): io.kotest.framework.concurrency/Interval // io.kotest.framework.concurrency/ContinuallyBuilder.interval.<get-interval>|<get-interval>(){}[0]
        final fun <set-interval>(io.kotest.framework.concurrency/Interval) // io.kotest.framework.concurrency/ContinuallyBuilder.interval.<set-interval>|<set-interval>(io.kotest.framework.concurrency.Interval){}[0]
    final var listener // io.kotest.framework.concurrency/ContinuallyBuilder.listener|{}listener[0]
        final fun <get-listener>(): kotlin/Function1<io.kotest.framework.concurrency/ContinuallyState<#A>, kotlin/Unit>? // io.kotest.framework.concurrency/ContinuallyBuilder.listener.<get-listener>|<get-listener>(){}[0]
        final fun <set-listener>(kotlin/Function1<io.kotest.framework.concurrency/ContinuallyState<#A>, kotlin/Unit>?) // io.kotest.framework.concurrency/ContinuallyBuilder.listener.<set-listener>|<set-listener>(kotlin.Function1<io.kotest.framework.concurrency.ContinuallyState<1:0>,kotlin.Unit>?){}[0]
}
final class <#A: kotlin/Any?> io.kotest.framework.concurrency/ContinuallyConfig { // io.kotest.framework.concurrency/ContinuallyConfig|null[0]
    constructor <init>(kotlin/Long =..., io.kotest.framework.concurrency/Interval =..., kotlin/Long =..., kotlin/Function1<io.kotest.framework.concurrency/ContinuallyState<#A>, kotlin/Unit>? =...) // io.kotest.framework.concurrency/ContinuallyConfig.<init>|<init>(kotlin.Long;io.kotest.framework.concurrency.Interval;kotlin.Long;kotlin.Function1<io.kotest.framework.concurrency.ContinuallyState<1:0>,kotlin.Unit>?){}[0]
    final fun component1(): kotlin/Long // io.kotest.framework.concurrency/ContinuallyConfig.component1|component1(){}[0]
    final fun component2(): io.kotest.framework.concurrency/Interval // io.kotest.framework.concurrency/ContinuallyConfig.component2|component2(){}[0]
    final fun component3(): kotlin/Long // io.kotest.framework.concurrency/ContinuallyConfig.component3|component3(){}[0]
    final fun component4(): kotlin/Function1<io.kotest.framework.concurrency/ContinuallyState<#A>, kotlin/Unit>? // io.kotest.framework.concurrency/ContinuallyConfig.component4|component4(){}[0]
    final fun copy(kotlin/Long =..., io.kotest.framework.concurrency/Interval =..., kotlin/Long =..., kotlin/Function1<io.kotest.framework.concurrency/ContinuallyState<#A>, kotlin/Unit>? =...): io.kotest.framework.concurrency/ContinuallyConfig<#A> // io.kotest.framework.concurrency/ContinuallyConfig.copy|copy(kotlin.Long;io.kotest.framework.concurrency.Interval;kotlin.Long;kotlin.Function1<io.kotest.framework.concurrency.ContinuallyState<1:0>,kotlin.Unit>?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.framework.concurrency/ContinuallyConfig.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.kotest.framework.concurrency/ContinuallyConfig.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.kotest.framework.concurrency/ContinuallyConfig.toString|toString(){}[0]
    final val duration // io.kotest.framework.concurrency/ContinuallyConfig.duration|{}duration[0]
        final fun <get-duration>(): kotlin/Long // io.kotest.framework.concurrency/ContinuallyConfig.duration.<get-duration>|<get-duration>(){}[0]
    final val initialDelay // io.kotest.framework.concurrency/ContinuallyConfig.initialDelay|{}initialDelay[0]
        final fun <get-initialDelay>(): kotlin/Long // io.kotest.framework.concurrency/ContinuallyConfig.initialDelay.<get-initialDelay>|<get-initialDelay>(){}[0]
    final val interval // io.kotest.framework.concurrency/ContinuallyConfig.interval|{}interval[0]
        final fun <get-interval>(): io.kotest.framework.concurrency/Interval // io.kotest.framework.concurrency/ContinuallyConfig.interval.<get-interval>|<get-interval>(){}[0]
    final val listener // io.kotest.framework.concurrency/ContinuallyConfig.listener|{}listener[0]
        final fun <get-listener>(): kotlin/Function1<io.kotest.framework.concurrency/ContinuallyState<#A>, kotlin/Unit>? // io.kotest.framework.concurrency/ContinuallyConfig.listener.<get-listener>|<get-listener>(){}[0]
}
final class <#A: kotlin/Any?> io.kotest.framework.concurrency/ContinuallyState { // io.kotest.framework.concurrency/ContinuallyState|null[0]
    constructor <init>(#A, kotlin/Long, kotlin/Long, kotlin/Int) // io.kotest.framework.concurrency/ContinuallyState.<init>|<init>(1:0;kotlin.Long;kotlin.Long;kotlin.Int){}[0]
    final fun component1(): #A // io.kotest.framework.concurrency/ContinuallyState.component1|component1(){}[0]
    final fun component2(): kotlin/Long // io.kotest.framework.concurrency/ContinuallyState.component2|component2(){}[0]
    final fun component3(): kotlin/Long // io.kotest.framework.concurrency/ContinuallyState.component3|component3(){}[0]
    final fun component4(): kotlin/Int // io.kotest.framework.concurrency/ContinuallyState.component4|component4(){}[0]
    final fun copy(#A =..., kotlin/Long =..., kotlin/Long =..., kotlin/Int =...): io.kotest.framework.concurrency/ContinuallyState<#A> // io.kotest.framework.concurrency/ContinuallyState.copy|copy(1:0;kotlin.Long;kotlin.Long;kotlin.Int){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.framework.concurrency/ContinuallyState.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.kotest.framework.concurrency/ContinuallyState.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.kotest.framework.concurrency/ContinuallyState.toString|toString(){}[0]
    final val end // io.kotest.framework.concurrency/ContinuallyState.end|{}end[0]
        final fun <get-end>(): kotlin/Long // io.kotest.framework.concurrency/ContinuallyState.end.<get-end>|<get-end>(){}[0]
    final val result // io.kotest.framework.concurrency/ContinuallyState.result|{}result[0]
        final fun <get-result>(): #A // io.kotest.framework.concurrency/ContinuallyState.result.<get-result>|<get-result>(){}[0]
    final val start // io.kotest.framework.concurrency/ContinuallyState.start|{}start[0]
        final fun <get-start>(): kotlin/Long // io.kotest.framework.concurrency/ContinuallyState.start.<get-start>|<get-start>(){}[0]
    final val times // io.kotest.framework.concurrency/ContinuallyState.times|{}times[0]
        final fun <get-times>(): kotlin/Int // io.kotest.framework.concurrency/ContinuallyState.times.<get-times>|<get-times>(){}[0]
}
final class <#A: kotlin/Any?> io.kotest.framework.concurrency/EventuallyBuilder { // io.kotest.framework.concurrency/EventuallyBuilder|null[0]
    constructor <init>() // io.kotest.framework.concurrency/EventuallyBuilder.<init>|<init>(){}[0]
    final fun build(): io.kotest.framework.concurrency/EventuallyConfig<#A> // io.kotest.framework.concurrency/EventuallyBuilder.build|build(){}[0]
    final var duration // io.kotest.framework.concurrency/EventuallyBuilder.duration|<set-duration>(kotlin.Long){}[0]
        final fun <get-duration>(): kotlin/Long // io.kotest.framework.concurrency/EventuallyBuilder.duration.<get-duration>|<get-duration>(){}[0]
        final fun <set-duration>(kotlin/Long) // io.kotest.framework.concurrency/EventuallyBuilder.duration.<set-duration>|<set-duration>(kotlin.Long){}[0]
    final var initialDelay // io.kotest.framework.concurrency/EventuallyBuilder.initialDelay|<set-initialDelay>(kotlin.Long){}[0]
        final fun <get-initialDelay>(): kotlin/Long // io.kotest.framework.concurrency/EventuallyBuilder.initialDelay.<get-initialDelay>|<get-initialDelay>(){}[0]
        final fun <set-initialDelay>(kotlin/Long) // io.kotest.framework.concurrency/EventuallyBuilder.initialDelay.<set-initialDelay>|<set-initialDelay>(kotlin.Long){}[0]
    final var interval // io.kotest.framework.concurrency/EventuallyBuilder.interval|<set-interval>(io.kotest.framework.concurrency.Interval){}[0]
        final fun <get-interval>(): io.kotest.framework.concurrency/Interval // io.kotest.framework.concurrency/EventuallyBuilder.interval.<get-interval>|<get-interval>(){}[0]
        final fun <set-interval>(io.kotest.framework.concurrency/Interval) // io.kotest.framework.concurrency/EventuallyBuilder.interval.<set-interval>|<set-interval>(io.kotest.framework.concurrency.Interval){}[0]
    final var listener // io.kotest.framework.concurrency/EventuallyBuilder.listener|<set-listener>(kotlin.Function1<io.kotest.framework.concurrency.EventuallyState<1:0>,kotlin.Unit>?){}[0]
        final fun <get-listener>(): kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Unit>? // io.kotest.framework.concurrency/EventuallyBuilder.listener.<get-listener>|<get-listener>(){}[0]
        final fun <set-listener>(kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Unit>?) // io.kotest.framework.concurrency/EventuallyBuilder.listener.<set-listener>|<set-listener>(kotlin.Function1<io.kotest.framework.concurrency.EventuallyState<1:0>,kotlin.Unit>?){}[0]
    final var predicate // io.kotest.framework.concurrency/EventuallyBuilder.predicate|<set-predicate>(kotlin.Function1<io.kotest.framework.concurrency.EventuallyState<1:0>,kotlin.Boolean>?){}[0]
        final fun <get-predicate>(): kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Boolean>? // io.kotest.framework.concurrency/EventuallyBuilder.predicate.<get-predicate>|<get-predicate>(){}[0]
        final fun <set-predicate>(kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Boolean>?) // io.kotest.framework.concurrency/EventuallyBuilder.predicate.<set-predicate>|<set-predicate>(kotlin.Function1<io.kotest.framework.concurrency.EventuallyState<1:0>,kotlin.Boolean>?){}[0]
    final var retries // io.kotest.framework.concurrency/EventuallyBuilder.retries|<set-retries>(kotlin.Int){}[0]
        final fun <get-retries>(): kotlin/Int // io.kotest.framework.concurrency/EventuallyBuilder.retries.<get-retries>|<get-retries>(){}[0]
        final fun <set-retries>(kotlin/Int) // io.kotest.framework.concurrency/EventuallyBuilder.retries.<set-retries>|<set-retries>(kotlin.Int){}[0]
    final var shortCircuit // io.kotest.framework.concurrency/EventuallyBuilder.shortCircuit|<set-shortCircuit>(kotlin.Function1<io.kotest.framework.concurrency.EventuallyState<1:0>,kotlin.Boolean>?){}[0]
        final fun <get-shortCircuit>(): kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Boolean>? // io.kotest.framework.concurrency/EventuallyBuilder.shortCircuit.<get-shortCircuit>|<get-shortCircuit>(){}[0]
        final fun <set-shortCircuit>(kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Boolean>?) // io.kotest.framework.concurrency/EventuallyBuilder.shortCircuit.<set-shortCircuit>|<set-shortCircuit>(kotlin.Function1<io.kotest.framework.concurrency.EventuallyState<1:0>,kotlin.Boolean>?){}[0]
    final var suppressExceptionIf // io.kotest.framework.concurrency/EventuallyBuilder.suppressExceptionIf|<set-suppressExceptionIf>(kotlin.Function1<kotlin.Throwable,kotlin.Boolean>?){}[0]
        final fun <get-suppressExceptionIf>(): kotlin/Function1<kotlin/Throwable, kotlin/Boolean>? // io.kotest.framework.concurrency/EventuallyBuilder.suppressExceptionIf.<get-suppressExceptionIf>|<get-suppressExceptionIf>(){}[0]
        final fun <set-suppressExceptionIf>(kotlin/Function1<kotlin/Throwable, kotlin/Boolean>?) // io.kotest.framework.concurrency/EventuallyBuilder.suppressExceptionIf.<set-suppressExceptionIf>|<set-suppressExceptionIf>(kotlin.Function1<kotlin.Throwable,kotlin.Boolean>?){}[0]
    final var suppressExceptions // io.kotest.framework.concurrency/EventuallyBuilder.suppressExceptions|<set-suppressExceptions>(kotlin.collections.Set<kotlin.reflect.KClass<out|kotlin.Throwable>>){}[0]
        final fun <get-suppressExceptions>(): kotlin.collections/Set<kotlin.reflect/KClass<out kotlin/Throwable>> // io.kotest.framework.concurrency/EventuallyBuilder.suppressExceptions.<get-suppressExceptions>|<get-suppressExceptions>(){}[0]
        final fun <set-suppressExceptions>(kotlin.collections/Set<kotlin.reflect/KClass<out kotlin/Throwable>>) // io.kotest.framework.concurrency/EventuallyBuilder.suppressExceptions.<set-suppressExceptions>|<set-suppressExceptions>(kotlin.collections.Set<kotlin.reflect.KClass<out|kotlin.Throwable>>){}[0]
}
final class <#A: kotlin/Any?> io.kotest.framework.concurrency/EventuallyConfig { // io.kotest.framework.concurrency/EventuallyConfig|null[0]
    constructor <init>(kotlin/Long =..., io.kotest.framework.concurrency/Interval =..., kotlin/Long =..., kotlin/Int =..., kotlin.collections/Set<kotlin.reflect/KClass<out kotlin/Throwable>> =..., kotlin/Function1<kotlin/Throwable, kotlin/Boolean>? =..., kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Unit>? =..., kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Boolean>? =..., kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Boolean>? =...) // io.kotest.framework.concurrency/EventuallyConfig.<init>|<init>(kotlin.Long;io.kotest.framework.concurrency.Interval;kotlin.Long;kotlin.Int;kotlin.collections.Set<kotlin.reflect.KClass<out|kotlin.Throwable>>;kotlin.Function1<kotlin.Throwable,kotlin.Boolean>?;kotlin.Function1<io.kotest.framework.concurrency.EventuallyState<1:0>,kotlin.Unit>?;kotlin.Function1<io.kotest.framework.concurrency.EventuallyState<1:0>,kotlin.Boolean>?;kotlin.Function1<io.kotest.framework.concurrency.EventuallyState<1:0>,kotlin.Boolean>?){}[0]
    final fun component1(): kotlin/Long // io.kotest.framework.concurrency/EventuallyConfig.component1|component1(){}[0]
    final fun component2(): io.kotest.framework.concurrency/Interval // io.kotest.framework.concurrency/EventuallyConfig.component2|component2(){}[0]
    final fun component3(): kotlin/Long // io.kotest.framework.concurrency/EventuallyConfig.component3|component3(){}[0]
    final fun component4(): kotlin/Int // io.kotest.framework.concurrency/EventuallyConfig.component4|component4(){}[0]
    final fun component5(): kotlin.collections/Set<kotlin.reflect/KClass<out kotlin/Throwable>> // io.kotest.framework.concurrency/EventuallyConfig.component5|component5(){}[0]
    final fun component6(): kotlin/Function1<kotlin/Throwable, kotlin/Boolean>? // io.kotest.framework.concurrency/EventuallyConfig.component6|component6(){}[0]
    final fun component7(): kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Unit>? // io.kotest.framework.concurrency/EventuallyConfig.component7|component7(){}[0]
    final fun component8(): kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Boolean>? // io.kotest.framework.concurrency/EventuallyConfig.component8|component8(){}[0]
    final fun component9(): kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Boolean>? // io.kotest.framework.concurrency/EventuallyConfig.component9|component9(){}[0]
    final fun copy(kotlin/Long =..., io.kotest.framework.concurrency/Interval =..., kotlin/Long =..., kotlin/Int =..., kotlin.collections/Set<kotlin.reflect/KClass<out kotlin/Throwable>> =..., kotlin/Function1<kotlin/Throwable, kotlin/Boolean>? =..., kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Unit>? =..., kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Boolean>? =..., kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Boolean>? =...): io.kotest.framework.concurrency/EventuallyConfig<#A> // io.kotest.framework.concurrency/EventuallyConfig.copy|copy(kotlin.Long;io.kotest.framework.concurrency.Interval;kotlin.Long;kotlin.Int;kotlin.collections.Set<kotlin.reflect.KClass<out|kotlin.Throwable>>;kotlin.Function1<kotlin.Throwable,kotlin.Boolean>?;kotlin.Function1<io.kotest.framework.concurrency.EventuallyState<1:0>,kotlin.Unit>?;kotlin.Function1<io.kotest.framework.concurrency.EventuallyState<1:0>,kotlin.Boolean>?;kotlin.Function1<io.kotest.framework.concurrency.EventuallyState<1:0>,kotlin.Boolean>?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.framework.concurrency/EventuallyConfig.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.kotest.framework.concurrency/EventuallyConfig.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.kotest.framework.concurrency/EventuallyConfig.toString|toString(){}[0]
    final val duration // io.kotest.framework.concurrency/EventuallyConfig.duration|{}duration[0]
        final fun <get-duration>(): kotlin/Long // io.kotest.framework.concurrency/EventuallyConfig.duration.<get-duration>|<get-duration>(){}[0]
    final val initialDelay // io.kotest.framework.concurrency/EventuallyConfig.initialDelay|{}initialDelay[0]
        final fun <get-initialDelay>(): kotlin/Long // io.kotest.framework.concurrency/EventuallyConfig.initialDelay.<get-initialDelay>|<get-initialDelay>(){}[0]
    final val interval // io.kotest.framework.concurrency/EventuallyConfig.interval|{}interval[0]
        final fun <get-interval>(): io.kotest.framework.concurrency/Interval // io.kotest.framework.concurrency/EventuallyConfig.interval.<get-interval>|<get-interval>(){}[0]
    final val listener // io.kotest.framework.concurrency/EventuallyConfig.listener|{}listener[0]
        final fun <get-listener>(): kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Unit>? // io.kotest.framework.concurrency/EventuallyConfig.listener.<get-listener>|<get-listener>(){}[0]
    final val predicate // io.kotest.framework.concurrency/EventuallyConfig.predicate|{}predicate[0]
        final fun <get-predicate>(): kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Boolean>? // io.kotest.framework.concurrency/EventuallyConfig.predicate.<get-predicate>|<get-predicate>(){}[0]
    final val retries // io.kotest.framework.concurrency/EventuallyConfig.retries|{}retries[0]
        final fun <get-retries>(): kotlin/Int // io.kotest.framework.concurrency/EventuallyConfig.retries.<get-retries>|<get-retries>(){}[0]
    final val shortCircuit // io.kotest.framework.concurrency/EventuallyConfig.shortCircuit|{}shortCircuit[0]
        final fun <get-shortCircuit>(): kotlin/Function1<io.kotest.framework.concurrency/EventuallyState<#A>, kotlin/Boolean>? // io.kotest.framework.concurrency/EventuallyConfig.shortCircuit.<get-shortCircuit>|<get-shortCircuit>(){}[0]
    final val suppressExceptionIf // io.kotest.framework.concurrency/EventuallyConfig.suppressExceptionIf|{}suppressExceptionIf[0]
        final fun <get-suppressExceptionIf>(): kotlin/Function1<kotlin/Throwable, kotlin/Boolean>? // io.kotest.framework.concurrency/EventuallyConfig.suppressExceptionIf.<get-suppressExceptionIf>|<get-suppressExceptionIf>(){}[0]
    final val suppressExceptions // io.kotest.framework.concurrency/EventuallyConfig.suppressExceptions|{}suppressExceptions[0]
        final fun <get-suppressExceptions>(): kotlin.collections/Set<kotlin.reflect/KClass<out kotlin/Throwable>> // io.kotest.framework.concurrency/EventuallyConfig.suppressExceptions.<get-suppressExceptions>|<get-suppressExceptions>(){}[0]
}
final class <#A: kotlin/Any?> io.kotest.framework.concurrency/EventuallyState { // io.kotest.framework.concurrency/EventuallyState|null[0]
    constructor <init>(#A?, kotlin/Long, kotlin/Long, kotlin/Int, kotlin/Throwable?, kotlin/Throwable?) // io.kotest.framework.concurrency/EventuallyState.<init>|<init>(1:0?;kotlin.Long;kotlin.Long;kotlin.Int;kotlin.Throwable?;kotlin.Throwable?){}[0]
    final fun component1(): #A? // io.kotest.framework.concurrency/EventuallyState.component1|component1(){}[0]
    final fun component2(): kotlin/Long // io.kotest.framework.concurrency/EventuallyState.component2|component2(){}[0]
    final fun component3(): kotlin/Long // io.kotest.framework.concurrency/EventuallyState.component3|component3(){}[0]
    final fun component4(): kotlin/Int // io.kotest.framework.concurrency/EventuallyState.component4|component4(){}[0]
    final fun component5(): kotlin/Throwable? // io.kotest.framework.concurrency/EventuallyState.component5|component5(){}[0]
    final fun component6(): kotlin/Throwable? // io.kotest.framework.concurrency/EventuallyState.component6|component6(){}[0]
    final fun copy(#A? =..., kotlin/Long =..., kotlin/Long =..., kotlin/Int =..., kotlin/Throwable? =..., kotlin/Throwable? =...): io.kotest.framework.concurrency/EventuallyState<#A> // io.kotest.framework.concurrency/EventuallyState.copy|copy(1:0?;kotlin.Long;kotlin.Long;kotlin.Int;kotlin.Throwable?;kotlin.Throwable?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.framework.concurrency/EventuallyState.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.kotest.framework.concurrency/EventuallyState.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.kotest.framework.concurrency/EventuallyState.toString|toString(){}[0]
    final val end // io.kotest.framework.concurrency/EventuallyState.end|{}end[0]
        final fun <get-end>(): kotlin/Long // io.kotest.framework.concurrency/EventuallyState.end.<get-end>|<get-end>(){}[0]
    final val firstError // io.kotest.framework.concurrency/EventuallyState.firstError|{}firstError[0]
        final fun <get-firstError>(): kotlin/Throwable? // io.kotest.framework.concurrency/EventuallyState.firstError.<get-firstError>|<get-firstError>(){}[0]
    final val result // io.kotest.framework.concurrency/EventuallyState.result|{}result[0]
        final fun <get-result>(): #A? // io.kotest.framework.concurrency/EventuallyState.result.<get-result>|<get-result>(){}[0]
    final val start // io.kotest.framework.concurrency/EventuallyState.start|{}start[0]
        final fun <get-start>(): kotlin/Long // io.kotest.framework.concurrency/EventuallyState.start.<get-start>|<get-start>(){}[0]
    final val thisError // io.kotest.framework.concurrency/EventuallyState.thisError|{}thisError[0]
        final fun <get-thisError>(): kotlin/Throwable? // io.kotest.framework.concurrency/EventuallyState.thisError.<get-thisError>|<get-thisError>(){}[0]
    final val times // io.kotest.framework.concurrency/EventuallyState.times|{}times[0]
        final fun <get-times>(): kotlin/Int // io.kotest.framework.concurrency/EventuallyState.times.<get-times>|<get-times>(){}[0]
}
final class io.kotest.framework.concurrency/EventuallyShortCircuitException : kotlin/Throwable { // io.kotest.framework.concurrency/EventuallyShortCircuitException|null[0]
    constructor <init>(kotlin/String) // io.kotest.framework.concurrency/EventuallyShortCircuitException.<init>|<init>(kotlin.String){}[0]
    final val message // io.kotest.framework.concurrency/EventuallyShortCircuitException.message|{}message[0]
        final fun <get-message>(): kotlin/String // io.kotest.framework.concurrency/EventuallyShortCircuitException.message.<get-message>|<get-message>(){}[0]
}
final class io.kotest.framework.concurrency/ExponentialInterval : io.kotest.framework.concurrency/Interval { // io.kotest.framework.concurrency/ExponentialInterval|null[0]
    constructor <init>(kotlin/Long, kotlin/Double, kotlin/Long?) // io.kotest.framework.concurrency/ExponentialInterval.<init>|<init>(kotlin.Long;kotlin.Double;kotlin.Long?){}[0]
    final fun next(kotlin/Int): kotlin/Long // io.kotest.framework.concurrency/ExponentialInterval.next|next(kotlin.Int){}[0]
    final fun toString(): kotlin/String // io.kotest.framework.concurrency/ExponentialInterval.toString|toString(){}[0]
    final object Companion { // io.kotest.framework.concurrency/ExponentialInterval.Companion|null[0]
        final const val defaultFactor // io.kotest.framework.concurrency/ExponentialInterval.Companion.defaultFactor|{}defaultFactor[0]
            final fun <get-defaultFactor>(): kotlin/Double // io.kotest.framework.concurrency/ExponentialInterval.Companion.defaultFactor.<get-defaultFactor>|<get-defaultFactor>(){}[0]
        final const val defaultMax // io.kotest.framework.concurrency/ExponentialInterval.Companion.defaultMax|{}defaultMax[0]
            final fun <get-defaultMax>(): kotlin/Long // io.kotest.framework.concurrency/ExponentialInterval.Companion.defaultMax.<get-defaultMax>|<get-defaultMax>(){}[0]
    }
}
final class io.kotest.framework.concurrency/FibonacciInterval : io.kotest.framework.concurrency/Interval { // io.kotest.framework.concurrency/FibonacciInterval|null[0]
    constructor <init>(kotlin/Long, kotlin/Int, kotlin/Long?) // io.kotest.framework.concurrency/FibonacciInterval.<init>|<init>(kotlin.Long;kotlin.Int;kotlin.Long?){}[0]
    final fun next(kotlin/Int): kotlin/Long // io.kotest.framework.concurrency/FibonacciInterval.next|next(kotlin.Int){}[0]
    final fun toString(): kotlin/String // io.kotest.framework.concurrency/FibonacciInterval.toString|toString(){}[0]
    final object Companion { // io.kotest.framework.concurrency/FibonacciInterval.Companion|null[0]
        final const val defaultMax // io.kotest.framework.concurrency/FibonacciInterval.Companion.defaultMax|{}defaultMax[0]
            final fun <get-defaultMax>(): kotlin/Long // io.kotest.framework.concurrency/FibonacciInterval.Companion.defaultMax.<get-defaultMax>|<get-defaultMax>(){}[0]
    }
}
final class io.kotest.framework.concurrency/FixedInterval : io.kotest.framework.concurrency/Interval { // io.kotest.framework.concurrency/FixedInterval|null[0]
    constructor <init>(kotlin/Long) // io.kotest.framework.concurrency/FixedInterval.<init>|<init>(kotlin.Long){}[0]
    final fun next(kotlin/Int): kotlin/Long // io.kotest.framework.concurrency/FixedInterval.next|next(kotlin.Int){}[0]
    final fun toString(): kotlin/String // io.kotest.framework.concurrency/FixedInterval.toString|toString(){}[0]
}
final fun (kotlin.time/Duration).io.kotest.framework.concurrency/exponential(kotlin/Double =..., kotlin.time/Duration? =...): io.kotest.framework.concurrency/ExponentialInterval // io.kotest.framework.concurrency/exponential|exponential@kotlin.time.Duration(kotlin.Double;kotlin.time.Duration?){}[0]
final fun (kotlin.time/Duration).io.kotest.framework.concurrency/fibonacci(kotlin.time/Duration? =...): io.kotest.framework.concurrency/FibonacciInterval // io.kotest.framework.concurrency/fibonacci|fibonacci@kotlin.time.Duration(kotlin.time.Duration?){}[0]
final fun (kotlin.time/Duration).io.kotest.framework.concurrency/fixed(): io.kotest.framework.concurrency/FixedInterval // io.kotest.framework.concurrency/fixed|fixed@kotlin.time.Duration(){}[0]
final fun (kotlin/Long).io.kotest.framework.concurrency/exponential(kotlin/Double =..., kotlin/Long? =...): io.kotest.framework.concurrency/ExponentialInterval // io.kotest.framework.concurrency/exponential|exponential@kotlin.Long(kotlin.Double;kotlin.Long?){}[0]
final fun (kotlin/Long).io.kotest.framework.concurrency/fibonacci(kotlin/Long? =...): io.kotest.framework.concurrency/FibonacciInterval // io.kotest.framework.concurrency/fibonacci|fibonacci@kotlin.Long(kotlin.Long?){}[0]
final fun (kotlin/Long).io.kotest.framework.concurrency/fixed(): io.kotest.framework.concurrency/FixedInterval // io.kotest.framework.concurrency/fixed|fixed@kotlin.Long(){}[0]
final fun io.kotest.framework.concurrency/fibonacci(kotlin/Int): kotlin/Int // io.kotest.framework.concurrency/fibonacci|fibonacci(kotlin.Int){}[0]
final suspend fun <#A: kotlin/Any?> (io.kotest.framework.concurrency/EventuallyConfig<#A>).io.kotest.framework.concurrency/invoke(kotlin.coroutines/SuspendFunction0<#A>): #A // io.kotest.framework.concurrency/invoke|invoke@io.kotest.framework.concurrency.EventuallyConfig<0:0>(kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> io.kotest.framework.concurrency/continually(io.kotest.framework.concurrency/ContinuallyConfig<#A>, kotlin/Function1<io.kotest.framework.concurrency/ContinuallyBuilder<#A>, kotlin/Unit>, kotlin.coroutines/SuspendFunction0<#A>): #A? // io.kotest.framework.concurrency/continually|continually(io.kotest.framework.concurrency.ContinuallyConfig<0:0>;kotlin.Function1<io.kotest.framework.concurrency.ContinuallyBuilder<0:0>,kotlin.Unit>;kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> io.kotest.framework.concurrency/continually(kotlin.time/Duration, kotlin.coroutines/SuspendFunction0<#A>): #A? // io.kotest.framework.concurrency/continually|continually(kotlin.time.Duration;kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> io.kotest.framework.concurrency/continually(kotlin/Function1<io.kotest.framework.concurrency/ContinuallyBuilder<#A>, kotlin/Unit>, kotlin.coroutines/SuspendFunction0<#A>): #A? // io.kotest.framework.concurrency/continually|continually(kotlin.Function1<io.kotest.framework.concurrency.ContinuallyBuilder<0:0>,kotlin.Unit>;kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> io.kotest.framework.concurrency/continually(kotlin/Long, kotlin.coroutines/SuspendFunction0<#A>): #A? // io.kotest.framework.concurrency/continually|continually(kotlin.Long;kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> io.kotest.framework.concurrency/eventually(io.kotest.framework.concurrency/EventuallyConfig<#A>, kotlin.coroutines/SuspendFunction0<#A>): #A // io.kotest.framework.concurrency/eventually|eventually(io.kotest.framework.concurrency.EventuallyConfig<0:0>;kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> io.kotest.framework.concurrency/eventually(io.kotest.framework.concurrency/EventuallyConfig<#A>, kotlin/Function1<io.kotest.framework.concurrency/EventuallyBuilder<#A>, kotlin/Unit>, kotlin.coroutines/SuspendFunction0<#A>): #A // io.kotest.framework.concurrency/eventually|eventually(io.kotest.framework.concurrency.EventuallyConfig<0:0>;kotlin.Function1<io.kotest.framework.concurrency.EventuallyBuilder<0:0>,kotlin.Unit>;kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> io.kotest.framework.concurrency/eventually(kotlin.time/Duration, kotlin.coroutines/SuspendFunction0<#A>): #A // io.kotest.framework.concurrency/eventually|eventually(kotlin.time.Duration;kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> io.kotest.framework.concurrency/eventually(kotlin/Function1<io.kotest.framework.concurrency/EventuallyBuilder<#A>, kotlin/Unit>, kotlin.coroutines/SuspendFunction0<#A>): #A // io.kotest.framework.concurrency/eventually|eventually(kotlin.Function1<io.kotest.framework.concurrency.EventuallyBuilder<0:0>,kotlin.Unit>;kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> io.kotest.framework.concurrency/eventually(kotlin/Long, kotlin.coroutines/SuspendFunction0<#A>): #A // io.kotest.framework.concurrency/eventually|eventually(kotlin.Long;kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>}[0]
final suspend fun io.kotest.framework.concurrency/until(io.kotest.framework.concurrency/EventuallyConfig<kotlin/Boolean>, kotlin/Function1<io.kotest.framework.concurrency/EventuallyBuilder<kotlin/Boolean>, kotlin/Unit>, kotlin.coroutines/SuspendFunction0<kotlin/Boolean>) // io.kotest.framework.concurrency/until|until(io.kotest.framework.concurrency.EventuallyConfig<kotlin.Boolean>;kotlin.Function1<io.kotest.framework.concurrency.EventuallyBuilder<kotlin.Boolean>,kotlin.Unit>;kotlin.coroutines.SuspendFunction0<kotlin.Boolean>){}[0]
final suspend fun io.kotest.framework.concurrency/until(kotlin.time/Duration, kotlin.coroutines/SuspendFunction0<kotlin/Boolean>) // io.kotest.framework.concurrency/until|until(kotlin.time.Duration;kotlin.coroutines.SuspendFunction0<kotlin.Boolean>){}[0]
final suspend fun io.kotest.framework.concurrency/until(kotlin/Function1<io.kotest.framework.concurrency/EventuallyBuilder<kotlin/Boolean>, kotlin/Unit>, kotlin.coroutines/SuspendFunction0<kotlin/Boolean>) // io.kotest.framework.concurrency/until|until(kotlin.Function1<io.kotest.framework.concurrency.EventuallyBuilder<kotlin.Boolean>,kotlin.Unit>;kotlin.coroutines.SuspendFunction0<kotlin.Boolean>){}[0]
final suspend fun io.kotest.framework.concurrency/until(kotlin/Long, kotlin.coroutines/SuspendFunction0<kotlin/Boolean>) // io.kotest.framework.concurrency/until|until(kotlin.Long;kotlin.coroutines.SuspendFunction0<kotlin.Boolean>){}[0]
