// Klib ABI Dump
// Targets: [androidNativeArm32, androidNativeArm64, androidNativeX64, androidNativeX86, iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.kotest:kotest-framework-engine>
abstract class io.kotest.engine.listener/AbstractTestEngineListener : io.kotest.engine.listener/TestEngineListener { // io.kotest.engine.listener/AbstractTestEngineListener|null[0]
    constructor <init>() // io.kotest.engine.listener/AbstractTestEngineListener.<init>|<init>(){}[0]
    open suspend fun engineFinished(kotlin.collections/List<kotlin/Throwable>) // io.kotest.engine.listener/AbstractTestEngineListener.engineFinished|engineFinished(kotlin.collections.List<kotlin.Throwable>){}[0]
    open suspend fun engineInitialized(io.kotest.engine.interceptors/EngineContext) // io.kotest.engine.listener/AbstractTestEngineListener.engineInitialized|engineInitialized(io.kotest.engine.interceptors.EngineContext){}[0]
    open suspend fun engineStarted() // io.kotest.engine.listener/AbstractTestEngineListener.engineStarted|engineStarted(){}[0]
    open suspend fun specFinished(kotlin.reflect/KClass<*>, io.kotest.core.test/TestResult) // io.kotest.engine.listener/AbstractTestEngineListener.specFinished|specFinished(kotlin.reflect.KClass<*>;io.kotest.core.test.TestResult){}[0]
    open suspend fun specIgnored(kotlin.reflect/KClass<*>, kotlin/String?) // io.kotest.engine.listener/AbstractTestEngineListener.specIgnored|specIgnored(kotlin.reflect.KClass<*>;kotlin.String?){}[0]
    open suspend fun specStarted(kotlin.reflect/KClass<*>) // io.kotest.engine.listener/AbstractTestEngineListener.specStarted|specStarted(kotlin.reflect.KClass<*>){}[0]
    open suspend fun testFinished(io.kotest.core.test/TestCase, io.kotest.core.test/TestResult) // io.kotest.engine.listener/AbstractTestEngineListener.testFinished|testFinished(io.kotest.core.test.TestCase;io.kotest.core.test.TestResult){}[0]
    open suspend fun testIgnored(io.kotest.core.test/TestCase, kotlin/String?) // io.kotest.engine.listener/AbstractTestEngineListener.testIgnored|testIgnored(io.kotest.core.test.TestCase;kotlin.String?){}[0]
    open suspend fun testStarted(io.kotest.core.test/TestCase) // io.kotest.engine.listener/AbstractTestEngineListener.testStarted|testStarted(io.kotest.core.test.TestCase){}[0]
}
abstract class io.kotest.engine.test/AbstractTestCaseExecutionListener : io.kotest.engine.test/TestCaseExecutionListener { // io.kotest.engine.test/AbstractTestCaseExecutionListener|null[0]
    constructor <init>() // io.kotest.engine.test/AbstractTestCaseExecutionListener.<init>|<init>(){}[0]
    open suspend fun testFinished(io.kotest.core.test/TestCase, io.kotest.core.test/TestResult) // io.kotest.engine.test/AbstractTestCaseExecutionListener.testFinished|testFinished(io.kotest.core.test.TestCase;io.kotest.core.test.TestResult){}[0]
    open suspend fun testIgnored(io.kotest.core.test/TestCase, kotlin/String?) // io.kotest.engine.test/AbstractTestCaseExecutionListener.testIgnored|testIgnored(io.kotest.core.test.TestCase;kotlin.String?){}[0]
    open suspend fun testStarted(io.kotest.core.test/TestCase) // io.kotest.engine.test/AbstractTestCaseExecutionListener.testStarted|testStarted(io.kotest.core.test.TestCase){}[0]
}
abstract interface io.kotest.engine.interceptors/EngineInterceptor { // io.kotest.engine.interceptors/EngineInterceptor|null[0]
    abstract suspend fun intercept(io.kotest.engine.interceptors/EngineContext, kotlin.coroutines/SuspendFunction1<io.kotest.engine.interceptors/EngineContext, io.kotest.engine/EngineResult>): io.kotest.engine/EngineResult // io.kotest.engine.interceptors/EngineInterceptor.intercept|intercept(io.kotest.engine.interceptors.EngineContext;kotlin.coroutines.SuspendFunction1<io.kotest.engine.interceptors.EngineContext,io.kotest.engine.EngineResult>){}[0]
}
abstract interface io.kotest.engine.listener/TestEngineListener { // io.kotest.engine.listener/TestEngineListener|null[0]
    abstract suspend fun engineFinished(kotlin.collections/List<kotlin/Throwable>) // io.kotest.engine.listener/TestEngineListener.engineFinished|engineFinished(kotlin.collections.List<kotlin.Throwable>){}[0]
    abstract suspend fun engineInitialized(io.kotest.engine.interceptors/EngineContext) // io.kotest.engine.listener/TestEngineListener.engineInitialized|engineInitialized(io.kotest.engine.interceptors.EngineContext){}[0]
    abstract suspend fun engineStarted() // io.kotest.engine.listener/TestEngineListener.engineStarted|engineStarted(){}[0]
    abstract suspend fun specFinished(kotlin.reflect/KClass<*>, io.kotest.core.test/TestResult) // io.kotest.engine.listener/TestEngineListener.specFinished|specFinished(kotlin.reflect.KClass<*>;io.kotest.core.test.TestResult){}[0]
    abstract suspend fun specIgnored(kotlin.reflect/KClass<*>, kotlin/String?) // io.kotest.engine.listener/TestEngineListener.specIgnored|specIgnored(kotlin.reflect.KClass<*>;kotlin.String?){}[0]
    abstract suspend fun specStarted(kotlin.reflect/KClass<*>) // io.kotest.engine.listener/TestEngineListener.specStarted|specStarted(kotlin.reflect.KClass<*>){}[0]
    abstract suspend fun testFinished(io.kotest.core.test/TestCase, io.kotest.core.test/TestResult) // io.kotest.engine.listener/TestEngineListener.testFinished|testFinished(io.kotest.core.test.TestCase;io.kotest.core.test.TestResult){}[0]
    abstract suspend fun testIgnored(io.kotest.core.test/TestCase, kotlin/String?) // io.kotest.engine.listener/TestEngineListener.testIgnored|testIgnored(io.kotest.core.test.TestCase;kotlin.String?){}[0]
    abstract suspend fun testStarted(io.kotest.core.test/TestCase) // io.kotest.engine.listener/TestEngineListener.testStarted|testStarted(io.kotest.core.test.TestCase){}[0]
}
abstract interface io.kotest.engine.spec/SpecSorter { // io.kotest.engine.spec/SpecSorter|null[0]
    abstract fun compare(kotlin.reflect/KClass<out io.kotest.core.spec/Spec>, kotlin.reflect/KClass<out io.kotest.core.spec/Spec>): kotlin/Int // io.kotest.engine.spec/SpecSorter.compare|compare(kotlin.reflect.KClass<out|io.kotest.core.spec.Spec>;kotlin.reflect.KClass<out|io.kotest.core.spec.Spec>){}[0]
    open fun sort(kotlin.collections/List<io.kotest.core.spec/SpecRef>): kotlin.collections/List<io.kotest.core.spec/SpecRef> // io.kotest.engine.spec/SpecSorter.sort|sort(kotlin.collections.List<io.kotest.core.spec.SpecRef>){}[0]
}
abstract interface io.kotest.engine.test.logging/LogExtension : io.kotest.core.extensions/Extension { // io.kotest.engine.test.logging/LogExtension|null[0]
    abstract suspend fun handleLogs(io.kotest.core.test/TestCase, kotlin.collections/List<io.kotest.engine.test.logging/LogEntry>) // io.kotest.engine.test.logging/LogExtension.handleLogs|handleLogs(io.kotest.core.test.TestCase;kotlin.collections.List<io.kotest.engine.test.logging.LogEntry>){}[0]
}
abstract interface io.kotest.engine.test.scopes/Registration { // io.kotest.engine.test.scopes/Registration|null[0]
    abstract suspend fun runNestedTestCase(io.kotest.core.test/NestedTest): io.kotest.core.test/TestResult? // io.kotest.engine.test.scopes/Registration.runNestedTestCase|runNestedTestCase(io.kotest.core.test.NestedTest){}[0]
}
abstract interface io.kotest.engine.test/TestCaseExecutionListener { // io.kotest.engine.test/TestCaseExecutionListener|null[0]
    abstract suspend fun testFinished(io.kotest.core.test/TestCase, io.kotest.core.test/TestResult) // io.kotest.engine.test/TestCaseExecutionListener.testFinished|testFinished(io.kotest.core.test.TestCase;io.kotest.core.test.TestResult){}[0]
    abstract suspend fun testIgnored(io.kotest.core.test/TestCase, kotlin/String?) // io.kotest.engine.test/TestCaseExecutionListener.testIgnored|testIgnored(io.kotest.core.test.TestCase;kotlin.String?){}[0]
    abstract suspend fun testStarted(io.kotest.core.test/TestCase) // io.kotest.engine.test/TestCaseExecutionListener.testStarted|testStarted(io.kotest.core.test.TestCase){}[0]
}
final class io.kotest.engine.config/ConfigurationException : kotlin/Exception { // io.kotest.engine.config/ConfigurationException|null[0]
    constructor <init>(kotlin/Throwable) // io.kotest.engine.config/ConfigurationException.<init>|<init>(kotlin.Throwable){}[0]
}
final class io.kotest.engine.extensions/MultipleExceptions : kotlin/Exception { // io.kotest.engine.extensions/MultipleExceptions|null[0]
    constructor <init>(kotlin.collections/List<kotlin/Throwable>) // io.kotest.engine.extensions/MultipleExceptions.<init>|<init>(kotlin.collections.List<kotlin.Throwable>){}[0]
    final val causes // io.kotest.engine.extensions/MultipleExceptions.causes|{}causes[0]
        final fun <get-causes>(): kotlin.collections/List<kotlin/Throwable> // io.kotest.engine.extensions/MultipleExceptions.causes.<get-causes>|<get-causes>(){}[0]
}
final class io.kotest.engine.extensions/SpecifiedTagsTagExtension : io.kotest.core.extensions/TagExtension { // io.kotest.engine.extensions/SpecifiedTagsTagExtension|null[0]
    constructor <init>(io.kotest.core/TagExpression) // io.kotest.engine.extensions/SpecifiedTagsTagExtension.<init>|<init>(io.kotest.core.TagExpression){}[0]
    final fun tags(): io.kotest.core/TagExpression // io.kotest.engine.extensions/SpecifiedTagsTagExtension.tags|tags(){}[0]
}
final class io.kotest.engine.interceptors/EngineContext { // io.kotest.engine.interceptors/EngineContext|null[0]
    constructor <init>(io.kotest.core.config/ProjectConfiguration, io.kotest.common/Platform) // io.kotest.engine.interceptors/EngineContext.<init>|<init>(io.kotest.core.config.ProjectConfiguration;io.kotest.common.Platform){}[0]
    constructor <init>(io.kotest.core.project/TestSuite, io.kotest.engine.listener/TestEngineListener, io.kotest.core/TagExpression, io.kotest.core.config/ProjectConfiguration, io.kotest.common/Platform, kotlin.collections/MutableMap<kotlin/String, kotlin/Any>) // io.kotest.engine.interceptors/EngineContext.<init>|<init>(io.kotest.core.project.TestSuite;io.kotest.engine.listener.TestEngineListener;io.kotest.core.TagExpression;io.kotest.core.config.ProjectConfiguration;io.kotest.common.Platform;kotlin.collections.MutableMap<kotlin.String,kotlin.Any>){}[0]
    final fun component1(): io.kotest.core.project/TestSuite // io.kotest.engine.interceptors/EngineContext.component1|component1(){}[0]
    final fun component2(): io.kotest.engine.listener/TestEngineListener // io.kotest.engine.interceptors/EngineContext.component2|component2(){}[0]
    final fun component3(): io.kotest.core/TagExpression // io.kotest.engine.interceptors/EngineContext.component3|component3(){}[0]
    final fun component4(): io.kotest.core.config/ProjectConfiguration // io.kotest.engine.interceptors/EngineContext.component4|component4(){}[0]
    final fun component5(): io.kotest.common/Platform // io.kotest.engine.interceptors/EngineContext.component5|component5(){}[0]
    final fun component6(): kotlin.collections/MutableMap<kotlin/String, kotlin/Any> // io.kotest.engine.interceptors/EngineContext.component6|component6(){}[0]
    final fun copy(io.kotest.core.project/TestSuite =..., io.kotest.engine.listener/TestEngineListener =..., io.kotest.core/TagExpression =..., io.kotest.core.config/ProjectConfiguration =..., io.kotest.common/Platform =..., kotlin.collections/MutableMap<kotlin/String, kotlin/Any> =...): io.kotest.engine.interceptors/EngineContext // io.kotest.engine.interceptors/EngineContext.copy|copy(io.kotest.core.project.TestSuite;io.kotest.engine.listener.TestEngineListener;io.kotest.core.TagExpression;io.kotest.core.config.ProjectConfiguration;io.kotest.common.Platform;kotlin.collections.MutableMap<kotlin.String,kotlin.Any>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.engine.interceptors/EngineContext.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.kotest.engine.interceptors/EngineContext.hashCode|hashCode(){}[0]
    final fun mergeListener(io.kotest.engine.listener/TestEngineListener): io.kotest.engine.interceptors/EngineContext // io.kotest.engine.interceptors/EngineContext.mergeListener|mergeListener(io.kotest.engine.listener.TestEngineListener){}[0]
    final fun toString(): kotlin/String // io.kotest.engine.interceptors/EngineContext.toString|toString(){}[0]
    final fun withConfiguration(io.kotest.core.config/ProjectConfiguration): io.kotest.engine.interceptors/EngineContext // io.kotest.engine.interceptors/EngineContext.withConfiguration|withConfiguration(io.kotest.core.config.ProjectConfiguration){}[0]
    final fun withListener(io.kotest.engine.listener/TestEngineListener): io.kotest.engine.interceptors/EngineContext // io.kotest.engine.interceptors/EngineContext.withListener|withListener(io.kotest.engine.listener.TestEngineListener){}[0]
    final fun withTags(io.kotest.core/TagExpression): io.kotest.engine.interceptors/EngineContext // io.kotest.engine.interceptors/EngineContext.withTags|withTags(io.kotest.core.TagExpression){}[0]
    final fun withTestSuite(io.kotest.core.project/TestSuite): io.kotest.engine.interceptors/EngineContext // io.kotest.engine.interceptors/EngineContext.withTestSuite|withTestSuite(io.kotest.core.project.TestSuite){}[0]
    final object Companion { // io.kotest.engine.interceptors/EngineContext.Companion|null[0]
        final val empty // io.kotest.engine.interceptors/EngineContext.Companion.empty|{}empty[0]
            final fun <get-empty>(): io.kotest.engine.interceptors/EngineContext // io.kotest.engine.interceptors/EngineContext.Companion.empty.<get-empty>|<get-empty>(){}[0]
    }
    final val configuration // io.kotest.engine.interceptors/EngineContext.configuration|{}configuration[0]
        final fun <get-configuration>(): io.kotest.core.config/ProjectConfiguration // io.kotest.engine.interceptors/EngineContext.configuration.<get-configuration>|<get-configuration>(){}[0]
    final val listener // io.kotest.engine.interceptors/EngineContext.listener|{}listener[0]
        final fun <get-listener>(): io.kotest.engine.listener/TestEngineListener // io.kotest.engine.interceptors/EngineContext.listener.<get-listener>|<get-listener>(){}[0]
    final val platform // io.kotest.engine.interceptors/EngineContext.platform|{}platform[0]
        final fun <get-platform>(): io.kotest.common/Platform // io.kotest.engine.interceptors/EngineContext.platform.<get-platform>|<get-platform>(){}[0]
    final val state // io.kotest.engine.interceptors/EngineContext.state|{}state[0]
        final fun <get-state>(): kotlin.collections/MutableMap<kotlin/String, kotlin/Any> // io.kotest.engine.interceptors/EngineContext.state.<get-state>|<get-state>(){}[0]
    final val suite // io.kotest.engine.interceptors/EngineContext.suite|{}suite[0]
        final fun <get-suite>(): io.kotest.core.project/TestSuite // io.kotest.engine.interceptors/EngineContext.suite.<get-suite>|<get-suite>(){}[0]
    final val tags // io.kotest.engine.interceptors/EngineContext.tags|{}tags[0]
        final fun <get-tags>(): io.kotest.core/TagExpression // io.kotest.engine.interceptors/EngineContext.tags.<get-tags>|<get-tags>(){}[0]
}
final class io.kotest.engine.interceptors/ProjectTimeoutException : kotlin/Exception { // io.kotest.engine.interceptors/ProjectTimeoutException|null[0]
    constructor <init>(kotlin.time/Duration) // io.kotest.engine.interceptors/ProjectTimeoutException.<init>|<init>(kotlin.time.Duration){}[0]
    final val timeout // io.kotest.engine.interceptors/ProjectTimeoutException.timeout|{}timeout[0]
        final fun <get-timeout>(): kotlin.time/Duration // io.kotest.engine.interceptors/ProjectTimeoutException.timeout.<get-timeout>|<get-timeout>(){}[0]
}
final class io.kotest.engine.listener/CollectingTestEngineListener : io.kotest.engine.listener/AbstractTestEngineListener, kotlinx.coroutines.sync/Mutex { // io.kotest.engine.listener/CollectingTestEngineListener|null[0]
    constructor <init>() // io.kotest.engine.listener/CollectingTestEngineListener.<init>|<init>(){}[0]
    final class TestCaseKey { // io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey|null[0]
        constructor <init>(io.kotest.core.descriptors/Descriptor.TestDescriptor, io.kotest.core.names/TestName, kotlin.reflect/KClass<out io.kotest.core.spec/Spec>) // io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey.<init>|<init>(io.kotest.core.descriptors.Descriptor.TestDescriptor;io.kotest.core.names.TestName;kotlin.reflect.KClass<out|io.kotest.core.spec.Spec>){}[0]
        final fun component1(): io.kotest.core.descriptors/Descriptor.TestDescriptor // io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey.component1|component1(){}[0]
        final fun component2(): io.kotest.core.names/TestName // io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey.component2|component2(){}[0]
        final fun component3(): kotlin.reflect/KClass<out io.kotest.core.spec/Spec> // io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey.component3|component3(){}[0]
        final fun copy(io.kotest.core.descriptors/Descriptor.TestDescriptor =..., io.kotest.core.names/TestName =..., kotlin.reflect/KClass<out io.kotest.core.spec/Spec> =...): io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey // io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey.copy|copy(io.kotest.core.descriptors.Descriptor.TestDescriptor;io.kotest.core.names.TestName;kotlin.reflect.KClass<out|io.kotest.core.spec.Spec>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey.toString|toString(){}[0]
        final val descriptor // io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey.descriptor|<get-descriptor>(){}[0]
            final fun <get-descriptor>(): io.kotest.core.descriptors/Descriptor.TestDescriptor // io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
        final val name // io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey.name|<get-name>(){}[0]
            final fun <get-name>(): io.kotest.core.names/TestName // io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey.name.<get-name>|<get-name>(){}[0]
        final val specClass // io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey.specClass|{}specClass[0]
            final fun <get-specClass>(): kotlin.reflect/KClass<out io.kotest.core.spec/Spec> // io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey.specClass.<get-specClass>|<get-specClass>(){}[0]
    }
    final fun (io.kotest.core.test/TestCase).toKey(): io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey // io.kotest.engine.listener/CollectingTestEngineListener.toKey|toKey@io.kotest.core.test.TestCase(){}[0]
    final fun holdsLock(kotlin/Any): kotlin/Boolean // io.kotest.engine.listener/CollectingTestEngineListener.holdsLock|holdsLock(kotlin.Any){}[0]
    final fun result(io.kotest.core.descriptors/Descriptor.TestDescriptor): io.kotest.core.test/TestResult? // io.kotest.engine.listener/CollectingTestEngineListener.result|result(io.kotest.core.descriptors.Descriptor.TestDescriptor){}[0]
    final fun result(kotlin/String): io.kotest.core.test/TestResult? // io.kotest.engine.listener/CollectingTestEngineListener.result|result(kotlin.String){}[0]
    final fun tryLock(kotlin/Any?): kotlin/Boolean // io.kotest.engine.listener/CollectingTestEngineListener.tryLock|tryLock(kotlin.Any?){}[0]
    final fun unlock(kotlin/Any?) // io.kotest.engine.listener/CollectingTestEngineListener.unlock|unlock(kotlin.Any?){}[0]
    final suspend fun engineFinished(kotlin.collections/List<kotlin/Throwable>) // io.kotest.engine.listener/CollectingTestEngineListener.engineFinished|engineFinished(kotlin.collections.List<kotlin.Throwable>){}[0]
    final suspend fun lock(kotlin/Any?) // io.kotest.engine.listener/CollectingTestEngineListener.lock|lock(kotlin.Any?){}[0]
    final suspend fun specFinished(kotlin.reflect/KClass<*>, io.kotest.core.test/TestResult) // io.kotest.engine.listener/CollectingTestEngineListener.specFinished|specFinished(kotlin.reflect.KClass<*>;io.kotest.core.test.TestResult){}[0]
    final suspend fun specIgnored(kotlin.reflect/KClass<*>, kotlin/String?) // io.kotest.engine.listener/CollectingTestEngineListener.specIgnored|specIgnored(kotlin.reflect.KClass<*>;kotlin.String?){}[0]
    final suspend fun testFinished(io.kotest.core.test/TestCase, io.kotest.core.test/TestResult) // io.kotest.engine.listener/CollectingTestEngineListener.testFinished|testFinished(io.kotest.core.test.TestCase;io.kotest.core.test.TestResult){}[0]
    final suspend fun testIgnored(io.kotest.core.test/TestCase, kotlin/String?) // io.kotest.engine.listener/CollectingTestEngineListener.testIgnored|testIgnored(io.kotest.core.test.TestCase;kotlin.String?){}[0]
    final val isLocked // io.kotest.engine.listener/CollectingTestEngineListener.isLocked|{}isLocked[0]
        final fun <get-isLocked>(): kotlin/Boolean // io.kotest.engine.listener/CollectingTestEngineListener.isLocked.<get-isLocked>|<get-isLocked>(){}[0]
    final val names // io.kotest.engine.listener/CollectingTestEngineListener.names|{}names[0]
        final fun <get-names>(): kotlin.collections/MutableList<kotlin/String> // io.kotest.engine.listener/CollectingTestEngineListener.names.<get-names>|<get-names>(){}[0]
    final val onLock // io.kotest.engine.listener/CollectingTestEngineListener.onLock|{}onLock[0]
        final fun <get-onLock>(): kotlinx.coroutines.selects/SelectClause2<kotlin/Any?, kotlinx.coroutines.sync/Mutex> // io.kotest.engine.listener/CollectingTestEngineListener.onLock.<get-onLock>|<get-onLock>(){}[0]
    final val specs // io.kotest.engine.listener/CollectingTestEngineListener.specs|{}specs[0]
        final fun <get-specs>(): kotlin.collections/MutableMap<kotlin.reflect/KClass<*>, io.kotest.core.test/TestResult> // io.kotest.engine.listener/CollectingTestEngineListener.specs.<get-specs>|<get-specs>(){}[0]
    final val tests // io.kotest.engine.listener/CollectingTestEngineListener.tests|{}tests[0]
        final fun <get-tests>(): kotlin.collections/MutableMap<io.kotest.engine.listener/CollectingTestEngineListener.TestCaseKey, io.kotest.core.test/TestResult> // io.kotest.engine.listener/CollectingTestEngineListener.tests.<get-tests>|<get-tests>(){}[0]
    final var errors // io.kotest.engine.listener/CollectingTestEngineListener.errors|{}errors[0]
        final fun <get-errors>(): kotlin/Boolean // io.kotest.engine.listener/CollectingTestEngineListener.errors.<get-errors>|<get-errors>(){}[0]
        final fun <set-errors>(kotlin/Boolean) // io.kotest.engine.listener/CollectingTestEngineListener.errors.<set-errors>|<set-errors>(kotlin.Boolean){}[0]
}
final class io.kotest.engine.listener/CompositeTestEngineListener : io.kotest.engine.listener/TestEngineListener { // io.kotest.engine.listener/CompositeTestEngineListener|null[0]
    constructor <init>(kotlin.collections/List<io.kotest.engine.listener/TestEngineListener>) // io.kotest.engine.listener/CompositeTestEngineListener.<init>|<init>(kotlin.collections.List<io.kotest.engine.listener.TestEngineListener>){}[0]
    final suspend fun engineFinished(kotlin.collections/List<kotlin/Throwable>) // io.kotest.engine.listener/CompositeTestEngineListener.engineFinished|engineFinished(kotlin.collections.List<kotlin.Throwable>){}[0]
    final suspend fun engineInitialized(io.kotest.engine.interceptors/EngineContext) // io.kotest.engine.listener/CompositeTestEngineListener.engineInitialized|engineInitialized(io.kotest.engine.interceptors.EngineContext){}[0]
    final suspend fun engineStarted() // io.kotest.engine.listener/CompositeTestEngineListener.engineStarted|engineStarted(){}[0]
    final suspend fun specFinished(kotlin.reflect/KClass<*>, io.kotest.core.test/TestResult) // io.kotest.engine.listener/CompositeTestEngineListener.specFinished|specFinished(kotlin.reflect.KClass<*>;io.kotest.core.test.TestResult){}[0]
    final suspend fun specIgnored(kotlin.reflect/KClass<*>, kotlin/String?) // io.kotest.engine.listener/CompositeTestEngineListener.specIgnored|specIgnored(kotlin.reflect.KClass<*>;kotlin.String?){}[0]
    final suspend fun specStarted(kotlin.reflect/KClass<*>) // io.kotest.engine.listener/CompositeTestEngineListener.specStarted|specStarted(kotlin.reflect.KClass<*>){}[0]
    final suspend fun testFinished(io.kotest.core.test/TestCase, io.kotest.core.test/TestResult) // io.kotest.engine.listener/CompositeTestEngineListener.testFinished|testFinished(io.kotest.core.test.TestCase;io.kotest.core.test.TestResult){}[0]
    final suspend fun testIgnored(io.kotest.core.test/TestCase, kotlin/String?) // io.kotest.engine.listener/CompositeTestEngineListener.testIgnored|testIgnored(io.kotest.core.test.TestCase;kotlin.String?){}[0]
    final suspend fun testStarted(io.kotest.core.test/TestCase) // io.kotest.engine.listener/CompositeTestEngineListener.testStarted|testStarted(io.kotest.core.test.TestCase){}[0]
}
final class io.kotest.engine.listener/PinnedSpecTestEngineListener : io.kotest.engine.listener/TestEngineListener { // io.kotest.engine.listener/PinnedSpecTestEngineListener|null[0]
    constructor <init>(io.kotest.engine.listener/TestEngineListener) // io.kotest.engine.listener/PinnedSpecTestEngineListener.<init>|<init>(io.kotest.engine.listener.TestEngineListener){}[0]
    final suspend fun engineFinished(kotlin.collections/List<kotlin/Throwable>) // io.kotest.engine.listener/PinnedSpecTestEngineListener.engineFinished|engineFinished(kotlin.collections.List<kotlin.Throwable>){}[0]
    final suspend fun engineInitialized(io.kotest.engine.interceptors/EngineContext) // io.kotest.engine.listener/PinnedSpecTestEngineListener.engineInitialized|engineInitialized(io.kotest.engine.interceptors.EngineContext){}[0]
    final suspend fun engineStarted() // io.kotest.engine.listener/PinnedSpecTestEngineListener.engineStarted|engineStarted(){}[0]
    final suspend fun specFinished(kotlin.reflect/KClass<*>, io.kotest.core.test/TestResult) // io.kotest.engine.listener/PinnedSpecTestEngineListener.specFinished|specFinished(kotlin.reflect.KClass<*>;io.kotest.core.test.TestResult){}[0]
    final suspend fun specIgnored(kotlin.reflect/KClass<*>, kotlin/String?) // io.kotest.engine.listener/PinnedSpecTestEngineListener.specIgnored|specIgnored(kotlin.reflect.KClass<*>;kotlin.String?){}[0]
    final suspend fun specStarted(kotlin.reflect/KClass<*>) // io.kotest.engine.listener/PinnedSpecTestEngineListener.specStarted|specStarted(kotlin.reflect.KClass<*>){}[0]
    final suspend fun testFinished(io.kotest.core.test/TestCase, io.kotest.core.test/TestResult) // io.kotest.engine.listener/PinnedSpecTestEngineListener.testFinished|testFinished(io.kotest.core.test.TestCase;io.kotest.core.test.TestResult){}[0]
    final suspend fun testIgnored(io.kotest.core.test/TestCase, kotlin/String?) // io.kotest.engine.listener/PinnedSpecTestEngineListener.testIgnored|testIgnored(io.kotest.core.test.TestCase;kotlin.String?){}[0]
    final suspend fun testStarted(io.kotest.core.test/TestCase) // io.kotest.engine.listener/PinnedSpecTestEngineListener.testStarted|testStarted(io.kotest.core.test.TestCase){}[0]
    final val listener // io.kotest.engine.listener/PinnedSpecTestEngineListener.listener|{}listener[0]
        final fun <get-listener>(): io.kotest.engine.listener/TestEngineListener // io.kotest.engine.listener/PinnedSpecTestEngineListener.listener.<get-listener>|<get-listener>(){}[0]
}
final class io.kotest.engine.listener/TeamCityTestEngineListener : io.kotest.engine.listener/TestEngineListener { // io.kotest.engine.listener/TeamCityTestEngineListener|null[0]
    constructor <init>(kotlin/String =..., kotlin/Boolean =...) // io.kotest.engine.listener/TeamCityTestEngineListener.<init>|<init>(kotlin.String;kotlin.Boolean){}[0]
    final suspend fun engineFinished(kotlin.collections/List<kotlin/Throwable>) // io.kotest.engine.listener/TeamCityTestEngineListener.engineFinished|engineFinished(kotlin.collections.List<kotlin.Throwable>){}[0]
    final suspend fun engineInitialized(io.kotest.engine.interceptors/EngineContext) // io.kotest.engine.listener/TeamCityTestEngineListener.engineInitialized|engineInitialized(io.kotest.engine.interceptors.EngineContext){}[0]
    final suspend fun engineStarted() // io.kotest.engine.listener/TeamCityTestEngineListener.engineStarted|engineStarted(){}[0]
    final suspend fun specFinished(kotlin.reflect/KClass<*>, io.kotest.core.test/TestResult) // io.kotest.engine.listener/TeamCityTestEngineListener.specFinished|specFinished(kotlin.reflect.KClass<*>;io.kotest.core.test.TestResult){}[0]
    final suspend fun specIgnored(kotlin.reflect/KClass<*>, kotlin/String?) // io.kotest.engine.listener/TeamCityTestEngineListener.specIgnored|specIgnored(kotlin.reflect.KClass<*>;kotlin.String?){}[0]
    final suspend fun specStarted(kotlin.reflect/KClass<*>) // io.kotest.engine.listener/TeamCityTestEngineListener.specStarted|specStarted(kotlin.reflect.KClass<*>){}[0]
    final suspend fun testFinished(io.kotest.core.test/TestCase, io.kotest.core.test/TestResult) // io.kotest.engine.listener/TeamCityTestEngineListener.testFinished|testFinished(io.kotest.core.test.TestCase;io.kotest.core.test.TestResult){}[0]
    final suspend fun testIgnored(io.kotest.core.test/TestCase, kotlin/String?) // io.kotest.engine.listener/TeamCityTestEngineListener.testIgnored|testIgnored(io.kotest.core.test.TestCase;kotlin.String?){}[0]
    final suspend fun testStarted(io.kotest.core.test/TestCase) // io.kotest.engine.listener/TeamCityTestEngineListener.testStarted|testStarted(io.kotest.core.test.TestCase){}[0]
}
final class io.kotest.engine.listener/ThreadSafeTestEngineListener : io.kotest.engine.listener/TestEngineListener { // io.kotest.engine.listener/ThreadSafeTestEngineListener|null[0]
    constructor <init>(io.kotest.engine.listener/TestEngineListener) // io.kotest.engine.listener/ThreadSafeTestEngineListener.<init>|<init>(io.kotest.engine.listener.TestEngineListener){}[0]
    final suspend fun engineFinished(kotlin.collections/List<kotlin/Throwable>) // io.kotest.engine.listener/ThreadSafeTestEngineListener.engineFinished|engineFinished(kotlin.collections.List<kotlin.Throwable>){}[0]
    final suspend fun engineInitialized(io.kotest.engine.interceptors/EngineContext) // io.kotest.engine.listener/ThreadSafeTestEngineListener.engineInitialized|engineInitialized(io.kotest.engine.interceptors.EngineContext){}[0]
    final suspend fun engineStarted() // io.kotest.engine.listener/ThreadSafeTestEngineListener.engineStarted|engineStarted(){}[0]
    final suspend fun specFinished(kotlin.reflect/KClass<*>, io.kotest.core.test/TestResult) // io.kotest.engine.listener/ThreadSafeTestEngineListener.specFinished|specFinished(kotlin.reflect.KClass<*>;io.kotest.core.test.TestResult){}[0]
    final suspend fun specIgnored(kotlin.reflect/KClass<*>, kotlin/String?) // io.kotest.engine.listener/ThreadSafeTestEngineListener.specIgnored|specIgnored(kotlin.reflect.KClass<*>;kotlin.String?){}[0]
    final suspend fun specStarted(kotlin.reflect/KClass<*>) // io.kotest.engine.listener/ThreadSafeTestEngineListener.specStarted|specStarted(kotlin.reflect.KClass<*>){}[0]
    final suspend fun testFinished(io.kotest.core.test/TestCase, io.kotest.core.test/TestResult) // io.kotest.engine.listener/ThreadSafeTestEngineListener.testFinished|testFinished(io.kotest.core.test.TestCase;io.kotest.core.test.TestResult){}[0]
    final suspend fun testIgnored(io.kotest.core.test/TestCase, kotlin/String?) // io.kotest.engine.listener/ThreadSafeTestEngineListener.testIgnored|testIgnored(io.kotest.core.test.TestCase;kotlin.String?){}[0]
    final suspend fun testStarted(io.kotest.core.test/TestCase) // io.kotest.engine.listener/ThreadSafeTestEngineListener.testStarted|testStarted(io.kotest.core.test.TestCase){}[0]
}
final class io.kotest.engine.project/ProjectExtensions { // io.kotest.engine.project/ProjectExtensions|null[0]
    constructor <init>(io.kotest.core.config/ExtensionRegistry) // io.kotest.engine.project/ProjectExtensions.<init>|<init>(io.kotest.core.config.ExtensionRegistry){}[0]
    final suspend fun afterProject(): kotlin.collections/List<io.kotest.engine.extensions/ExtensionException.AfterProjectException> // io.kotest.engine.project/ProjectExtensions.afterProject|afterProject(){}[0]
    final suspend fun beforeProject(): kotlin.collections/List<io.kotest.engine.extensions/ExtensionException.BeforeProjectException> // io.kotest.engine.project/ProjectExtensions.beforeProject|beforeProject(){}[0]
}
final class io.kotest.engine.spec/Materializer { // io.kotest.engine.spec/Materializer|null[0]
    constructor <init>(io.kotest.core.config/ProjectConfiguration) // io.kotest.engine.spec/Materializer.<init>|<init>(io.kotest.core.config.ProjectConfiguration){}[0]
    final fun materialize(io.kotest.core.spec/Spec): kotlin.collections/List<io.kotest.core.test/TestCase> // io.kotest.engine.spec/Materializer.materialize|materialize(io.kotest.core.spec.Spec){}[0]
    final fun materialize(io.kotest.core.test/NestedTest, io.kotest.core.test/TestCase): io.kotest.core.test/TestCase // io.kotest.engine.spec/Materializer.materialize|materialize(io.kotest.core.test.NestedTest;io.kotest.core.test.TestCase){}[0]
}
final class io.kotest.engine.spec/RandomSpecSorter : io.kotest.engine.spec/SpecSorter { // io.kotest.engine.spec/RandomSpecSorter|null[0]
    constructor <init>(kotlin.random/Random) // io.kotest.engine.spec/RandomSpecSorter.<init>|<init>(kotlin.random.Random){}[0]
    final fun compare(kotlin.reflect/KClass<out io.kotest.core.spec/Spec>, kotlin.reflect/KClass<out io.kotest.core.spec/Spec>): kotlin/Int // io.kotest.engine.spec/RandomSpecSorter.compare|compare(kotlin.reflect.KClass<out|io.kotest.core.spec.Spec>;kotlin.reflect.KClass<out|io.kotest.core.spec.Spec>){}[0]
    final fun sort(kotlin.collections/List<io.kotest.core.spec/SpecRef>): kotlin.collections/List<io.kotest.core.spec/SpecRef> // io.kotest.engine.spec/RandomSpecSorter.sort|sort(kotlin.collections.List<io.kotest.core.spec.SpecRef>){}[0]
}
final class io.kotest.engine.tags/Lexer { // io.kotest.engine.tags/Lexer|null[0]
    constructor <init>(kotlin/String) // io.kotest.engine.tags/Lexer.<init>|<init>(kotlin.String){}[0]
    final fun lex(): kotlin.collections/List<io.kotest.engine.tags/Token> // io.kotest.engine.tags/Lexer.lex|lex(){}[0]
}
final class io.kotest.engine.tags/Parser { // io.kotest.engine.tags/Parser|null[0]
    constructor <init>(kotlin.collections/List<io.kotest.engine.tags/Token>) // io.kotest.engine.tags/Parser.<init>|<init>(kotlin.collections.List<io.kotest.engine.tags.Token>){}[0]
    final fun consume(): io.kotest.engine.tags/Token // io.kotest.engine.tags/Parser.consume|consume(){}[0]
    final fun consume(io.kotest.engine.tags/TokenType): io.kotest.engine.tags/Token // io.kotest.engine.tags/Parser.consume|consume(io.kotest.engine.tags.TokenType){}[0]
    final fun peek(): io.kotest.engine.tags/Token? // io.kotest.engine.tags/Parser.peek|peek(){}[0]
    final fun skip() // io.kotest.engine.tags/Parser.skip|skip(){}[0]
    final fun skip(io.kotest.engine.tags/TokenType) // io.kotest.engine.tags/Parser.skip|skip(io.kotest.engine.tags.TokenType){}[0]
    final fun skipIf(io.kotest.engine.tags/TokenType): kotlin/Boolean // io.kotest.engine.tags/Parser.skipIf|skipIf(io.kotest.engine.tags.TokenType){}[0]
    final object Companion { // io.kotest.engine.tags/Parser.Companion|null[0]
        final fun from(kotlin/String): io.kotest.engine.tags/Parser // io.kotest.engine.tags/Parser.Companion.from|from(kotlin.String){}[0]
    }
}
final class io.kotest.engine.tags/Token { // io.kotest.engine.tags/Token|null[0]
    constructor <init>(kotlin/String, io.kotest.engine.tags/TokenType) // io.kotest.engine.tags/Token.<init>|<init>(kotlin.String;io.kotest.engine.tags.TokenType){}[0]
    final fun component1(): kotlin/String // io.kotest.engine.tags/Token.component1|component1(){}[0]
    final fun component2(): io.kotest.engine.tags/TokenType // io.kotest.engine.tags/Token.component2|component2(){}[0]
    final fun copy(kotlin/String =..., io.kotest.engine.tags/TokenType =...): io.kotest.engine.tags/Token // io.kotest.engine.tags/Token.copy|copy(kotlin.String;io.kotest.engine.tags.TokenType){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.engine.tags/Token.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.kotest.engine.tags/Token.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.kotest.engine.tags/Token.toString|toString(){}[0]
    final val lexeme // io.kotest.engine.tags/Token.lexeme|{}lexeme[0]
        final fun <get-lexeme>(): kotlin/String // io.kotest.engine.tags/Token.lexeme.<get-lexeme>|<get-lexeme>(){}[0]
    final val type // io.kotest.engine.tags/Token.type|{}type[0]
        final fun <get-type>(): io.kotest.engine.tags/TokenType // io.kotest.engine.tags/Token.type.<get-type>|<get-type>(){}[0]
}
final class io.kotest.engine.teamcity/TeamCityMessageBuilder { // io.kotest.engine.teamcity/TeamCityMessageBuilder|null[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/Boolean =...) // io.kotest.engine.teamcity/TeamCityMessageBuilder.<init>|<init>(kotlin.String;kotlin.String;kotlin.Boolean){}[0]
    final fun actual(kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.actual|actual(kotlin.String){}[0]
    final fun addAttribute(kotlin/String, kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.addAttribute|addAttribute(kotlin.String;kotlin.String){}[0]
    final fun build(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.build|build(){}[0]
    final fun details(kotlin/String?): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.details|details(kotlin.String?){}[0]
    final fun duration(kotlin.time/Duration): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.duration|duration(kotlin.time.Duration){}[0]
    final fun escapeColons(kotlin/String): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.escapeColons|escapeColons(kotlin.String){}[0]
    final fun expected(kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.expected|expected(kotlin.String){}[0]
    final fun id(kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.id|id(kotlin.String){}[0]
    final fun locationHint(kotlin/String?): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.locationHint|locationHint(kotlin.String?){}[0]
    final fun message(kotlin/String?): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.message|message(kotlin.String?){}[0]
    final fun parent(kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.parent|parent(kotlin.String){}[0]
    final fun result(io.kotest.core.test/TestResult): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.result|result(io.kotest.core.test.TestResult){}[0]
    final fun timestamp(kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.timestamp|timestamp(kotlin.String){}[0]
    final fun type(kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.type|type(kotlin.String){}[0]
    final fun withException(kotlin/Throwable?, kotlin/Boolean =...): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.withException|withException(kotlin.Throwable?;kotlin.Boolean){}[0]
    final object Attributes { // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes|null[0]
        final const val ACTUAL // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.ACTUAL|{}ACTUAL[0]
            final fun <get-ACTUAL>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.ACTUAL.<get-ACTUAL>|<get-ACTUAL>(){}[0]
        final const val DETAILS // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.DETAILS|{}DETAILS[0]
            final fun <get-DETAILS>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.DETAILS.<get-DETAILS>|<get-DETAILS>(){}[0]
        final const val DURATION // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.DURATION|{}DURATION[0]
            final fun <get-DURATION>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.DURATION.<get-DURATION>|<get-DURATION>(){}[0]
        final const val EXPECTED // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.EXPECTED|{}EXPECTED[0]
            final fun <get-EXPECTED>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.EXPECTED.<get-EXPECTED>|<get-EXPECTED>(){}[0]
        final const val ID // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.ID|{}ID[0]
            final fun <get-ID>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.ID.<get-ID>|<get-ID>(){}[0]
        final const val LOCATION_HINT // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.LOCATION_HINT|{}LOCATION_HINT[0]
            final fun <get-LOCATION_HINT>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.LOCATION_HINT.<get-LOCATION_HINT>|<get-LOCATION_HINT>(){}[0]
        final const val MESSAGE // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.MESSAGE|{}MESSAGE[0]
            final fun <get-MESSAGE>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.MESSAGE.<get-MESSAGE>|<get-MESSAGE>(){}[0]
        final const val NAME // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.NAME|<get-NAME>(){}[0]
            final fun <get-NAME>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.NAME.<get-NAME>|<get-NAME>(){}[0]
        final const val PARENT_ID // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.PARENT_ID|{}PARENT_ID[0]
            final fun <get-PARENT_ID>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.PARENT_ID.<get-PARENT_ID>|<get-PARENT_ID>(){}[0]
        final const val RESULT_STATUS // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.RESULT_STATUS|{}RESULT_STATUS[0]
            final fun <get-RESULT_STATUS>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.RESULT_STATUS.<get-RESULT_STATUS>|<get-RESULT_STATUS>(){}[0]
        final const val TIMESTAMP // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.TIMESTAMP|{}TIMESTAMP[0]
            final fun <get-TIMESTAMP>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.TIMESTAMP.<get-TIMESTAMP>|<get-TIMESTAMP>(){}[0]
        final const val TYPE // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.TYPE|{}TYPE[0]
            final fun <get-TYPE>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Attributes.TYPE.<get-TYPE>|<get-TYPE>(){}[0]
    }
    final object Companion { // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion|null[0]
        final const val TeamCityPrefix // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.TeamCityPrefix|{}TeamCityPrefix[0]
            final fun <get-TeamCityPrefix>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.TeamCityPrefix.<get-TeamCityPrefix>|<get-TeamCityPrefix>(){}[0]
        final fun testFailed(kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.testFailed|testFailed(kotlin.String){}[0]
        final fun testFailed(kotlin/String, kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.testFailed|testFailed(kotlin.String;kotlin.String){}[0]
        final fun testFinished(kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.testFinished|testFinished(kotlin.String){}[0]
        final fun testFinished(kotlin/String, kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.testFinished|testFinished(kotlin.String;kotlin.String){}[0]
        final fun testIgnored(kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.testIgnored|testIgnored(kotlin.String){}[0]
        final fun testIgnored(kotlin/String, kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.testIgnored|testIgnored(kotlin.String;kotlin.String){}[0]
        final fun testStarted(kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.testStarted|testStarted(kotlin.String){}[0]
        final fun testStarted(kotlin/String, kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.testStarted|testStarted(kotlin.String;kotlin.String){}[0]
        final fun testStdErr(kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.testStdErr|testStdErr(kotlin.String){}[0]
        final fun testStdErr(kotlin/String, kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.testStdErr|testStdErr(kotlin.String;kotlin.String){}[0]
        final fun testStdOut(kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.testStdOut|testStdOut(kotlin.String){}[0]
        final fun testStdOut(kotlin/String, kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.testStdOut|testStdOut(kotlin.String;kotlin.String){}[0]
        final fun testSuiteFinished(kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.testSuiteFinished|testSuiteFinished(kotlin.String){}[0]
        final fun testSuiteFinished(kotlin/String, kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.testSuiteFinished|testSuiteFinished(kotlin.String;kotlin.String){}[0]
        final fun testSuiteStarted(kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.testSuiteStarted|testSuiteStarted(kotlin.String){}[0]
        final fun testSuiteStarted(kotlin/String, kotlin/String): io.kotest.engine.teamcity/TeamCityMessageBuilder // io.kotest.engine.teamcity/TeamCityMessageBuilder.Companion.testSuiteStarted|testSuiteStarted(kotlin.String;kotlin.String){}[0]
    }
    final object Messages { // io.kotest.engine.teamcity/TeamCityMessageBuilder.Messages|null[0]
        final const val TEST_FAILED // io.kotest.engine.teamcity/TeamCityMessageBuilder.Messages.TEST_FAILED|<get-TEST_FAILED>(){}[0]
            final fun <get-TEST_FAILED>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Messages.TEST_FAILED.<get-TEST_FAILED>|<get-TEST_FAILED>(){}[0]
        final const val TEST_FINISHED // io.kotest.engine.teamcity/TeamCityMessageBuilder.Messages.TEST_FINISHED|<get-TEST_FINISHED>(){}[0]
            final fun <get-TEST_FINISHED>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Messages.TEST_FINISHED.<get-TEST_FINISHED>|<get-TEST_FINISHED>(){}[0]
        final const val TEST_IGNORED // io.kotest.engine.teamcity/TeamCityMessageBuilder.Messages.TEST_IGNORED|<get-TEST_IGNORED>(){}[0]
            final fun <get-TEST_IGNORED>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Messages.TEST_IGNORED.<get-TEST_IGNORED>|<get-TEST_IGNORED>(){}[0]
        final const val TEST_STARTED // io.kotest.engine.teamcity/TeamCityMessageBuilder.Messages.TEST_STARTED|<get-TEST_STARTED>(){}[0]
            final fun <get-TEST_STARTED>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Messages.TEST_STARTED.<get-TEST_STARTED>|<get-TEST_STARTED>(){}[0]
        final const val TEST_STD_ERR // io.kotest.engine.teamcity/TeamCityMessageBuilder.Messages.TEST_STD_ERR|<get-TEST_STD_ERR>(){}[0]
            final fun <get-TEST_STD_ERR>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Messages.TEST_STD_ERR.<get-TEST_STD_ERR>|<get-TEST_STD_ERR>(){}[0]
        final const val TEST_STD_OUT // io.kotest.engine.teamcity/TeamCityMessageBuilder.Messages.TEST_STD_OUT|<get-TEST_STD_OUT>(){}[0]
            final fun <get-TEST_STD_OUT>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Messages.TEST_STD_OUT.<get-TEST_STD_OUT>|<get-TEST_STD_OUT>(){}[0]
        final const val TEST_SUITE_FINISHED // io.kotest.engine.teamcity/TeamCityMessageBuilder.Messages.TEST_SUITE_FINISHED|<get-TEST_SUITE_FINISHED>(){}[0]
            final fun <get-TEST_SUITE_FINISHED>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Messages.TEST_SUITE_FINISHED.<get-TEST_SUITE_FINISHED>|<get-TEST_SUITE_FINISHED>(){}[0]
        final const val TEST_SUITE_STARTED // io.kotest.engine.teamcity/TeamCityMessageBuilder.Messages.TEST_SUITE_STARTED|<get-TEST_SUITE_STARTED>(){}[0]
            final fun <get-TEST_SUITE_STARTED>(): kotlin/String // io.kotest.engine.teamcity/TeamCityMessageBuilder.Messages.TEST_SUITE_STARTED.<get-TEST_SUITE_STARTED>|<get-TEST_SUITE_STARTED>(){}[0]
    }
}
final class io.kotest.engine.test.interceptors/TestCoroutineInterceptor : io.kotest.engine.test.interceptors/TestExecutionInterceptor { // io.kotest.engine.test.interceptors/TestCoroutineInterceptor|null[0]
    constructor <init>() // io.kotest.engine.test.interceptors/TestCoroutineInterceptor.<init>|<init>(){}[0]
    final suspend fun intercept(io.kotest.core.test/TestCase, io.kotest.core.test/TestScope, kotlin.coroutines/SuspendFunction2<io.kotest.core.test/TestCase, io.kotest.core.test/TestScope, io.kotest.core.test/TestResult>): io.kotest.core.test/TestResult // io.kotest.engine.test.interceptors/TestCoroutineInterceptor.intercept|intercept(io.kotest.core.test.TestCase;io.kotest.core.test.TestScope;kotlin.coroutines.SuspendFunction2<io.kotest.core.test.TestCase,io.kotest.core.test.TestScope,io.kotest.core.test.TestResult>){}[0]
}
final class io.kotest.engine.test.interceptors/TestDispatcherInterceptor : io.kotest.engine.test.interceptors/TestExecutionInterceptor { // io.kotest.engine.test.interceptors/TestDispatcherInterceptor|null[0]
    constructor <init>() // io.kotest.engine.test.interceptors/TestDispatcherInterceptor.<init>|<init>(){}[0]
    final suspend fun intercept(io.kotest.core.test/TestCase, io.kotest.core.test/TestScope, kotlin.coroutines/SuspendFunction2<io.kotest.core.test/TestCase, io.kotest.core.test/TestScope, io.kotest.core.test/TestResult>): io.kotest.core.test/TestResult // io.kotest.engine.test.interceptors/TestDispatcherInterceptor.intercept|intercept(io.kotest.core.test.TestCase;io.kotest.core.test.TestScope;kotlin.coroutines.SuspendFunction2<io.kotest.core.test.TestCase,io.kotest.core.test.TestScope,io.kotest.core.test.TestResult>){}[0]
}
final class io.kotest.engine.test.interceptors/ZeroAssertionsError : kotlin/AssertionError { // io.kotest.engine.test.interceptors/ZeroAssertionsError|null[0]
    constructor <init>(kotlin/String) // io.kotest.engine.test.interceptors/ZeroAssertionsError.<init>|<init>(kotlin.String){}[0]
}
final class io.kotest.engine.test.listener/TestCaseExecutionListenerToTestEngineListenerAdapter : io.kotest.engine.test/TestCaseExecutionListener { // io.kotest.engine.test.listener/TestCaseExecutionListenerToTestEngineListenerAdapter|null[0]
    constructor <init>(io.kotest.engine.listener/TestEngineListener) // io.kotest.engine.test.listener/TestCaseExecutionListenerToTestEngineListenerAdapter.<init>|<init>(io.kotest.engine.listener.TestEngineListener){}[0]
    final suspend fun testFinished(io.kotest.core.test/TestCase, io.kotest.core.test/TestResult) // io.kotest.engine.test.listener/TestCaseExecutionListenerToTestEngineListenerAdapter.testFinished|testFinished(io.kotest.core.test.TestCase;io.kotest.core.test.TestResult){}[0]
    final suspend fun testIgnored(io.kotest.core.test/TestCase, kotlin/String?) // io.kotest.engine.test.listener/TestCaseExecutionListenerToTestEngineListenerAdapter.testIgnored|testIgnored(io.kotest.core.test.TestCase;kotlin.String?){}[0]
    final suspend fun testStarted(io.kotest.core.test/TestCase) // io.kotest.engine.test.listener/TestCaseExecutionListenerToTestEngineListenerAdapter.testStarted|testStarted(io.kotest.core.test.TestCase){}[0]
}
final class io.kotest.engine.test.logging/LogEntry { // io.kotest.engine.test.logging/LogEntry|null[0]
    constructor <init>(io.kotest.core.config/LogLevel, kotlin/Any) // io.kotest.engine.test.logging/LogEntry.<init>|<init>(io.kotest.core.config.LogLevel;kotlin.Any){}[0]
    final fun component1(): io.kotest.core.config/LogLevel // io.kotest.engine.test.logging/LogEntry.component1|component1(){}[0]
    final fun component2(): kotlin/Any // io.kotest.engine.test.logging/LogEntry.component2|component2(){}[0]
    final fun copy(io.kotest.core.config/LogLevel =..., kotlin/Any =...): io.kotest.engine.test.logging/LogEntry // io.kotest.engine.test.logging/LogEntry.copy|copy(io.kotest.core.config.LogLevel;kotlin.Any){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.engine.test.logging/LogEntry.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.kotest.engine.test.logging/LogEntry.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.kotest.engine.test.logging/LogEntry.toString|toString(){}[0]
    final val level // io.kotest.engine.test.logging/LogEntry.level|{}level[0]
        final fun <get-level>(): io.kotest.core.config/LogLevel // io.kotest.engine.test.logging/LogEntry.level.<get-level>|<get-level>(){}[0]
    final val message // io.kotest.engine.test.logging/LogEntry.message|{}message[0]
        final fun <get-message>(): kotlin/Any // io.kotest.engine.test.logging/LogEntry.message.<get-message>|<get-message>(){}[0]
}
final class io.kotest.engine.test.logging/TestLogger { // io.kotest.engine.test.logging/TestLogger|null[0]
    constructor <init>(io.kotest.core.config/LogLevel) // io.kotest.engine.test.logging/TestLogger.<init>|<init>(io.kotest.core.config.LogLevel){}[0]
}
final class io.kotest.engine.test.names/DefaultDisplayNameFormatter : io.kotest.core.names/DisplayNameFormatter { // io.kotest.engine.test.names/DefaultDisplayNameFormatter|null[0]
    constructor <init>() // io.kotest.engine.test.names/DefaultDisplayNameFormatter.<init>|<init>(){}[0]
    constructor <init>(io.kotest.core.config/ProjectConfiguration) // io.kotest.engine.test.names/DefaultDisplayNameFormatter.<init>|<init>(io.kotest.core.config.ProjectConfiguration){}[0]
    final fun format(io.kotest.core.test/TestCase): kotlin/String // io.kotest.engine.test.names/DefaultDisplayNameFormatter.format|format(io.kotest.core.test.TestCase){}[0]
    final fun format(kotlin.reflect/KClass<*>): kotlin/String // io.kotest.engine.test.names/DefaultDisplayNameFormatter.format|format(kotlin.reflect.KClass<*>){}[0]
}
final class io.kotest.engine.test.names/DuplicateTestNameException : kotlin/RuntimeException { // io.kotest.engine.test.names/DuplicateTestNameException|null[0]
    constructor <init>(kotlin/String) // io.kotest.engine.test.names/DuplicateTestNameException.<init>|<init>(kotlin.String){}[0]
}
final class io.kotest.engine.test.names/FallbackDisplayNameFormatter { // io.kotest.engine.test.names/FallbackDisplayNameFormatter|null[0]
    constructor <init>(io.kotest.core.names/DisplayNameFormatter?, io.kotest.engine.test.names/DefaultDisplayNameFormatter) // io.kotest.engine.test.names/FallbackDisplayNameFormatter.<init>|<init>(io.kotest.core.names.DisplayNameFormatter?;io.kotest.engine.test.names.DefaultDisplayNameFormatter){}[0]
    constructor <init>(io.kotest.engine.test.names/DefaultDisplayNameFormatter) // io.kotest.engine.test.names/FallbackDisplayNameFormatter.<init>|<init>(io.kotest.engine.test.names.DefaultDisplayNameFormatter){}[0]
    final fun format(io.kotest.core.test/TestCase): kotlin/String // io.kotest.engine.test.names/FallbackDisplayNameFormatter.format|format(io.kotest.core.test.TestCase){}[0]
    final fun format(kotlin.reflect/KClass<*>): kotlin/String // io.kotest.engine.test.names/FallbackDisplayNameFormatter.format|format(kotlin.reflect.KClass<*>){}[0]
    final object Companion { // io.kotest.engine.test.names/FallbackDisplayNameFormatter.Companion|null[0]
        final fun default(): io.kotest.engine.test.names/FallbackDisplayNameFormatter // io.kotest.engine.test.names/FallbackDisplayNameFormatter.Companion.default|default(){}[0]
        final fun default(io.kotest.core.config/ProjectConfiguration): io.kotest.engine.test.names/FallbackDisplayNameFormatter // io.kotest.engine.test.names/FallbackDisplayNameFormatter.Companion.default|default(io.kotest.core.config.ProjectConfiguration){}[0]
    }
}
final class io.kotest.engine.test.scopes/DuplicateNameHandlingTestScope : io.kotest.core.test/TestScope { // io.kotest.engine.test.scopes/DuplicateNameHandlingTestScope|null[0]
    constructor <init>(io.kotest.core.names/DuplicateTestNameMode, io.kotest.core.test/TestScope) // io.kotest.engine.test.scopes/DuplicateNameHandlingTestScope.<init>|<init>(io.kotest.core.names.DuplicateTestNameMode;io.kotest.core.test.TestScope){}[0]
    final suspend fun registerTestCase(io.kotest.core.test/NestedTest) // io.kotest.engine.test.scopes/DuplicateNameHandlingTestScope.registerTestCase|registerTestCase(io.kotest.core.test.NestedTest){}[0]
    final val coroutineContext // io.kotest.engine.test.scopes/DuplicateNameHandlingTestScope.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.kotest.engine.test.scopes/DuplicateNameHandlingTestScope.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    final val testCase // io.kotest.engine.test.scopes/DuplicateNameHandlingTestScope.testCase|{}testCase[0]
        final fun <get-testCase>(): io.kotest.core.test/TestCase // io.kotest.engine.test.scopes/DuplicateNameHandlingTestScope.testCase.<get-testCase>|<get-testCase>(){}[0]
}
final class io.kotest.engine.test.scopes/NoopTestScope : io.kotest.core.test/TestScope { // io.kotest.engine.test.scopes/NoopTestScope|null[0]
    constructor <init>(io.kotest.core.test/TestCase, kotlin.coroutines/CoroutineContext) // io.kotest.engine.test.scopes/NoopTestScope.<init>|<init>(io.kotest.core.test.TestCase;kotlin.coroutines.CoroutineContext){}[0]
    final suspend fun registerTestCase(io.kotest.core.test/NestedTest) // io.kotest.engine.test.scopes/NoopTestScope.registerTestCase|registerTestCase(io.kotest.core.test.NestedTest){}[0]
    final val coroutineContext // io.kotest.engine.test.scopes/NoopTestScope.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.kotest.engine.test.scopes/NoopTestScope.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    final val testCase // io.kotest.engine.test.scopes/NoopTestScope.testCase|{}testCase[0]
        final fun <get-testCase>(): io.kotest.core.test/TestCase // io.kotest.engine.test.scopes/NoopTestScope.testCase.<get-testCase>|<get-testCase>(){}[0]
}
final class io.kotest.engine.test.scopes/RegistrationContextElement : kotlin.coroutines/AbstractCoroutineContextElement { // io.kotest.engine.test.scopes/RegistrationContextElement|null[0]
    constructor <init>(io.kotest.engine.test.scopes/Registration) // io.kotest.engine.test.scopes/RegistrationContextElement.<init>|<init>(io.kotest.engine.test.scopes.Registration){}[0]
    final fun component1(): io.kotest.engine.test.scopes/Registration // io.kotest.engine.test.scopes/RegistrationContextElement.component1|component1(){}[0]
    final fun copy(io.kotest.engine.test.scopes/Registration =...): io.kotest.engine.test.scopes/RegistrationContextElement // io.kotest.engine.test.scopes/RegistrationContextElement.copy|copy(io.kotest.engine.test.scopes.Registration){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.engine.test.scopes/RegistrationContextElement.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.kotest.engine.test.scopes/RegistrationContextElement.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.kotest.engine.test.scopes/RegistrationContextElement.toString|toString(){}[0]
    final object Key : kotlin.coroutines/CoroutineContext.Key<io.kotest.engine.test.scopes/RegistrationContextElement> // io.kotest.engine.test.scopes/RegistrationContextElement.Key|null[0]
    final val registration // io.kotest.engine.test.scopes/RegistrationContextElement.registration|{}registration[0]
        final fun <get-registration>(): io.kotest.engine.test.scopes/Registration // io.kotest.engine.test.scopes/RegistrationContextElement.registration.<get-registration>|<get-registration>(){}[0]
}
final class io.kotest.engine.test.scopes/TerminalTestScope : io.kotest.core.test/TestScope { // io.kotest.engine.test.scopes/TerminalTestScope|null[0]
    constructor <init>(io.kotest.core.test/TestCase, kotlin.coroutines/CoroutineContext) // io.kotest.engine.test.scopes/TerminalTestScope.<init>|<init>(io.kotest.core.test.TestCase;kotlin.coroutines.CoroutineContext){}[0]
    final suspend fun registerTestCase(io.kotest.core.test/NestedTest) // io.kotest.engine.test.scopes/TerminalTestScope.registerTestCase|registerTestCase(io.kotest.core.test.NestedTest){}[0]
    final val coroutineContext // io.kotest.engine.test.scopes/TerminalTestScope.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // io.kotest.engine.test.scopes/TerminalTestScope.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
    final val testCase // io.kotest.engine.test.scopes/TerminalTestScope.testCase|{}testCase[0]
        final fun <get-testCase>(): io.kotest.core.test/TestCase // io.kotest.engine.test.scopes/TerminalTestScope.testCase.<get-testCase>|<get-testCase>(){}[0]
}
final class io.kotest.engine/EngineResult { // io.kotest.engine/EngineResult|null[0]
    constructor <init>(kotlin.collections/List<kotlin/Throwable>) // io.kotest.engine/EngineResult.<init>|<init>(kotlin.collections.List<kotlin.Throwable>){}[0]
    final fun addError(kotlin/Throwable): io.kotest.engine/EngineResult // io.kotest.engine/EngineResult.addError|addError(kotlin.Throwable){}[0]
    final fun component1(): kotlin.collections/List<kotlin/Throwable> // io.kotest.engine/EngineResult.component1|component1(){}[0]
    final fun copy(kotlin.collections/List<kotlin/Throwable> =...): io.kotest.engine/EngineResult // io.kotest.engine/EngineResult.copy|copy(kotlin.collections.List<kotlin.Throwable>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.engine/EngineResult.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.kotest.engine/EngineResult.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.kotest.engine/EngineResult.toString|toString(){}[0]
    final object Companion { // io.kotest.engine/EngineResult.Companion|null[0]
        final val empty // io.kotest.engine/EngineResult.Companion.empty|{}empty[0]
            final fun <get-empty>(): io.kotest.engine/EngineResult // io.kotest.engine/EngineResult.Companion.empty.<get-empty>|<get-empty>(){}[0]
    }
    final val errors // io.kotest.engine/EngineResult.errors|{}errors[0]
        final fun <get-errors>(): kotlin.collections/List<kotlin/Throwable> // io.kotest.engine/EngineResult.errors.<get-errors>|<get-errors>(){}[0]
}
final class io.kotest.engine/TestEngine { // io.kotest.engine/TestEngine|null[0]
    constructor <init>(io.kotest.engine/TestEngineConfig) // io.kotest.engine/TestEngine.<init>|<init>(io.kotest.engine.TestEngineConfig){}[0]
}
final class io.kotest.engine/TestEngineConfig { // io.kotest.engine/TestEngineConfig|null[0]
    constructor <init>(io.kotest.engine.listener/TestEngineListener, kotlin.collections/List<io.kotest.engine.interceptors/EngineInterceptor>, io.kotest.core.config/ProjectConfiguration, io.kotest.core/TagExpression?, io.kotest.common/Platform) // io.kotest.engine/TestEngineConfig.<init>|<init>(io.kotest.engine.listener.TestEngineListener;kotlin.collections.List<io.kotest.engine.interceptors.EngineInterceptor>;io.kotest.core.config.ProjectConfiguration;io.kotest.core.TagExpression?;io.kotest.common.Platform){}[0]
    final fun component1(): io.kotest.engine.listener/TestEngineListener // io.kotest.engine/TestEngineConfig.component1|component1(){}[0]
    final fun component2(): kotlin.collections/List<io.kotest.engine.interceptors/EngineInterceptor> // io.kotest.engine/TestEngineConfig.component2|component2(){}[0]
    final fun component3(): io.kotest.core.config/ProjectConfiguration // io.kotest.engine/TestEngineConfig.component3|component3(){}[0]
    final fun component4(): io.kotest.core/TagExpression? // io.kotest.engine/TestEngineConfig.component4|component4(){}[0]
    final fun component5(): io.kotest.common/Platform // io.kotest.engine/TestEngineConfig.component5|component5(){}[0]
    final fun copy(io.kotest.engine.listener/TestEngineListener =..., kotlin.collections/List<io.kotest.engine.interceptors/EngineInterceptor> =..., io.kotest.core.config/ProjectConfiguration =..., io.kotest.core/TagExpression? =..., io.kotest.common/Platform =...): io.kotest.engine/TestEngineConfig // io.kotest.engine/TestEngineConfig.copy|copy(io.kotest.engine.listener.TestEngineListener;kotlin.collections.List<io.kotest.engine.interceptors.EngineInterceptor>;io.kotest.core.config.ProjectConfiguration;io.kotest.core.TagExpression?;io.kotest.common.Platform){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.engine/TestEngineConfig.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.kotest.engine/TestEngineConfig.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.kotest.engine/TestEngineConfig.toString|toString(){}[0]
    final val configuration // io.kotest.engine/TestEngineConfig.configuration|{}configuration[0]
        final fun <get-configuration>(): io.kotest.core.config/ProjectConfiguration // io.kotest.engine/TestEngineConfig.configuration.<get-configuration>|<get-configuration>(){}[0]
    final val explicitTags // io.kotest.engine/TestEngineConfig.explicitTags|{}explicitTags[0]
        final fun <get-explicitTags>(): io.kotest.core/TagExpression? // io.kotest.engine/TestEngineConfig.explicitTags.<get-explicitTags>|<get-explicitTags>(){}[0]
    final val interceptors // io.kotest.engine/TestEngineConfig.interceptors|{}interceptors[0]
        final fun <get-interceptors>(): kotlin.collections/List<io.kotest.engine.interceptors/EngineInterceptor> // io.kotest.engine/TestEngineConfig.interceptors.<get-interceptors>|<get-interceptors>(){}[0]
    final val listener // io.kotest.engine/TestEngineConfig.listener|{}listener[0]
        final fun <get-listener>(): io.kotest.engine.listener/TestEngineListener // io.kotest.engine/TestEngineConfig.listener.<get-listener>|<get-listener>(){}[0]
    final val platform // io.kotest.engine/TestEngineConfig.platform|{}platform[0]
        final fun <get-platform>(): io.kotest.common/Platform // io.kotest.engine/TestEngineConfig.platform.<get-platform>|<get-platform>(){}[0]
}
final class io.kotest.engine/TestEngineLauncher { // io.kotest.engine/TestEngineLauncher|null[0]
    constructor <init>() // io.kotest.engine/TestEngineLauncher.<init>|<init>(){}[0]
    constructor <init>(io.kotest.common/Platform, io.kotest.engine.listener/TestEngineListener, io.kotest.core.config/ProjectConfiguration, kotlin.collections/List<io.kotest.core.config/AbstractProjectConfig>, kotlin.collections/List<io.kotest.core.spec/SpecRef>, io.kotest.core/TagExpression?, kotlin/Boolean) // io.kotest.engine/TestEngineLauncher.<init>|<init>(io.kotest.common.Platform;io.kotest.engine.listener.TestEngineListener;io.kotest.core.config.ProjectConfiguration;kotlin.collections.List<io.kotest.core.config.AbstractProjectConfig>;kotlin.collections.List<io.kotest.core.spec.SpecRef>;io.kotest.core.TagExpression?;kotlin.Boolean){}[0]
    constructor <init>(io.kotest.engine.listener/TestEngineListener) // io.kotest.engine/TestEngineLauncher.<init>|<init>(io.kotest.engine.listener.TestEngineListener){}[0]
    final fun launch(): io.kotest.engine/EngineResult // io.kotest.engine/TestEngineLauncher.launch|launch(){}[0]
    final fun promise() // io.kotest.engine/TestEngineLauncher.promise|promise(){}[0]
    final fun testSuite(): io.kotest.core.project/TestSuite // io.kotest.engine/TestEngineLauncher.testSuite|testSuite(){}[0]
    final fun toConfig(): io.kotest.engine/TestEngineConfig // io.kotest.engine/TestEngineLauncher.toConfig|toConfig(){}[0]
    final fun withClasses(kotlin.collections/List<kotlin.reflect/KClass<out io.kotest.core.spec/Spec>>): io.kotest.engine/TestEngineLauncher // io.kotest.engine/TestEngineLauncher.withClasses|withClasses(kotlin.collections.List<kotlin.reflect.KClass<out|io.kotest.core.spec.Spec>>){}[0]
    final fun withClasses(kotlin/Array<out kotlin.reflect/KClass<out io.kotest.core.spec/Spec>>...): io.kotest.engine/TestEngineLauncher // io.kotest.engine/TestEngineLauncher.withClasses|withClasses(kotlin.Array<out|kotlin.reflect.KClass<out|io.kotest.core.spec.Spec>>...){}[0]
    final fun withConfig(kotlin/Array<out io.kotest.core.config/AbstractProjectConfig>...): io.kotest.engine/TestEngineLauncher // io.kotest.engine/TestEngineLauncher.withConfig|withConfig(kotlin.Array<out|io.kotest.core.config.AbstractProjectConfig>...){}[0]
    final fun withConfiguration(io.kotest.core.config/ProjectConfiguration): io.kotest.engine/TestEngineLauncher // io.kotest.engine/TestEngineLauncher.withConfiguration|withConfiguration(io.kotest.core.config.ProjectConfiguration){}[0]
    final fun withExtensions(kotlin.collections/List<io.kotest.core.extensions/Extension>): io.kotest.engine/TestEngineLauncher // io.kotest.engine/TestEngineLauncher.withExtensions|withExtensions(kotlin.collections.List<io.kotest.core.extensions.Extension>){}[0]
    final fun withExtensions(kotlin/Array<out io.kotest.core.extensions/Extension>...): io.kotest.engine/TestEngineLauncher // io.kotest.engine/TestEngineLauncher.withExtensions|withExtensions(kotlin.Array<out|io.kotest.core.extensions.Extension>...){}[0]
    final fun withInitializedConfiguration(io.kotest.core.config/ProjectConfiguration): io.kotest.engine/TestEngineLauncher // io.kotest.engine/TestEngineLauncher.withInitializedConfiguration|withInitializedConfiguration(io.kotest.core.config.ProjectConfiguration){}[0]
    final fun withJs(): io.kotest.engine/TestEngineLauncher // io.kotest.engine/TestEngineLauncher.withJs|withJs(){}[0]
    final fun withJvm(): io.kotest.engine/TestEngineLauncher // io.kotest.engine/TestEngineLauncher.withJvm|withJvm(){}[0]
    final fun withListener(io.kotest.engine.listener/TestEngineListener): io.kotest.engine/TestEngineLauncher // io.kotest.engine/TestEngineLauncher.withListener|withListener(io.kotest.engine.listener.TestEngineListener){}[0]
    final fun withNative(): io.kotest.engine/TestEngineLauncher // io.kotest.engine/TestEngineLauncher.withNative|withNative(){}[0]
    final fun withPlatform(io.kotest.common/Platform): io.kotest.engine/TestEngineLauncher // io.kotest.engine/TestEngineLauncher.withPlatform|withPlatform(io.kotest.common.Platform){}[0]
    final fun withProjectConfig(kotlin/Array<out io.kotest.core.config/AbstractProjectConfig>...): io.kotest.engine/TestEngineLauncher // io.kotest.engine/TestEngineLauncher.withProjectConfig|withProjectConfig(kotlin.Array<out|io.kotest.core.config.AbstractProjectConfig>...){}[0]
    final fun withSpecs(kotlin/Array<out io.kotest.core.spec/Spec>...): io.kotest.engine/TestEngineLauncher // io.kotest.engine/TestEngineLauncher.withSpecs|withSpecs(kotlin.Array<out|io.kotest.core.spec.Spec>...){}[0]
    final fun withTagExpression(io.kotest.core/TagExpression?): io.kotest.engine/TestEngineLauncher // io.kotest.engine/TestEngineLauncher.withTagExpression|withTagExpression(io.kotest.core.TagExpression?){}[0]
    final fun withTeamCityListener(): io.kotest.engine/TestEngineLauncher // io.kotest.engine/TestEngineLauncher.withTeamCityListener|withTeamCityListener(){}[0]
    final fun withWasmJs(): io.kotest.engine/TestEngineLauncher // io.kotest.engine/TestEngineLauncher.withWasmJs|withWasmJs(){}[0]
    final suspend fun async(): io.kotest.engine/EngineResult // io.kotest.engine/TestEngineLauncher.async|async(){}[0]
}
final enum class io.kotest.engine.tags/TagExpressionResult : kotlin/Enum<io.kotest.engine.tags/TagExpressionResult> { // io.kotest.engine.tags/TagExpressionResult|null[0]
    enum entry Exclude // io.kotest.engine.tags/TagExpressionResult.Exclude|null[0]
    enum entry Include // io.kotest.engine.tags/TagExpressionResult.Include|null[0]
    enum entry Inconclusive // io.kotest.engine.tags/TagExpressionResult.Inconclusive|null[0]
    final fun and(io.kotest.engine.tags/TagExpressionResult): io.kotest.engine.tags/TagExpressionResult // io.kotest.engine.tags/TagExpressionResult.and|and(io.kotest.engine.tags.TagExpressionResult){}[0]
    final fun not(): io.kotest.engine.tags/TagExpressionResult // io.kotest.engine.tags/TagExpressionResult.not|not(){}[0]
    final fun or(io.kotest.engine.tags/TagExpressionResult): io.kotest.engine.tags/TagExpressionResult // io.kotest.engine.tags/TagExpressionResult.or|or(io.kotest.engine.tags.TagExpressionResult){}[0]
    final fun valueOf(kotlin/String): io.kotest.engine.tags/TagExpressionResult // io.kotest.engine.tags/TagExpressionResult.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.kotest.engine.tags/TagExpressionResult> // io.kotest.engine.tags/TagExpressionResult.values|values#static(){}[0]
    final val entries // io.kotest.engine.tags/TagExpressionResult.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.kotest.engine.tags/TagExpressionResult> // io.kotest.engine.tags/TagExpressionResult.entries.<get-entries>|<get-entries>#static(){}[0]
}
final enum class io.kotest.engine.tags/TokenType : kotlin/Enum<io.kotest.engine.tags/TokenType> { // io.kotest.engine.tags/TokenType|null[0]
    enum entry Ampersand // io.kotest.engine.tags/TokenType.Ampersand|null[0]
    enum entry CloseParen // io.kotest.engine.tags/TokenType.CloseParen|null[0]
    enum entry ExclamationMark // io.kotest.engine.tags/TokenType.ExclamationMark|null[0]
    enum entry Identifier // io.kotest.engine.tags/TokenType.Identifier|null[0]
    enum entry OpenParen // io.kotest.engine.tags/TokenType.OpenParen|null[0]
    enum entry Pipe // io.kotest.engine.tags/TokenType.Pipe|null[0]
    final fun valueOf(kotlin/String): io.kotest.engine.tags/TokenType // io.kotest.engine.tags/TokenType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.kotest.engine.tags/TokenType> // io.kotest.engine.tags/TokenType.values|values#static(){}[0]
    final val entries // io.kotest.engine.tags/TokenType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.kotest.engine.tags/TokenType> // io.kotest.engine.tags/TokenType.entries.<get-entries>|<get-entries>#static(){}[0]
}
final fun (io.kotest.core.config/ProjectConfiguration).io.kotest.engine.config/dumpProjectConfig() // io.kotest.engine.config/dumpProjectConfig|dumpProjectConfig@io.kotest.core.config.ProjectConfiguration(){}[0]
final fun (io.kotest.core.config/ProjectConfiguration).io.kotest.engine.tags/runtimeTagExpression(): io.kotest.core/TagExpression // io.kotest.engine.tags/runtimeTagExpression|runtimeTagExpression@io.kotest.core.config.ProjectConfiguration(){}[0]
final fun (io.kotest.core.test/TestScope).io.kotest.engine.test.logging/debug(kotlin/Function0<kotlin/Any>): kotlin/Unit? // io.kotest.engine.test.logging/debug|debug@io.kotest.core.test.TestScope(kotlin.Function0<kotlin.Any>){}[0]
final fun (io.kotest.core.test/TestScope).io.kotest.engine.test.logging/error(kotlin/Function0<kotlin/Any>): kotlin/Unit? // io.kotest.engine.test.logging/error|error@io.kotest.core.test.TestScope(kotlin.Function0<kotlin.Any>){}[0]
final fun (io.kotest.core.test/TestScope).io.kotest.engine.test.logging/info(kotlin/Function0<kotlin/Any>): kotlin/Unit? // io.kotest.engine.test.logging/info|info@io.kotest.core.test.TestScope(kotlin.Function0<kotlin.Any>){}[0]
final fun (io.kotest.core.test/TestScope).io.kotest.engine.test.logging/trace(kotlin/Function0<kotlin/Any>): kotlin/Unit? // io.kotest.engine.test.logging/trace|trace@io.kotest.core.test.TestScope(kotlin.Function0<kotlin.Any>){}[0]
final fun (io.kotest.core.test/TestScope).io.kotest.engine.test.logging/warn(kotlin/Function0<kotlin/Any>): kotlin/Unit? // io.kotest.engine.test.logging/warn|warn@io.kotest.core.test.TestScope(kotlin.Function0<kotlin.Any>){}[0]
final fun (io.kotest.core/TagExpression).io.kotest.engine.tags/parse(): io.kotest.engine.tags/Expression? // io.kotest.engine.tags/parse|parse@io.kotest.core.TagExpression(){}[0]
final fun (io.kotest.engine.tags/Expression).io.kotest.engine.tags/asString(): kotlin/String // io.kotest.engine.tags/asString|asString@io.kotest.engine.tags.Expression(){}[0]
final fun (io.kotest.engine.tags/Expression?).io.kotest.engine.tags/isActive(io.kotest.core/Tag): kotlin/Boolean // io.kotest.engine.tags/isActive|isActive@io.kotest.engine.tags.Expression?(io.kotest.core.Tag){}[0]
final fun (io.kotest.engine.tags/Expression?).io.kotest.engine.tags/isActive(kotlin.collections/Set<io.kotest.core/Tag>): kotlin/Boolean // io.kotest.engine.tags/isActive|isActive@io.kotest.engine.tags.Expression?(kotlin.collections.Set<io.kotest.core.Tag>){}[0]
final fun (io.kotest.engine.tags/Expression?).io.kotest.engine.tags/isPotentiallyActive(kotlin.reflect/KClass<out io.kotest.core.spec/Spec>, io.kotest.core.config/ProjectConfiguration): io.kotest.engine.tags/TagExpressionResult // io.kotest.engine.tags/isPotentiallyActive|isPotentiallyActive@io.kotest.engine.tags.Expression?(kotlin.reflect.KClass<out|io.kotest.core.spec.Spec>;io.kotest.core.config.ProjectConfiguration){}[0]
final fun (io.kotest.engine.tags/Parser).io.kotest.engine.tags/and(): io.kotest.engine.tags/Expression // io.kotest.engine.tags/and|and@io.kotest.engine.tags.Parser(){}[0]
final fun (io.kotest.engine.tags/Parser).io.kotest.engine.tags/expression(): io.kotest.engine.tags/Expression // io.kotest.engine.tags/expression|expression@io.kotest.engine.tags.Parser(){}[0]
final fun (io.kotest.engine.tags/Parser).io.kotest.engine.tags/not(): io.kotest.engine.tags/Expression // io.kotest.engine.tags/not|not@io.kotest.engine.tags.Parser(){}[0]
final fun (io.kotest.engine.tags/Parser).io.kotest.engine.tags/or(): io.kotest.engine.tags/Expression // io.kotest.engine.tags/or|or@io.kotest.engine.tags.Parser(){}[0]
final fun (io.kotest.engine.tags/Parser).io.kotest.engine.tags/primary(): io.kotest.engine.tags/Expression // io.kotest.engine.tags/primary|primary@io.kotest.engine.tags.Parser(){}[0]
final fun (io.kotest.engine.test.logging/TestLogger).io.kotest.engine.test.logging/debug(kotlin/Function0<kotlin/Any>) // io.kotest.engine.test.logging/debug|debug@io.kotest.engine.test.logging.TestLogger(kotlin.Function0<kotlin.Any>){}[0]
final fun (io.kotest.engine.test.logging/TestLogger).io.kotest.engine.test.logging/error(kotlin/Function0<kotlin/Any>) // io.kotest.engine.test.logging/error|error@io.kotest.engine.test.logging.TestLogger(kotlin.Function0<kotlin.Any>){}[0]
final fun (io.kotest.engine.test.logging/TestLogger).io.kotest.engine.test.logging/info(kotlin/Function0<kotlin/Any>) // io.kotest.engine.test.logging/info|info@io.kotest.engine.test.logging.TestLogger(kotlin.Function0<kotlin.Any>){}[0]
final fun (io.kotest.engine.test.logging/TestLogger).io.kotest.engine.test.logging/trace(kotlin/Function0<kotlin/Any>) // io.kotest.engine.test.logging/trace|trace@io.kotest.engine.test.logging.TestLogger(kotlin.Function0<kotlin.Any>){}[0]
final fun (io.kotest.engine.test.logging/TestLogger).io.kotest.engine.test.logging/warn(kotlin/Function0<kotlin/Any>) // io.kotest.engine.test.logging/warn|warn@io.kotest.engine.test.logging.TestLogger(kotlin.Function0<kotlin.Any>){}[0]
final fun (io.kotest.engine.test.names/FallbackDisplayNameFormatter).io.kotest.engine.test.names/formatTestPath(io.kotest.core.test/TestCase, kotlin/String): kotlin/String // io.kotest.engine.test.names/formatTestPath|formatTestPath@io.kotest.engine.test.names.FallbackDisplayNameFormatter(io.kotest.core.test.TestCase;kotlin.String){}[0]
final fun (kotlin.reflect/KClass<*>).io.kotest.engine.tags/tags(kotlin/Boolean): kotlin.collections/Set<io.kotest.core/Tag> // io.kotest.engine.tags/tags|tags@kotlin.reflect.KClass<*>(kotlin.Boolean){}[0]
final fun (kotlin/Throwable).io.kotest.engine.test/toTestResult(kotlin.time/Duration): io.kotest.core.test/TestResult // io.kotest.engine.test/toTestResult|toTestResult@kotlin.Throwable(kotlin.time.Duration){}[0]
final fun io.kotest.engine.test.names/appendTagsInDisplayName(io.kotest.core.test/TestCase, kotlin/String): kotlin/String // io.kotest.engine.test.names/appendTagsInDisplayName|appendTagsInDisplayName(io.kotest.core.test.TestCase;kotlin.String){}[0]
final fun io.kotest.engine.test.names/getFallbackDisplayNameFormatter(io.kotest.core.config/ExtensionRegistry, io.kotest.core.config/ProjectConfiguration): io.kotest.engine.test.names/FallbackDisplayNameFormatter // io.kotest.engine.test.names/getFallbackDisplayNameFormatter|getFallbackDisplayNameFormatter(io.kotest.core.config.ExtensionRegistry;io.kotest.core.config.ProjectConfiguration){}[0]
final fun io.kotest.engine.test.scopes/createSingleInstanceTestScope(io.kotest.core.test/TestCase, kotlin.coroutines/CoroutineContext, io.kotest.core.names/DuplicateTestNameMode, io.kotest.core.concurrency/CoroutineDispatcherFactory, io.kotest.engine.interceptors/EngineContext): io.kotest.core.test/TestScope // io.kotest.engine.test.scopes/createSingleInstanceTestScope|createSingleInstanceTestScope(io.kotest.core.test.TestCase;kotlin.coroutines.CoroutineContext;io.kotest.core.names.DuplicateTestNameMode;io.kotest.core.concurrency.CoroutineDispatcherFactory;io.kotest.engine.interceptors.EngineContext){}[0]
final fun io.kotest.engine.test/createTestResult(kotlin.time/Duration, kotlin/Throwable?): io.kotest.core.test/TestResult // io.kotest.engine.test/createTestResult|createTestResult(kotlin.time.Duration;kotlin.Throwable?){}[0]
final object io.kotest.engine.concurrency/NoopCoroutineDispatcherFactory : io.kotest.core.concurrency/CoroutineDispatcherFactory { // io.kotest.engine.concurrency/NoopCoroutineDispatcherFactory|null[0]
    final suspend fun <#A1: kotlin/Any?> withDispatcher(io.kotest.core.test/TestCase, kotlin.coroutines/SuspendFunction0<#A1>): #A1 // io.kotest.engine.concurrency/NoopCoroutineDispatcherFactory.withDispatcher|withDispatcher(io.kotest.core.test.TestCase;kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>}[0]
}
final object io.kotest.engine.config/ConfigManager { // io.kotest.engine.config/ConfigManager|null[0]
    final fun compile(io.kotest.core.config/ProjectConfiguration, kotlin/Function0<kotlin.collections/List<io.kotest.core.config/AbstractProjectConfig>>): kotlin/Result<kotlin/Unit> // io.kotest.engine.config/ConfigManager.compile|compile(io.kotest.core.config.ProjectConfiguration;kotlin.Function0<kotlin.collections.List<io.kotest.core.config.AbstractProjectConfig>>){}[0]
    final fun initialize(io.kotest.core.config/ProjectConfiguration, kotlin/Function0<kotlin.collections/List<io.kotest.core.config/AbstractProjectConfig>>): io.kotest.core.config/ProjectConfiguration // io.kotest.engine.config/ConfigManager.initialize|initialize(io.kotest.core.config.ProjectConfiguration;kotlin.Function0<kotlin.collections.List<io.kotest.core.config.AbstractProjectConfig>>){}[0]
}
final object io.kotest.engine.errors/ExtensionExceptionExtractor { // io.kotest.engine.errors/ExtensionExceptionExtractor|null[0]
    final fun resolve(kotlin/Throwable): kotlin/Pair<kotlin/String, kotlin/Throwable> // io.kotest.engine.errors/ExtensionExceptionExtractor.resolve|resolve(kotlin.Throwable){}[0]
}
final object io.kotest.engine.extensions/SystemPropertyTagExtension : io.kotest.core.extensions/TagExtension { // io.kotest.engine.extensions/SystemPropertyTagExtension|null[0]
    final fun tags(): io.kotest.core/TagExpression // io.kotest.engine.extensions/SystemPropertyTagExtension.tags|tags(){}[0]
}
final object io.kotest.engine.interceptors/EmptyTestSuiteException : kotlin/Exception // io.kotest.engine.interceptors/EmptyTestSuiteException|null[0]
final object io.kotest.engine.listener/LoggingTestEngineListener : io.kotest.engine.listener/AbstractTestEngineListener { // io.kotest.engine.listener/LoggingTestEngineListener|null[0]
    final suspend fun engineFinished(kotlin.collections/List<kotlin/Throwable>) // io.kotest.engine.listener/LoggingTestEngineListener.engineFinished|engineFinished(kotlin.collections.List<kotlin.Throwable>){}[0]
    final suspend fun specFinished(kotlin.reflect/KClass<*>, io.kotest.core.test/TestResult) // io.kotest.engine.listener/LoggingTestEngineListener.specFinished|specFinished(kotlin.reflect.KClass<*>;io.kotest.core.test.TestResult){}[0]
    final suspend fun specStarted(kotlin.reflect/KClass<*>) // io.kotest.engine.listener/LoggingTestEngineListener.specStarted|specStarted(kotlin.reflect.KClass<*>){}[0]
    final suspend fun testFinished(io.kotest.core.test/TestCase, io.kotest.core.test/TestResult) // io.kotest.engine.listener/LoggingTestEngineListener.testFinished|testFinished(io.kotest.core.test.TestCase;io.kotest.core.test.TestResult){}[0]
    final suspend fun testStarted(io.kotest.core.test/TestCase) // io.kotest.engine.listener/LoggingTestEngineListener.testStarted|testStarted(io.kotest.core.test.TestCase){}[0]
}
final object io.kotest.engine.teamcity/Escaper { // io.kotest.engine.teamcity/Escaper|null[0]
    final fun escapeForTeamCity(kotlin/String): kotlin/String // io.kotest.engine.teamcity/Escaper.escapeForTeamCity|escapeForTeamCity(kotlin.String){}[0]
}
final object io.kotest.engine.teamcity/Locations { // io.kotest.engine.teamcity/Locations|null[0]
    final fun location(io.kotest.core.source/SourceRef): kotlin/String? // io.kotest.engine.teamcity/Locations.location|location(io.kotest.core.source.SourceRef){}[0]
    final fun location(kotlin.reflect/KClass<*>): kotlin/String // io.kotest.engine.teamcity/Locations.location|location(kotlin.reflect.KClass<*>){}[0]
}
final object io.kotest.engine.test/NoopTestCaseExecutionListener : io.kotest.engine.test/AbstractTestCaseExecutionListener // io.kotest.engine.test/NoopTestCaseExecutionListener|null[0]
final suspend fun (io.kotest.core.test/TestCase).io.kotest.engine.test.status/isEnabled(io.kotest.core.config/ProjectConfiguration): io.kotest.core.test/Enabled // io.kotest.engine.test.status/isEnabled|isEnabled@io.kotest.core.test.TestCase(io.kotest.core.config.ProjectConfiguration){}[0]
final suspend fun io.kotest.engine.spec/testSpecExecutor(io.kotest.engine.concurrency/NoopCoroutineDispatcherFactory, io.kotest.engine.interceptors/EngineContext, io.kotest.core.spec/SpecRef.Reference) // io.kotest.engine.spec/testSpecExecutor|testSpecExecutor(io.kotest.engine.concurrency.NoopCoroutineDispatcherFactory;io.kotest.engine.interceptors.EngineContext;io.kotest.core.spec.SpecRef.Reference){}[0]
final val io.kotest.engine.listener/NoopTestEngineListener // io.kotest.engine.listener/NoopTestEngineListener|{}NoopTestEngineListener[0]
    final fun <get-NoopTestEngineListener>(): io.kotest.engine.listener/AbstractTestEngineListener // io.kotest.engine.listener/NoopTestEngineListener.<get-NoopTestEngineListener>|<get-NoopTestEngineListener>(){}[0]
final val io.kotest.engine.spec/AnnotatedSpecSorter // io.kotest.engine.spec/AnnotatedSpecSorter|{}AnnotatedSpecSorter[0]
    final fun <get-AnnotatedSpecSorter>(): io.kotest.engine.spec/SpecSorter // io.kotest.engine.spec/AnnotatedSpecSorter.<get-AnnotatedSpecSorter>|<get-AnnotatedSpecSorter>(){}[0]
final val io.kotest.engine.spec/FailureFirstSorter // io.kotest.engine.spec/FailureFirstSorter|{}FailureFirstSorter[0]
    final fun <get-FailureFirstSorter>(): io.kotest.engine.spec/SpecSorter // io.kotest.engine.spec/FailureFirstSorter.<get-FailureFirstSorter>|<get-FailureFirstSorter>(){}[0]
final val io.kotest.engine.test.scopes/registration // io.kotest.engine.test.scopes/registration|@kotlin.coroutines.CoroutineContext{}registration[0]
    final fun (kotlin.coroutines/CoroutineContext).<get-registration>(): io.kotest.engine.test.scopes/Registration // io.kotest.engine.test.scopes/registration.<get-registration>|<get-registration>@kotlin.coroutines.CoroutineContext(){}[0]
open class io.kotest.engine.test.interceptors/TestTimeoutException : kotlin/Exception { // io.kotest.engine.test.interceptors/TestTimeoutException|null[0]
    constructor <init>(kotlin.time/Duration, kotlin/String) // io.kotest.engine.test.interceptors/TestTimeoutException.<init>|<init>(kotlin.time.Duration;kotlin.String){}[0]
    final val testName // io.kotest.engine.test.interceptors/TestTimeoutException.testName|{}testName[0]
        final fun <get-testName>(): kotlin/String // io.kotest.engine.test.interceptors/TestTimeoutException.testName.<get-testName>|<get-testName>(){}[0]
    final val timeout // io.kotest.engine.test.interceptors/TestTimeoutException.timeout|{}timeout[0]
        final fun <get-timeout>(): kotlin.time/Duration // io.kotest.engine.test.interceptors/TestTimeoutException.timeout.<get-timeout>|<get-timeout>(){}[0]
}
sealed class io.kotest.engine.extensions/ExtensionException : kotlin/Exception { // io.kotest.engine.extensions/ExtensionException|null[0]
    constructor <init>(kotlin/Throwable) // io.kotest.engine.extensions/ExtensionException.<init>|<init>(kotlin.Throwable){}[0]
    final class AfterAnyException : io.kotest.engine.extensions/ExtensionException { // io.kotest.engine.extensions/ExtensionException.AfterAnyException|null[0]
        constructor <init>(kotlin/Throwable) // io.kotest.engine.extensions/ExtensionException.AfterAnyException.<init>|<init>(kotlin.Throwable){}[0]
    }
    final class AfterContainerException : io.kotest.engine.extensions/ExtensionException { // io.kotest.engine.extensions/ExtensionException.AfterContainerException|null[0]
        constructor <init>(kotlin/Throwable) // io.kotest.engine.extensions/ExtensionException.AfterContainerException.<init>|<init>(kotlin.Throwable){}[0]
    }
    final class AfterEachException : io.kotest.engine.extensions/ExtensionException { // io.kotest.engine.extensions/ExtensionException.AfterEachException|null[0]
        constructor <init>(kotlin/Throwable) // io.kotest.engine.extensions/ExtensionException.AfterEachException.<init>|<init>(kotlin.Throwable){}[0]
    }
    final class AfterInvocationException : io.kotest.engine.extensions/ExtensionException { // io.kotest.engine.extensions/ExtensionException.AfterInvocationException|null[0]
        constructor <init>(kotlin/Throwable) // io.kotest.engine.extensions/ExtensionException.AfterInvocationException.<init>|<init>(kotlin.Throwable){}[0]
    }
    final class AfterProjectException : io.kotest.engine.extensions/ExtensionException { // io.kotest.engine.extensions/ExtensionException.AfterProjectException|null[0]
        constructor <init>(kotlin/Throwable) // io.kotest.engine.extensions/ExtensionException.AfterProjectException.<init>|<init>(kotlin.Throwable){}[0]
    }
    final class AfterSpecException : io.kotest.engine.extensions/ExtensionException { // io.kotest.engine.extensions/ExtensionException.AfterSpecException|null[0]
        constructor <init>(kotlin/Throwable) // io.kotest.engine.extensions/ExtensionException.AfterSpecException.<init>|<init>(kotlin.Throwable){}[0]
    }
    final class BeforeAnyException : io.kotest.engine.extensions/ExtensionException { // io.kotest.engine.extensions/ExtensionException.BeforeAnyException|null[0]
        constructor <init>(kotlin/Throwable) // io.kotest.engine.extensions/ExtensionException.BeforeAnyException.<init>|<init>(kotlin.Throwable){}[0]
    }
    final class BeforeContainerException : io.kotest.engine.extensions/ExtensionException { // io.kotest.engine.extensions/ExtensionException.BeforeContainerException|null[0]
        constructor <init>(kotlin/Throwable) // io.kotest.engine.extensions/ExtensionException.BeforeContainerException.<init>|<init>(kotlin.Throwable){}[0]
    }
    final class BeforeEachException : io.kotest.engine.extensions/ExtensionException { // io.kotest.engine.extensions/ExtensionException.BeforeEachException|null[0]
        constructor <init>(kotlin/Throwable) // io.kotest.engine.extensions/ExtensionException.BeforeEachException.<init>|<init>(kotlin.Throwable){}[0]
    }
    final class BeforeInvocationException : io.kotest.engine.extensions/ExtensionException { // io.kotest.engine.extensions/ExtensionException.BeforeInvocationException|null[0]
        constructor <init>(kotlin/Throwable) // io.kotest.engine.extensions/ExtensionException.BeforeInvocationException.<init>|<init>(kotlin.Throwable){}[0]
    }
    final class BeforeProjectException : io.kotest.engine.extensions/ExtensionException { // io.kotest.engine.extensions/ExtensionException.BeforeProjectException|null[0]
        constructor <init>(kotlin/Throwable) // io.kotest.engine.extensions/ExtensionException.BeforeProjectException.<init>|<init>(kotlin.Throwable){}[0]
    }
    final class BeforeSpecException : io.kotest.engine.extensions/ExtensionException { // io.kotest.engine.extensions/ExtensionException.BeforeSpecException|null[0]
        constructor <init>(kotlin/Throwable) // io.kotest.engine.extensions/ExtensionException.BeforeSpecException.<init>|<init>(kotlin.Throwable){}[0]
    }
    final class FinalizeSpecException : io.kotest.engine.extensions/ExtensionException { // io.kotest.engine.extensions/ExtensionException.FinalizeSpecException|null[0]
        constructor <init>(kotlin/Throwable) // io.kotest.engine.extensions/ExtensionException.FinalizeSpecException.<init>|<init>(kotlin.Throwable){}[0]
    }
    final class IgnoredSpecException : io.kotest.engine.extensions/ExtensionException { // io.kotest.engine.extensions/ExtensionException.IgnoredSpecException|null[0]
        constructor <init>(kotlin/Throwable) // io.kotest.engine.extensions/ExtensionException.IgnoredSpecException.<init>|<init>(kotlin.Throwable){}[0]
    }
    final class PrepareSpecException : io.kotest.engine.extensions/ExtensionException { // io.kotest.engine.extensions/ExtensionException.PrepareSpecException|null[0]
        constructor <init>(kotlin/Throwable) // io.kotest.engine.extensions/ExtensionException.PrepareSpecException.<init>|<init>(kotlin.Throwable){}[0]
    }
    final val t // io.kotest.engine.extensions/ExtensionException.t|{}t[0]
        final fun <get-t>(): kotlin/Throwable // io.kotest.engine.extensions/ExtensionException.t.<get-t>|<get-t>(){}[0]
}
sealed class io.kotest.engine.tags/Expression { // io.kotest.engine.tags/Expression|null[0]
    constructor <init>() // io.kotest.engine.tags/Expression.<init>|<init>(){}[0]
    final class And : io.kotest.engine.tags/Expression { // io.kotest.engine.tags/Expression.And|null[0]
        constructor <init>(io.kotest.engine.tags/Expression, io.kotest.engine.tags/Expression) // io.kotest.engine.tags/Expression.And.<init>|<init>(io.kotest.engine.tags.Expression;io.kotest.engine.tags.Expression){}[0]
        final fun component1(): io.kotest.engine.tags/Expression // io.kotest.engine.tags/Expression.And.component1|component1(){}[0]
        final fun component2(): io.kotest.engine.tags/Expression // io.kotest.engine.tags/Expression.And.component2|component2(){}[0]
        final fun copy(io.kotest.engine.tags/Expression =..., io.kotest.engine.tags/Expression =...): io.kotest.engine.tags/Expression.And // io.kotest.engine.tags/Expression.And.copy|copy(io.kotest.engine.tags.Expression;io.kotest.engine.tags.Expression){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.engine.tags/Expression.And.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.engine.tags/Expression.And.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.engine.tags/Expression.And.toString|toString(){}[0]
        final val left // io.kotest.engine.tags/Expression.And.left|{}left[0]
            final fun <get-left>(): io.kotest.engine.tags/Expression // io.kotest.engine.tags/Expression.And.left.<get-left>|<get-left>(){}[0]
        final val right // io.kotest.engine.tags/Expression.And.right|{}right[0]
            final fun <get-right>(): io.kotest.engine.tags/Expression // io.kotest.engine.tags/Expression.And.right.<get-right>|<get-right>(){}[0]
    }
    final class Identifier : io.kotest.engine.tags/Expression { // io.kotest.engine.tags/Expression.Identifier|null[0]
        constructor <init>(kotlin/String) // io.kotest.engine.tags/Expression.Identifier.<init>|<init>(kotlin.String){}[0]
        final fun component1(): kotlin/String // io.kotest.engine.tags/Expression.Identifier.component1|component1(){}[0]
        final fun copy(kotlin/String =...): io.kotest.engine.tags/Expression.Identifier // io.kotest.engine.tags/Expression.Identifier.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.engine.tags/Expression.Identifier.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.engine.tags/Expression.Identifier.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.engine.tags/Expression.Identifier.toString|toString(){}[0]
        final val ident // io.kotest.engine.tags/Expression.Identifier.ident|{}ident[0]
            final fun <get-ident>(): kotlin/String // io.kotest.engine.tags/Expression.Identifier.ident.<get-ident>|<get-ident>(){}[0]
    }
    final class Not : io.kotest.engine.tags/Expression { // io.kotest.engine.tags/Expression.Not|null[0]
        constructor <init>(io.kotest.engine.tags/Expression) // io.kotest.engine.tags/Expression.Not.<init>|<init>(io.kotest.engine.tags.Expression){}[0]
        final fun component1(): io.kotest.engine.tags/Expression // io.kotest.engine.tags/Expression.Not.component1|component1(){}[0]
        final fun copy(io.kotest.engine.tags/Expression =...): io.kotest.engine.tags/Expression.Not // io.kotest.engine.tags/Expression.Not.copy|copy(io.kotest.engine.tags.Expression){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.engine.tags/Expression.Not.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.engine.tags/Expression.Not.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.engine.tags/Expression.Not.toString|toString(){}[0]
        final val expr // io.kotest.engine.tags/Expression.Not.expr|{}expr[0]
            final fun <get-expr>(): io.kotest.engine.tags/Expression // io.kotest.engine.tags/Expression.Not.expr.<get-expr>|<get-expr>(){}[0]
    }
    final class Or : io.kotest.engine.tags/Expression { // io.kotest.engine.tags/Expression.Or|null[0]
        constructor <init>(io.kotest.engine.tags/Expression, io.kotest.engine.tags/Expression) // io.kotest.engine.tags/Expression.Or.<init>|<init>(io.kotest.engine.tags.Expression;io.kotest.engine.tags.Expression){}[0]
        final fun component1(): io.kotest.engine.tags/Expression // io.kotest.engine.tags/Expression.Or.component1|component1(){}[0]
        final fun component2(): io.kotest.engine.tags/Expression // io.kotest.engine.tags/Expression.Or.component2|component2(){}[0]
        final fun copy(io.kotest.engine.tags/Expression =..., io.kotest.engine.tags/Expression =...): io.kotest.engine.tags/Expression.Or // io.kotest.engine.tags/Expression.Or.copy|copy(io.kotest.engine.tags.Expression;io.kotest.engine.tags.Expression){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.engine.tags/Expression.Or.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.engine.tags/Expression.Or.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.engine.tags/Expression.Or.toString|toString(){}[0]
        final val left // io.kotest.engine.tags/Expression.Or.left|{}left[0]
            final fun <get-left>(): io.kotest.engine.tags/Expression // io.kotest.engine.tags/Expression.Or.left.<get-left>|<get-left>(){}[0]
        final val right // io.kotest.engine.tags/Expression.Or.right|{}right[0]
            final fun <get-right>(): io.kotest.engine.tags/Expression // io.kotest.engine.tags/Expression.Or.right.<get-right>|<get-right>(){}[0]
    }
}
// Targets: [js, wasmJs]
final fun io.kotest.engine.test.interceptors/testNameEscape(kotlin/String): kotlin/String // io.kotest.engine.test.interceptors/testNameEscape|testNameEscape(kotlin.String){}[0]
