// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.kotest:kotest-assertions-json>
final class io.kotest.assertions.json.schema/JsonSchema { // io.kotest.assertions.json.schema/JsonSchema|null[0]
    constructor <init>(io.kotest.assertions.json.schema/JsonSchemaElement) // io.kotest.assertions.json.schema/JsonSchema.<init>|<init>(io.kotest.assertions.json.schema.JsonSchemaElement){}[0]
    final class JsonArray : io.kotest.assertions.json.schema/JsonSchemaElement { // io.kotest.assertions.json.schema/JsonSchema.JsonArray|null[0]
        constructor <init>(kotlin/Int =..., kotlin/Int =..., io.kotest.matchers/Matcher<kotlin.sequences/Sequence<io.kotest.assertions.json/JsonNode>>? =..., io.kotest.assertions.json/ContainsSpec? =..., io.kotest.assertions.json.schema/JsonSchemaElement? =...) // io.kotest.assertions.json.schema/JsonSchema.JsonArray.<init>|<init>(kotlin.Int;kotlin.Int;io.kotest.matchers.Matcher<kotlin.sequences.Sequence<io.kotest.assertions.json.JsonNode>>?;io.kotest.assertions.json.ContainsSpec?;io.kotest.assertions.json.schema.JsonSchemaElement?){}[0]
        final fun component1(): kotlin/Int // io.kotest.assertions.json.schema/JsonSchema.JsonArray.component1|component1(){}[0]
        final fun component2(): kotlin/Int // io.kotest.assertions.json.schema/JsonSchema.JsonArray.component2|component2(){}[0]
        final fun component3(): io.kotest.matchers/Matcher<kotlin.sequences/Sequence<io.kotest.assertions.json/JsonNode>>? // io.kotest.assertions.json.schema/JsonSchema.JsonArray.component3|component3(){}[0]
        final fun component4(): io.kotest.assertions.json/ContainsSpec? // io.kotest.assertions.json.schema/JsonSchema.JsonArray.component4|component4(){}[0]
        final fun component5(): io.kotest.assertions.json.schema/JsonSchemaElement? // io.kotest.assertions.json.schema/JsonSchema.JsonArray.component5|component5(){}[0]
        final fun copy(kotlin/Int =..., kotlin/Int =..., io.kotest.matchers/Matcher<kotlin.sequences/Sequence<io.kotest.assertions.json/JsonNode>>? =..., io.kotest.assertions.json/ContainsSpec? =..., io.kotest.assertions.json.schema/JsonSchemaElement? =...): io.kotest.assertions.json.schema/JsonSchema.JsonArray // io.kotest.assertions.json.schema/JsonSchema.JsonArray.copy|copy(kotlin.Int;kotlin.Int;io.kotest.matchers.Matcher<kotlin.sequences.Sequence<io.kotest.assertions.json.JsonNode>>?;io.kotest.assertions.json.ContainsSpec?;io.kotest.assertions.json.schema.JsonSchemaElement?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json.schema/JsonSchema.JsonArray.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json.schema/JsonSchema.JsonArray.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json.schema/JsonSchema.JsonArray.toString|toString(){}[0]
        final fun typeName(): kotlin/String // io.kotest.assertions.json.schema/JsonSchema.JsonArray.typeName|typeName(){}[0]
        final val contains // io.kotest.assertions.json.schema/JsonSchema.JsonArray.contains|{}contains[0]
            final fun <get-contains>(): io.kotest.assertions.json/ContainsSpec? // io.kotest.assertions.json.schema/JsonSchema.JsonArray.contains.<get-contains>|<get-contains>(){}[0]
        final val elementType // io.kotest.assertions.json.schema/JsonSchema.JsonArray.elementType|{}elementType[0]
            final fun <get-elementType>(): io.kotest.assertions.json.schema/JsonSchemaElement? // io.kotest.assertions.json.schema/JsonSchema.JsonArray.elementType.<get-elementType>|<get-elementType>(){}[0]
        final val matcher // io.kotest.assertions.json.schema/JsonSchema.JsonArray.matcher|{}matcher[0]
            final fun <get-matcher>(): io.kotest.matchers/Matcher<kotlin.sequences/Sequence<io.kotest.assertions.json/JsonNode>>? // io.kotest.assertions.json.schema/JsonSchema.JsonArray.matcher.<get-matcher>|<get-matcher>(){}[0]
        final val maxItems // io.kotest.assertions.json.schema/JsonSchema.JsonArray.maxItems|{}maxItems[0]
            final fun <get-maxItems>(): kotlin/Int // io.kotest.assertions.json.schema/JsonSchema.JsonArray.maxItems.<get-maxItems>|<get-maxItems>(){}[0]
        final val minItems // io.kotest.assertions.json.schema/JsonSchema.JsonArray.minItems|{}minItems[0]
            final fun <get-minItems>(): kotlin/Int // io.kotest.assertions.json.schema/JsonSchema.JsonArray.minItems.<get-minItems>|<get-minItems>(){}[0]
    }
    final class JsonDecimal : io.kotest.assertions.json.schema/JsonSchema.JsonNumber, io.kotest.assertions.json.schema/JsonSchemaElement, io.kotest.assertions.json.schema/ValueNode<kotlin/Double> { // io.kotest.assertions.json.schema/JsonSchema.JsonDecimal|null[0]
        constructor <init>(io.kotest.matchers/Matcher<kotlin/Double>? =...) // io.kotest.assertions.json.schema/JsonSchema.JsonDecimal.<init>|<init>(io.kotest.matchers.Matcher<kotlin.Double>?){}[0]
        final fun component1(): io.kotest.matchers/Matcher<kotlin/Double>? // io.kotest.assertions.json.schema/JsonSchema.JsonDecimal.component1|component1(){}[0]
        final fun copy(io.kotest.matchers/Matcher<kotlin/Double>? =...): io.kotest.assertions.json.schema/JsonSchema.JsonDecimal // io.kotest.assertions.json.schema/JsonSchema.JsonDecimal.copy|copy(io.kotest.matchers.Matcher<kotlin.Double>?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json.schema/JsonSchema.JsonDecimal.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json.schema/JsonSchema.JsonDecimal.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json.schema/JsonSchema.JsonDecimal.toString|toString(){}[0]
        final fun typeName(): kotlin/String // io.kotest.assertions.json.schema/JsonSchema.JsonDecimal.typeName|typeName(){}[0]
        final val matcher // io.kotest.assertions.json.schema/JsonSchema.JsonDecimal.matcher|{}matcher[0]
            final fun <get-matcher>(): io.kotest.matchers/Matcher<kotlin/Double>? // io.kotest.assertions.json.schema/JsonSchema.JsonDecimal.matcher.<get-matcher>|<get-matcher>(){}[0]
    }
    final class JsonInteger : io.kotest.assertions.json.schema/JsonSchema.JsonNumber, io.kotest.assertions.json.schema/JsonSchemaElement, io.kotest.assertions.json.schema/ValueNode<kotlin/Long> { // io.kotest.assertions.json.schema/JsonSchema.JsonInteger|null[0]
        constructor <init>(io.kotest.matchers/Matcher<kotlin/Long>? =...) // io.kotest.assertions.json.schema/JsonSchema.JsonInteger.<init>|<init>(io.kotest.matchers.Matcher<kotlin.Long>?){}[0]
        final fun component1(): io.kotest.matchers/Matcher<kotlin/Long>? // io.kotest.assertions.json.schema/JsonSchema.JsonInteger.component1|component1(){}[0]
        final fun copy(io.kotest.matchers/Matcher<kotlin/Long>? =...): io.kotest.assertions.json.schema/JsonSchema.JsonInteger // io.kotest.assertions.json.schema/JsonSchema.JsonInteger.copy|copy(io.kotest.matchers.Matcher<kotlin.Long>?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json.schema/JsonSchema.JsonInteger.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json.schema/JsonSchema.JsonInteger.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json.schema/JsonSchema.JsonInteger.toString|toString(){}[0]
        final fun typeName(): kotlin/String // io.kotest.assertions.json.schema/JsonSchema.JsonInteger.typeName|typeName(){}[0]
        final val matcher // io.kotest.assertions.json.schema/JsonSchema.JsonInteger.matcher|{}matcher[0]
            final fun <get-matcher>(): io.kotest.matchers/Matcher<kotlin/Long>? // io.kotest.assertions.json.schema/JsonSchema.JsonInteger.matcher.<get-matcher>|<get-matcher>(){}[0]
    }
    final class JsonObject : io.kotest.assertions.json.schema/JsonSchemaElement { // io.kotest.assertions.json.schema/JsonSchema.JsonObject|null[0]
        constructor <init>(kotlin/Boolean =..., kotlin/Int =..., kotlin/Int? =..., kotlin.collections/Map<kotlin/String, io.kotest.assertions.json.schema/JsonSchemaElement>, kotlin.collections/List<kotlin/String> =...) // io.kotest.assertions.json.schema/JsonSchema.JsonObject.<init>|<init>(kotlin.Boolean;kotlin.Int;kotlin.Int?;kotlin.collections.Map<kotlin.String,io.kotest.assertions.json.schema.JsonSchemaElement>;kotlin.collections.List<kotlin.String>){}[0]
        final fun component1(): kotlin/Boolean // io.kotest.assertions.json.schema/JsonSchema.JsonObject.component1|component1(){}[0]
        final fun component2(): kotlin/Int // io.kotest.assertions.json.schema/JsonSchema.JsonObject.component2|component2(){}[0]
        final fun component3(): kotlin/Int? // io.kotest.assertions.json.schema/JsonSchema.JsonObject.component3|component3(){}[0]
        final fun component4(): kotlin.collections/Map<kotlin/String, io.kotest.assertions.json.schema/JsonSchemaElement> // io.kotest.assertions.json.schema/JsonSchema.JsonObject.component4|component4(){}[0]
        final fun component5(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json.schema/JsonSchema.JsonObject.component5|component5(){}[0]
        final fun copy(kotlin/Boolean =..., kotlin/Int =..., kotlin/Int? =..., kotlin.collections/Map<kotlin/String, io.kotest.assertions.json.schema/JsonSchemaElement> =..., kotlin.collections/List<kotlin/String> =...): io.kotest.assertions.json.schema/JsonSchema.JsonObject // io.kotest.assertions.json.schema/JsonSchema.JsonObject.copy|copy(kotlin.Boolean;kotlin.Int;kotlin.Int?;kotlin.collections.Map<kotlin.String,io.kotest.assertions.json.schema.JsonSchemaElement>;kotlin.collections.List<kotlin.String>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json.schema/JsonSchema.JsonObject.equals|equals(kotlin.Any?){}[0]
        final fun get(kotlin/String): io.kotest.assertions.json.schema/JsonSchemaElement? // io.kotest.assertions.json.schema/JsonSchema.JsonObject.get|get(kotlin.String){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json.schema/JsonSchema.JsonObject.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json.schema/JsonSchema.JsonObject.toString|toString(){}[0]
        final fun typeName(): kotlin/String // io.kotest.assertions.json.schema/JsonSchema.JsonObject.typeName|typeName(){}[0]
        final object $serializer : kotlinx.serialization.internal/GeneratedSerializer<io.kotest.assertions.json.schema/JsonSchema.JsonObject> { // io.kotest.assertions.json.schema/JsonSchema.JsonObject.$serializer|null[0]
            final fun childSerializers(): kotlin/Array<kotlinx.serialization/KSerializer<*>> // io.kotest.assertions.json.schema/JsonSchema.JsonObject.$serializer.childSerializers|childSerializers(){}[0]
            final fun deserialize(kotlinx.serialization.encoding/Decoder): io.kotest.assertions.json.schema/JsonSchema.JsonObject // io.kotest.assertions.json.schema/JsonSchema.JsonObject.$serializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
            final fun serialize(kotlinx.serialization.encoding/Encoder, io.kotest.assertions.json.schema/JsonSchema.JsonObject) // io.kotest.assertions.json.schema/JsonSchema.JsonObject.$serializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;io.kotest.assertions.json.schema.JsonSchema.JsonObject){}[0]
            final val descriptor // io.kotest.assertions.json.schema/JsonSchema.JsonObject.$serializer.descriptor|{}descriptor[0]
                final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // io.kotest.assertions.json.schema/JsonSchema.JsonObject.$serializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
        }
        final object Companion { // io.kotest.assertions.json.schema/JsonSchema.JsonObject.Companion|null[0]
            final fun serializer(): kotlinx.serialization/KSerializer<io.kotest.assertions.json.schema/JsonSchema.JsonObject> // io.kotest.assertions.json.schema/JsonSchema.JsonObject.Companion.serializer|serializer(){}[0]
            final val $childSerializers // io.kotest.assertions.json.schema/JsonSchema.JsonObject.Companion.$childSerializers|{}$childSerializers[0]
        }
        final val additionalProperties // io.kotest.assertions.json.schema/JsonSchema.JsonObject.additionalProperties|{}additionalProperties[0]
            final fun <get-additionalProperties>(): kotlin/Boolean // io.kotest.assertions.json.schema/JsonSchema.JsonObject.additionalProperties.<get-additionalProperties>|<get-additionalProperties>(){}[0]
        final val maxProperties // io.kotest.assertions.json.schema/JsonSchema.JsonObject.maxProperties|{}maxProperties[0]
            final fun <get-maxProperties>(): kotlin/Int? // io.kotest.assertions.json.schema/JsonSchema.JsonObject.maxProperties.<get-maxProperties>|<get-maxProperties>(){}[0]
        final val minProperties // io.kotest.assertions.json.schema/JsonSchema.JsonObject.minProperties|{}minProperties[0]
            final fun <get-minProperties>(): kotlin/Int // io.kotest.assertions.json.schema/JsonSchema.JsonObject.minProperties.<get-minProperties>|<get-minProperties>(){}[0]
        final val properties // io.kotest.assertions.json.schema/JsonSchema.JsonObject.properties|{}properties[0]
            final fun <get-properties>(): kotlin.collections/Map<kotlin/String, io.kotest.assertions.json.schema/JsonSchemaElement> // io.kotest.assertions.json.schema/JsonSchema.JsonObject.properties.<get-properties>|<get-properties>(){}[0]
        final val requiredProperties // io.kotest.assertions.json.schema/JsonSchema.JsonObject.requiredProperties|{}requiredProperties[0]
            final fun <get-requiredProperties>(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json.schema/JsonSchema.JsonObject.requiredProperties.<get-requiredProperties>|<get-requiredProperties>(){}[0]
    }
    final class JsonObjectBuilder { // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder|null[0]
        constructor <init>() // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.<init>|<init>(){}[0]
        final fun array(kotlin/String, kotlin/Boolean =..., kotlin/Function0<io.kotest.assertions.json.schema/JsonSchemaElement>) // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.array|array(kotlin.String;kotlin.Boolean;kotlin.Function0<io.kotest.assertions.json.schema.JsonSchemaElement>){}[0]
        final fun boolean(kotlin/String, kotlin/Boolean =...) // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.boolean|boolean(kotlin.String;kotlin.Boolean){}[0]
        final fun build(): io.kotest.assertions.json.schema/JsonSchema.JsonObject // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.build|build(){}[0]
        final fun decimal(kotlin/String, kotlin/Boolean =..., kotlin/Function0<io.kotest.matchers/Matcher<kotlin/Double>?> =...) // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.decimal|decimal(kotlin.String;kotlin.Boolean;kotlin.Function0<io.kotest.matchers.Matcher<kotlin.Double>?>){}[0]
        final fun integer(kotlin/String, kotlin/Boolean =..., kotlin/Function0<io.kotest.matchers/Matcher<kotlin/Long>?> =...) // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.integer|integer(kotlin.String;kotlin.Boolean;kotlin.Function0<io.kotest.matchers.Matcher<kotlin.Long>?>){}[0]
        final fun null(kotlin/String, kotlin/Boolean =...) // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.null|null(kotlin.String;kotlin.Boolean){}[0]
        final fun number(kotlin/String, kotlin/Boolean =..., kotlin/Function0<io.kotest.matchers/Matcher<kotlin/Double>?> =...) // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.number|number(kotlin.String;kotlin.Boolean;kotlin.Function0<io.kotest.matchers.Matcher<kotlin.Double>?>){}[0]
        final fun obj(kotlin/String, kotlin/Boolean =..., kotlin/Function1<io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder, kotlin/Unit> =...) // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.obj|obj(kotlin.String;kotlin.Boolean;kotlin.Function1<io.kotest.assertions.json.schema.JsonSchema.JsonObjectBuilder,kotlin.Unit>){}[0]
        final fun string(kotlin/String, kotlin/Boolean =..., kotlin/Function0<io.kotest.matchers/Matcher<kotlin/String>?> =...) // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.string|string(kotlin.String;kotlin.Boolean;kotlin.Function0<io.kotest.matchers.Matcher<kotlin.String>?>){}[0]
        final fun withProperty(kotlin/String, kotlin/Boolean =..., kotlin/Function1<io.kotest.assertions.json.schema/JsonSchema.Builder, io.kotest.assertions.json.schema/JsonSchemaElement>) // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.withProperty|withProperty(kotlin.String;kotlin.Boolean;kotlin.Function1<io.kotest.assertions.json.schema.JsonSchema.Builder,io.kotest.assertions.json.schema.JsonSchemaElement>){}[0]
        final var additionalProperties // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.additionalProperties|{}additionalProperties[0]
            final fun <get-additionalProperties>(): kotlin/Boolean // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.additionalProperties.<get-additionalProperties>|<get-additionalProperties>(){}[0]
            final fun <set-additionalProperties>(kotlin/Boolean) // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.additionalProperties.<set-additionalProperties>|<set-additionalProperties>(kotlin.Boolean){}[0]
        final var maxProperties // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.maxProperties|{}maxProperties[0]
            final fun <get-maxProperties>(): kotlin/Int? // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.maxProperties.<get-maxProperties>|<get-maxProperties>(){}[0]
            final fun <set-maxProperties>(kotlin/Int?) // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.maxProperties.<set-maxProperties>|<set-maxProperties>(kotlin.Int?){}[0]
        final var minProperties // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.minProperties|{}minProperties[0]
            final fun <get-minProperties>(): kotlin/Int // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.minProperties.<get-minProperties>|<get-minProperties>(){}[0]
            final fun <set-minProperties>(kotlin/Int) // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.minProperties.<set-minProperties>|<set-minProperties>(kotlin.Int){}[0]
        final var properties // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.properties|{}properties[0]
            final fun <get-properties>(): kotlin.collections/MutableMap<kotlin/String, io.kotest.assertions.json.schema/JsonSchemaElement> // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.properties.<get-properties>|<get-properties>(){}[0]
            final fun <set-properties>(kotlin.collections/MutableMap<kotlin/String, io.kotest.assertions.json.schema/JsonSchemaElement>) // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.properties.<set-properties>|<set-properties>(kotlin.collections.MutableMap<kotlin.String,io.kotest.assertions.json.schema.JsonSchemaElement>){}[0]
        final var requiredProperties // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.requiredProperties|{}requiredProperties[0]
            final fun <get-requiredProperties>(): kotlin.collections/MutableList<kotlin/String> // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.requiredProperties.<get-requiredProperties>|<get-requiredProperties>(){}[0]
            final fun <set-requiredProperties>(kotlin.collections/MutableList<kotlin/String>) // io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder.requiredProperties.<set-requiredProperties>|<set-requiredProperties>(kotlin.collections.MutableList<kotlin.String>){}[0]
    }
    final class JsonString : io.kotest.assertions.json.schema/JsonSchemaElement, io.kotest.assertions.json.schema/ValueNode<kotlin/String> { // io.kotest.assertions.json.schema/JsonSchema.JsonString|null[0]
        constructor <init>(io.kotest.matchers/Matcher<kotlin/String>? =...) // io.kotest.assertions.json.schema/JsonSchema.JsonString.<init>|<init>(io.kotest.matchers.Matcher<kotlin.String>?){}[0]
        final fun component1(): io.kotest.matchers/Matcher<kotlin/String>? // io.kotest.assertions.json.schema/JsonSchema.JsonString.component1|component1(){}[0]
        final fun copy(io.kotest.matchers/Matcher<kotlin/String>? =...): io.kotest.assertions.json.schema/JsonSchema.JsonString // io.kotest.assertions.json.schema/JsonSchema.JsonString.copy|copy(io.kotest.matchers.Matcher<kotlin.String>?){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json.schema/JsonSchema.JsonString.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json.schema/JsonSchema.JsonString.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json.schema/JsonSchema.JsonString.toString|toString(){}[0]
        final fun typeName(): kotlin/String // io.kotest.assertions.json.schema/JsonSchema.JsonString.typeName|typeName(){}[0]
        final val matcher // io.kotest.assertions.json.schema/JsonSchema.JsonString.matcher|{}matcher[0]
            final fun <get-matcher>(): io.kotest.matchers/Matcher<kotlin/String>? // io.kotest.assertions.json.schema/JsonSchema.JsonString.matcher.<get-matcher>|<get-matcher>(){}[0]
    }
    final fun component1(): io.kotest.assertions.json.schema/JsonSchemaElement // io.kotest.assertions.json.schema/JsonSchema.component1|component1(){}[0]
    final fun copy(io.kotest.assertions.json.schema/JsonSchemaElement =...): io.kotest.assertions.json.schema/JsonSchema // io.kotest.assertions.json.schema/JsonSchema.copy|copy(io.kotest.assertions.json.schema.JsonSchemaElement){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json.schema/JsonSchema.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.kotest.assertions.json.schema/JsonSchema.hashCode|hashCode(){}[0]
    final fun invoke(): io.kotest.assertions.json.schema/JsonSchemaElement // io.kotest.assertions.json.schema/JsonSchema.invoke|invoke(){}[0]
    final fun toString(): kotlin/String // io.kotest.assertions.json.schema/JsonSchema.toString|toString(){}[0]
    final object Builder // io.kotest.assertions.json.schema/JsonSchema.Builder|null[0]
    final object JsonBoolean : io.kotest.assertions.json.schema/JsonSchemaElement, io.kotest.assertions.json.schema/ValueNode<kotlin/Boolean>, kotlinx.serialization.internal/SerializerFactory { // io.kotest.assertions.json.schema/JsonSchema.JsonBoolean|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<io.kotest.assertions.json.schema/JsonSchema.JsonBoolean> // io.kotest.assertions.json.schema/JsonSchema.JsonBoolean.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // io.kotest.assertions.json.schema/JsonSchema.JsonBoolean.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
        final fun typeName(): kotlin/String // io.kotest.assertions.json.schema/JsonSchema.JsonBoolean.typeName|typeName(){}[0]
    }
    final object Null : io.kotest.assertions.json.schema/JsonSchemaElement, kotlinx.serialization.internal/SerializerFactory { // io.kotest.assertions.json.schema/JsonSchema.Null|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<io.kotest.assertions.json.schema/JsonSchema.Null> // io.kotest.assertions.json.schema/JsonSchema.Null.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // io.kotest.assertions.json.schema/JsonSchema.Null.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
        final fun typeName(): kotlin/String // io.kotest.assertions.json.schema/JsonSchema.Null.typeName|typeName(){}[0]
    }
    final val root // io.kotest.assertions.json.schema/JsonSchema.root|{}root[0]
        final fun <get-root>(): io.kotest.assertions.json.schema/JsonSchemaElement // io.kotest.assertions.json.schema/JsonSchema.root.<get-root>|<get-root>(){}[0]
}
final class io.kotest.assertions.json/CompareJsonOptions { // io.kotest.assertions.json/CompareJsonOptions|null[0]
    constructor <init>(io.kotest.assertions.json/PropertyOrder =..., io.kotest.assertions.json/ArrayOrder =..., io.kotest.assertions.json/FieldComparison =..., io.kotest.assertions.json/NumberFormat =..., io.kotest.assertions.json/TypeCoercion =...) // io.kotest.assertions.json/CompareJsonOptions.<init>|<init>(io.kotest.assertions.json.PropertyOrder;io.kotest.assertions.json.ArrayOrder;io.kotest.assertions.json.FieldComparison;io.kotest.assertions.json.NumberFormat;io.kotest.assertions.json.TypeCoercion){}[0]
    final var arrayOrder // io.kotest.assertions.json/CompareJsonOptions.arrayOrder|{}arrayOrder[0]
        final fun <get-arrayOrder>(): io.kotest.assertions.json/ArrayOrder // io.kotest.assertions.json/CompareJsonOptions.arrayOrder.<get-arrayOrder>|<get-arrayOrder>(){}[0]
        final fun <set-arrayOrder>(io.kotest.assertions.json/ArrayOrder) // io.kotest.assertions.json/CompareJsonOptions.arrayOrder.<set-arrayOrder>|<set-arrayOrder>(io.kotest.assertions.json.ArrayOrder){}[0]
    final var fieldComparison // io.kotest.assertions.json/CompareJsonOptions.fieldComparison|{}fieldComparison[0]
        final fun <get-fieldComparison>(): io.kotest.assertions.json/FieldComparison // io.kotest.assertions.json/CompareJsonOptions.fieldComparison.<get-fieldComparison>|<get-fieldComparison>(){}[0]
        final fun <set-fieldComparison>(io.kotest.assertions.json/FieldComparison) // io.kotest.assertions.json/CompareJsonOptions.fieldComparison.<set-fieldComparison>|<set-fieldComparison>(io.kotest.assertions.json.FieldComparison){}[0]
    final var numberFormat // io.kotest.assertions.json/CompareJsonOptions.numberFormat|{}numberFormat[0]
        final fun <get-numberFormat>(): io.kotest.assertions.json/NumberFormat // io.kotest.assertions.json/CompareJsonOptions.numberFormat.<get-numberFormat>|<get-numberFormat>(){}[0]
        final fun <set-numberFormat>(io.kotest.assertions.json/NumberFormat) // io.kotest.assertions.json/CompareJsonOptions.numberFormat.<set-numberFormat>|<set-numberFormat>(io.kotest.assertions.json.NumberFormat){}[0]
    final var propertyOrder // io.kotest.assertions.json/CompareJsonOptions.propertyOrder|<set-propertyOrder>(io.kotest.assertions.json.PropertyOrder){}[0]
        final fun <get-propertyOrder>(): io.kotest.assertions.json/PropertyOrder // io.kotest.assertions.json/CompareJsonOptions.propertyOrder.<get-propertyOrder>|<get-propertyOrder>(){}[0]
        final fun <set-propertyOrder>(io.kotest.assertions.json/PropertyOrder) // io.kotest.assertions.json/CompareJsonOptions.propertyOrder.<set-propertyOrder>|<set-propertyOrder>(io.kotest.assertions.json.PropertyOrder){}[0]
    final var typeCoercion // io.kotest.assertions.json/CompareJsonOptions.typeCoercion|<set-typeCoercion>(io.kotest.assertions.json.TypeCoercion){}[0]
        final fun <get-typeCoercion>(): io.kotest.assertions.json/TypeCoercion // io.kotest.assertions.json/CompareJsonOptions.typeCoercion.<get-typeCoercion>|<get-typeCoercion>(){}[0]
        final fun <set-typeCoercion>(io.kotest.assertions.json/TypeCoercion) // io.kotest.assertions.json/CompareJsonOptions.typeCoercion.<set-typeCoercion>|<set-typeCoercion>(io.kotest.assertions.json.TypeCoercion){}[0]
}
final class io.kotest.assertions.json/ContainsSpec { // io.kotest.assertions.json/ContainsSpec|null[0]
    constructor <init>(io.kotest.assertions.json.schema/JsonSchemaElement, kotlin/Int =..., kotlin/Int =...) // io.kotest.assertions.json/ContainsSpec.<init>|<init>(io.kotest.assertions.json.schema.JsonSchemaElement;kotlin.Int;kotlin.Int){}[0]
    final val maxContains // io.kotest.assertions.json/ContainsSpec.maxContains|{}maxContains[0]
        final fun <get-maxContains>(): kotlin/Int // io.kotest.assertions.json/ContainsSpec.maxContains.<get-maxContains>|<get-maxContains>(){}[0]
    final val minContains // io.kotest.assertions.json/ContainsSpec.minContains|{}minContains[0]
        final fun <get-minContains>(): kotlin/Int // io.kotest.assertions.json/ContainsSpec.minContains.<get-minContains>|<get-minContains>(){}[0]
    final val schema // io.kotest.assertions.json/ContainsSpec.schema|{}schema[0]
        final fun <get-schema>(): io.kotest.assertions.json.schema/JsonSchemaElement // io.kotest.assertions.json/ContainsSpec.schema.<get-schema>|<get-schema>(){}[0]
}
final class io.kotest.assertions.json/JsonTree { // io.kotest.assertions.json/JsonTree|null[0]
    constructor <init>(io.kotest.assertions.json/JsonNode, kotlin/String) // io.kotest.assertions.json/JsonTree.<init>|<init>(io.kotest.assertions.json.JsonNode;kotlin.String){}[0]
    final fun component1(): io.kotest.assertions.json/JsonNode // io.kotest.assertions.json/JsonTree.component1|component1(){}[0]
    final fun component2(): kotlin/String // io.kotest.assertions.json/JsonTree.component2|component2(){}[0]
    final fun copy(io.kotest.assertions.json/JsonNode =..., kotlin/String =...): io.kotest.assertions.json/JsonTree // io.kotest.assertions.json/JsonTree.copy|copy(io.kotest.assertions.json.JsonNode;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonTree.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonTree.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // io.kotest.assertions.json/JsonTree.toString|toString(){}[0]
    final val raw // io.kotest.assertions.json/JsonTree.raw|<get-raw>(){}[0]
        final fun <get-raw>(): kotlin/String // io.kotest.assertions.json/JsonTree.raw.<get-raw>|<get-raw>(){}[0]
    final val root // io.kotest.assertions.json/JsonTree.root|<get-root>(){}[0]
        final fun <get-root>(): io.kotest.assertions.json/JsonNode // io.kotest.assertions.json/JsonTree.root.<get-root>|<get-root>(){}[0]
}
final enum class io.kotest.assertions.json/ArrayOrder : kotlin/Enum<io.kotest.assertions.json/ArrayOrder> { // io.kotest.assertions.json/ArrayOrder|null[0]
    enum entry Lenient // io.kotest.assertions.json/ArrayOrder.Lenient|null[0]
    enum entry Strict // io.kotest.assertions.json/ArrayOrder.Strict|null[0]
    final fun valueOf(kotlin/String): io.kotest.assertions.json/ArrayOrder // io.kotest.assertions.json/ArrayOrder.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.kotest.assertions.json/ArrayOrder> // io.kotest.assertions.json/ArrayOrder.values|values#static(){}[0]
    final val entries // io.kotest.assertions.json/ArrayOrder.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.kotest.assertions.json/ArrayOrder> // io.kotest.assertions.json/ArrayOrder.entries.<get-entries>|<get-entries>#static(){}[0]
}
final enum class io.kotest.assertions.json/CompareMode : kotlin/Enum<io.kotest.assertions.json/CompareMode> { // io.kotest.assertions.json/CompareMode|null[0]
    enum entry Lenient // io.kotest.assertions.json/CompareMode.Lenient|null[0]
    enum entry Strict // io.kotest.assertions.json/CompareMode.Strict|null[0]
    final fun valueOf(kotlin/String): io.kotest.assertions.json/CompareMode // io.kotest.assertions.json/CompareMode.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.kotest.assertions.json/CompareMode> // io.kotest.assertions.json/CompareMode.values|values#static(){}[0]
    final val entries // io.kotest.assertions.json/CompareMode.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.kotest.assertions.json/CompareMode> // io.kotest.assertions.json/CompareMode.entries.<get-entries>|<get-entries>#static(){}[0]
}
final enum class io.kotest.assertions.json/CompareOrder : kotlin/Enum<io.kotest.assertions.json/CompareOrder> { // io.kotest.assertions.json/CompareOrder|null[0]
    enum entry Lenient // io.kotest.assertions.json/CompareOrder.Lenient|null[0]
    enum entry Strict // io.kotest.assertions.json/CompareOrder.Strict|null[0]
    final fun valueOf(kotlin/String): io.kotest.assertions.json/CompareOrder // io.kotest.assertions.json/CompareOrder.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.kotest.assertions.json/CompareOrder> // io.kotest.assertions.json/CompareOrder.values|values#static(){}[0]
    final val entries // io.kotest.assertions.json/CompareOrder.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.kotest.assertions.json/CompareOrder> // io.kotest.assertions.json/CompareOrder.entries.<get-entries>|<get-entries>#static(){}[0]
}
final enum class io.kotest.assertions.json/FieldComparison : kotlin/Enum<io.kotest.assertions.json/FieldComparison> { // io.kotest.assertions.json/FieldComparison|null[0]
    enum entry Lenient // io.kotest.assertions.json/FieldComparison.Lenient|null[0]
    enum entry Strict // io.kotest.assertions.json/FieldComparison.Strict|null[0]
    final fun valueOf(kotlin/String): io.kotest.assertions.json/FieldComparison // io.kotest.assertions.json/FieldComparison.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.kotest.assertions.json/FieldComparison> // io.kotest.assertions.json/FieldComparison.values|values#static(){}[0]
    final val entries // io.kotest.assertions.json/FieldComparison.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.kotest.assertions.json/FieldComparison> // io.kotest.assertions.json/FieldComparison.entries.<get-entries>|<get-entries>#static(){}[0]
}
final enum class io.kotest.assertions.json/NumberFormat : kotlin/Enum<io.kotest.assertions.json/NumberFormat> { // io.kotest.assertions.json/NumberFormat|null[0]
    enum entry Lenient // io.kotest.assertions.json/NumberFormat.Lenient|null[0]
    enum entry Strict // io.kotest.assertions.json/NumberFormat.Strict|null[0]
    final fun valueOf(kotlin/String): io.kotest.assertions.json/NumberFormat // io.kotest.assertions.json/NumberFormat.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.kotest.assertions.json/NumberFormat> // io.kotest.assertions.json/NumberFormat.values|values#static(){}[0]
    final val entries // io.kotest.assertions.json/NumberFormat.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.kotest.assertions.json/NumberFormat> // io.kotest.assertions.json/NumberFormat.entries.<get-entries>|<get-entries>#static(){}[0]
}
final enum class io.kotest.assertions.json/PropertyOrder : kotlin/Enum<io.kotest.assertions.json/PropertyOrder> { // io.kotest.assertions.json/PropertyOrder|null[0]
    enum entry Lenient // io.kotest.assertions.json/PropertyOrder.Lenient|null[0]
    enum entry Strict // io.kotest.assertions.json/PropertyOrder.Strict|null[0]
    final fun valueOf(kotlin/String): io.kotest.assertions.json/PropertyOrder // io.kotest.assertions.json/PropertyOrder.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.kotest.assertions.json/PropertyOrder> // io.kotest.assertions.json/PropertyOrder.values|values#static(){}[0]
    final val entries // io.kotest.assertions.json/PropertyOrder.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.kotest.assertions.json/PropertyOrder> // io.kotest.assertions.json/PropertyOrder.entries.<get-entries>|<get-entries>#static(){}[0]
}
final enum class io.kotest.assertions.json/TypeCoercion : kotlin/Enum<io.kotest.assertions.json/TypeCoercion> { // io.kotest.assertions.json/TypeCoercion|null[0]
    enum entry Disabled // io.kotest.assertions.json/TypeCoercion.Disabled|null[0]
    enum entry Enabled // io.kotest.assertions.json/TypeCoercion.Enabled|null[0]
    final fun valueOf(kotlin/String): io.kotest.assertions.json/TypeCoercion // io.kotest.assertions.json/TypeCoercion.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<io.kotest.assertions.json/TypeCoercion> // io.kotest.assertions.json/TypeCoercion.values|values#static(){}[0]
    final val entries // io.kotest.assertions.json/TypeCoercion.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<io.kotest.assertions.json/TypeCoercion> // io.kotest.assertions.json/TypeCoercion.entries.<get-entries>|<get-entries>#static(){}[0]
}
final fun (io.kotest.assertions.json.schema/JsonSchema.Builder).io.kotest.assertions.json.schema/array(kotlin/Int =..., kotlin/Int =..., kotlin/Boolean =..., io.kotest.assertions.json/ContainsSpec? =..., kotlin/Function0<io.kotest.assertions.json.schema/JsonSchemaElement?>? =...): io.kotest.assertions.json.schema/JsonSchema.JsonArray // io.kotest.assertions.json.schema/array|array@io.kotest.assertions.json.schema.JsonSchema.Builder(kotlin.Int;kotlin.Int;kotlin.Boolean;io.kotest.assertions.json.ContainsSpec?;kotlin.Function0<io.kotest.assertions.json.schema.JsonSchemaElement?>?){}[0]
final fun (io.kotest.assertions.json.schema/JsonSchema.Builder).io.kotest.assertions.json.schema/boolean(): io.kotest.assertions.json.schema/JsonSchema.JsonBoolean // io.kotest.assertions.json.schema/boolean|boolean@io.kotest.assertions.json.schema.JsonSchema.Builder(){}[0]
final fun (io.kotest.assertions.json.schema/JsonSchema.Builder).io.kotest.assertions.json.schema/containsSpec(kotlin/Int =..., kotlin/Int =..., kotlin/Function1<io.kotest.assertions.json.schema/JsonSchema.Builder, io.kotest.assertions.json.schema/JsonSchemaElement>): io.kotest.assertions.json/ContainsSpec // io.kotest.assertions.json.schema/containsSpec|containsSpec@io.kotest.assertions.json.schema.JsonSchema.Builder(kotlin.Int;kotlin.Int;kotlin.Function1<io.kotest.assertions.json.schema.JsonSchema.Builder,io.kotest.assertions.json.schema.JsonSchemaElement>){}[0]
final fun (io.kotest.assertions.json.schema/JsonSchema.Builder).io.kotest.assertions.json.schema/decimal(kotlin/Function0<io.kotest.matchers/Matcher<kotlin/Double>?> =...): io.kotest.assertions.json.schema/JsonSchema.JsonDecimal // io.kotest.assertions.json.schema/decimal|decimal@io.kotest.assertions.json.schema.JsonSchema.Builder(kotlin.Function0<io.kotest.matchers.Matcher<kotlin.Double>?>){}[0]
final fun (io.kotest.assertions.json.schema/JsonSchema.Builder).io.kotest.assertions.json.schema/integer(kotlin/Function0<io.kotest.matchers/Matcher<kotlin/Long>?> =...): io.kotest.assertions.json.schema/JsonSchema.JsonInteger // io.kotest.assertions.json.schema/integer|integer@io.kotest.assertions.json.schema.JsonSchema.Builder(kotlin.Function0<io.kotest.matchers.Matcher<kotlin.Long>?>){}[0]
final fun (io.kotest.assertions.json.schema/JsonSchema.Builder).io.kotest.assertions.json.schema/null(): io.kotest.assertions.json.schema/JsonSchema.Null // io.kotest.assertions.json.schema/null|null@io.kotest.assertions.json.schema.JsonSchema.Builder(){}[0]
final fun (io.kotest.assertions.json.schema/JsonSchema.Builder).io.kotest.assertions.json.schema/number(kotlin/Function0<io.kotest.matchers/Matcher<kotlin/Double>?> =...): io.kotest.assertions.json.schema/JsonSchema.JsonDecimal // io.kotest.assertions.json.schema/number|number@io.kotest.assertions.json.schema.JsonSchema.Builder(kotlin.Function0<io.kotest.matchers.Matcher<kotlin.Double>?>){}[0]
final fun (io.kotest.assertions.json.schema/JsonSchema.Builder).io.kotest.assertions.json.schema/obj(kotlin/Function1<io.kotest.assertions.json.schema/JsonSchema.JsonObjectBuilder, kotlin/Unit> =...): io.kotest.assertions.json.schema/JsonSchema.JsonObject // io.kotest.assertions.json.schema/obj|obj@io.kotest.assertions.json.schema.JsonSchema.Builder(kotlin.Function1<io.kotest.assertions.json.schema.JsonSchema.JsonObjectBuilder,kotlin.Unit>){}[0]
final fun (io.kotest.assertions.json.schema/JsonSchema.Builder).io.kotest.assertions.json.schema/string(kotlin/Function0<io.kotest.matchers/Matcher<kotlin/String>?> =...): io.kotest.assertions.json.schema/JsonSchema.JsonString // io.kotest.assertions.json.schema/string|string@io.kotest.assertions.json.schema.JsonSchema.Builder(kotlin.Function0<io.kotest.matchers.Matcher<kotlin.String>?>){}[0]
final fun (io.kotest.assertions.json/JsonError).io.kotest.assertions.json/asString(): kotlin/String // io.kotest.assertions.json/asString|asString@io.kotest.assertions.json.JsonError(){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldBeEmptyJsonArray(): kotlin/String // io.kotest.assertions.json/shouldBeEmptyJsonArray|shouldBeEmptyJsonArray@kotlin.String(){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldBeEmptyJsonObject(): kotlin/String // io.kotest.assertions.json/shouldBeEmptyJsonObject|shouldBeEmptyJsonObject@kotlin.String(){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldBeJsonArray(): kotlin/String // io.kotest.assertions.json/shouldBeJsonArray|shouldBeJsonArray@kotlin.String(){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldBeJsonObject(): kotlin/String // io.kotest.assertions.json/shouldBeJsonObject|shouldBeJsonObject@kotlin.String(){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldBeValidJson(): kotlin/String // io.kotest.assertions.json/shouldBeValidJson|shouldBeValidJson@kotlin.String(){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldEqualJson(kotlin/Function1<io.kotest.assertions.json/CompareJsonOptions, kotlin/String>): kotlin/String // io.kotest.assertions.json/shouldEqualJson|shouldEqualJson@kotlin.String(kotlin.Function1<io.kotest.assertions.json.CompareJsonOptions,kotlin.String>){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldEqualJson(kotlin/String): kotlin/String // io.kotest.assertions.json/shouldEqualJson|shouldEqualJson@kotlin.String(kotlin.String){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldEqualJson(kotlin/String, io.kotest.assertions.json/CompareJsonOptions) // io.kotest.assertions.json/shouldEqualJson|shouldEqualJson@kotlin.String(kotlin.String;io.kotest.assertions.json.CompareJsonOptions){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldEqualJson(kotlin/String, io.kotest.assertions.json/CompareMode) // io.kotest.assertions.json/shouldEqualJson|shouldEqualJson@kotlin.String(kotlin.String;io.kotest.assertions.json.CompareMode){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldEqualJson(kotlin/String, io.kotest.assertions.json/CompareMode, io.kotest.assertions.json/CompareOrder) // io.kotest.assertions.json/shouldEqualJson|shouldEqualJson@kotlin.String(kotlin.String;io.kotest.assertions.json.CompareMode;io.kotest.assertions.json.CompareOrder){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldEqualJson(kotlin/String, io.kotest.assertions.json/CompareOrder) // io.kotest.assertions.json/shouldEqualJson|shouldEqualJson@kotlin.String(kotlin.String;io.kotest.assertions.json.CompareOrder){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldEqualSpecifiedJson(kotlin/String) // io.kotest.assertions.json/shouldEqualSpecifiedJson|shouldEqualSpecifiedJson@kotlin.String(kotlin.String){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldEqualSpecifiedJsonIgnoringOrder(kotlin/String) // io.kotest.assertions.json/shouldEqualSpecifiedJsonIgnoringOrder|shouldEqualSpecifiedJsonIgnoringOrder@kotlin.String(kotlin.String){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldNotBeJsonArray(): kotlin/String // io.kotest.assertions.json/shouldNotBeJsonArray|shouldNotBeJsonArray@kotlin.String(){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldNotBeJsonObject(): kotlin/String // io.kotest.assertions.json/shouldNotBeJsonObject|shouldNotBeJsonObject@kotlin.String(){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldNotBeValidJson(): kotlin/String // io.kotest.assertions.json/shouldNotBeValidJson|shouldNotBeValidJson@kotlin.String(){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldNotEqualJson(kotlin/Function1<io.kotest.assertions.json/CompareJsonOptions, kotlin/String>): kotlin/String // io.kotest.assertions.json/shouldNotEqualJson|shouldNotEqualJson@kotlin.String(kotlin.Function1<io.kotest.assertions.json.CompareJsonOptions,kotlin.String>){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldNotEqualJson(kotlin/String): kotlin/String // io.kotest.assertions.json/shouldNotEqualJson|shouldNotEqualJson@kotlin.String(kotlin.String){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldNotEqualJson(kotlin/String, io.kotest.assertions.json/CompareJsonOptions) // io.kotest.assertions.json/shouldNotEqualJson|shouldNotEqualJson@kotlin.String(kotlin.String;io.kotest.assertions.json.CompareJsonOptions){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldNotEqualJson(kotlin/String, io.kotest.assertions.json/CompareMode) // io.kotest.assertions.json/shouldNotEqualJson|shouldNotEqualJson@kotlin.String(kotlin.String;io.kotest.assertions.json.CompareMode){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldNotEqualJson(kotlin/String, io.kotest.assertions.json/CompareMode, io.kotest.assertions.json/CompareOrder) // io.kotest.assertions.json/shouldNotEqualJson|shouldNotEqualJson@kotlin.String(kotlin.String;io.kotest.assertions.json.CompareMode;io.kotest.assertions.json.CompareOrder){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldNotEqualJson(kotlin/String, io.kotest.assertions.json/CompareOrder) // io.kotest.assertions.json/shouldNotEqualJson|shouldNotEqualJson@kotlin.String(kotlin.String;io.kotest.assertions.json.CompareOrder){}[0]
final fun (kotlin/String).io.kotest.assertions.json/shouldNotEqualSpecifiedJson(kotlin/String) // io.kotest.assertions.json/shouldNotEqualSpecifiedJson|shouldNotEqualSpecifiedJson@kotlin.String(kotlin.String){}[0]
final fun (kotlin/String?).io.kotest.assertions.json.schema/shouldMatchSchema(io.kotest.assertions.json.schema/JsonSchema) // io.kotest.assertions.json.schema/shouldMatchSchema|shouldMatchSchema@kotlin.String?(io.kotest.assertions.json.schema.JsonSchema){}[0]
final fun (kotlin/String?).io.kotest.assertions.json.schema/shouldNotMatchSchema(io.kotest.assertions.json.schema/JsonSchema) // io.kotest.assertions.json.schema/shouldNotMatchSchema|shouldNotMatchSchema@kotlin.String?(io.kotest.assertions.json.schema.JsonSchema){}[0]
final fun (kotlin/String?).io.kotest.assertions.json/shouldMatchJson(kotlin/String?) // io.kotest.assertions.json/shouldMatchJson|shouldMatchJson@kotlin.String?(kotlin.String?){}[0]
final fun (kotlin/String?).io.kotest.assertions.json/shouldNotMatchJson(kotlin/String?) // io.kotest.assertions.json/shouldNotMatchJson|shouldNotMatchJson@kotlin.String?(kotlin.String?){}[0]
final fun (kotlinx.serialization.json/JsonElement).io.kotest.assertions.json.schema/shouldMatchSchema(io.kotest.assertions.json.schema/JsonSchema) // io.kotest.assertions.json.schema/shouldMatchSchema|shouldMatchSchema@kotlinx.serialization.json.JsonElement(io.kotest.assertions.json.schema.JsonSchema){}[0]
final fun (kotlinx.serialization.json/JsonElement).io.kotest.assertions.json.schema/shouldNotMatchSchema(io.kotest.assertions.json.schema/JsonSchema) // io.kotest.assertions.json.schema/shouldNotMatchSchema|shouldNotMatchSchema@kotlinx.serialization.json.JsonElement(io.kotest.assertions.json.schema.JsonSchema){}[0]
final fun (kotlinx.serialization.json/JsonElement).io.kotest.assertions.json/toJsonNode(): io.kotest.assertions.json/JsonNode // io.kotest.assertions.json/toJsonNode|toJsonNode@kotlinx.serialization.json.JsonElement(){}[0]
final fun io.kotest.assertions.json.schema/jsonSchema(kotlin/Function1<io.kotest.assertions.json.schema/JsonSchema.Builder, io.kotest.assertions.json.schema/JsonSchemaElement>): io.kotest.assertions.json.schema/JsonSchema // io.kotest.assertions.json.schema/jsonSchema|jsonSchema(kotlin.Function1<io.kotest.assertions.json.schema.JsonSchema.Builder,io.kotest.assertions.json.schema.JsonSchemaElement>){}[0]
final fun io.kotest.assertions.json.schema/matchSchema(io.kotest.assertions.json.schema/JsonSchema): io.kotest.matchers/Matcher<kotlinx.serialization.json/JsonElement?> // io.kotest.assertions.json.schema/matchSchema|matchSchema(io.kotest.assertions.json.schema.JsonSchema){}[0]
final fun io.kotest.assertions.json.schema/parseSchema(kotlin/String): io.kotest.assertions.json.schema/JsonSchema // io.kotest.assertions.json.schema/parseSchema|parseSchema(kotlin.String){}[0]
final fun io.kotest.assertions.json/beJsonArray(): io.kotest.matchers/Matcher<kotlin/String?> // io.kotest.assertions.json/beJsonArray|beJsonArray(){}[0]
final fun io.kotest.assertions.json/beJsonObject(): io.kotest.matchers/Matcher<kotlin/String?> // io.kotest.assertions.json/beJsonObject|beJsonObject(){}[0]
final fun io.kotest.assertions.json/beJsonType(kotlin.reflect/KClass<*>): io.kotest.matchers/Matcher<kotlin/String?> // io.kotest.assertions.json/beJsonType|beJsonType(kotlin.reflect.KClass<*>){}[0]
final fun io.kotest.assertions.json/beValidJson(): io.kotest.matchers/Matcher<kotlin/String?> // io.kotest.assertions.json/beValidJson|beValidJson(){}[0]
final fun io.kotest.assertions.json/compareJsonOptions(kotlin/Function1<io.kotest.assertions.json/CompareJsonOptions, kotlin/Unit>): io.kotest.assertions.json/CompareJsonOptions // io.kotest.assertions.json/compareJsonOptions|compareJsonOptions(kotlin.Function1<io.kotest.assertions.json.CompareJsonOptions,kotlin.Unit>){}[0]
final fun io.kotest.assertions.json/equalJson(kotlin/String, io.kotest.assertions.json/CompareJsonOptions): io.kotest.matchers/Matcher<kotlin/String?> // io.kotest.assertions.json/equalJson|equalJson(kotlin.String;io.kotest.assertions.json.CompareJsonOptions){}[0]
final fun io.kotest.assertions.json/matchJson(kotlin/String?): io.kotest.matchers/Matcher<kotlin/String?> // io.kotest.assertions.json/matchJson|matchJson(kotlin.String?){}[0]
final object io.kotest.assertions.json/ContainsSpecSerializer : kotlinx.serialization/KSerializer<io.kotest.assertions.json/ContainsSpec> { // io.kotest.assertions.json/ContainsSpecSerializer|null[0]
    final fun deserialize(kotlinx.serialization.encoding/Decoder): io.kotest.assertions.json/ContainsSpec // io.kotest.assertions.json/ContainsSpecSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, io.kotest.assertions.json/ContainsSpec) // io.kotest.assertions.json/ContainsSpecSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;io.kotest.assertions.json.ContainsSpec){}[0]
    final val descriptor // io.kotest.assertions.json/ContainsSpecSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // io.kotest.assertions.json/ContainsSpecSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
}
final val io.kotest.assertions.json.schema/parseToJson // io.kotest.assertions.json.schema/parseToJson|<get-parseToJson>(){}[0]
    final fun <get-parseToJson>(): io.kotest.matchers/Matcher<kotlin/String?> // io.kotest.assertions.json.schema/parseToJson.<get-parseToJson>|<get-parseToJson>(){}[0]
open annotation class io.kotest.assertions.json.schema/JsonSchemaMarker : kotlin/Annotation { // io.kotest.assertions.json.schema/JsonSchemaMarker|null[0]
    constructor <init>() // io.kotest.assertions.json.schema/JsonSchemaMarker.<init>|<init>(){}[0]
}
sealed class io.kotest.assertions.json/JsonError { // io.kotest.assertions.json/JsonError|null[0]
    abstract val path // io.kotest.assertions.json/JsonError.path|{}path[0]
        abstract fun <get-path>(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.path.<get-path>|<get-path>(){}[0]
    constructor <init>() // io.kotest.assertions.json/JsonError.<init>|<init>(){}[0]
    final class ExpectedArray : io.kotest.assertions.json/JsonError { // io.kotest.assertions.json/JsonError.ExpectedArray|null[0]
        constructor <init>(kotlin.collections/List<kotlin/String>, io.kotest.assertions.json/JsonNode) // io.kotest.assertions.json/JsonError.ExpectedArray.<init>|<init>(kotlin.collections.List<kotlin.String>;io.kotest.assertions.json.JsonNode){}[0]
        final fun component1(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.ExpectedArray.component1|component1(){}[0]
        final fun component2(): io.kotest.assertions.json/JsonNode // io.kotest.assertions.json/JsonError.ExpectedArray.component2|component2(){}[0]
        final fun copy(kotlin.collections/List<kotlin/String> =..., io.kotest.assertions.json/JsonNode =...): io.kotest.assertions.json/JsonError.ExpectedArray // io.kotest.assertions.json/JsonError.ExpectedArray.copy|copy(kotlin.collections.List<kotlin.String>;io.kotest.assertions.json.JsonNode){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonError.ExpectedArray.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonError.ExpectedArray.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json/JsonError.ExpectedArray.toString|toString(){}[0]
        final val b // io.kotest.assertions.json/JsonError.ExpectedArray.b|{}b[0]
            final fun <get-b>(): io.kotest.assertions.json/JsonNode // io.kotest.assertions.json/JsonError.ExpectedArray.b.<get-b>|<get-b>(){}[0]
        final val path // io.kotest.assertions.json/JsonError.ExpectedArray.path|{}path[0]
            final fun <get-path>(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.ExpectedArray.path.<get-path>|<get-path>(){}[0]
    }
    final class ExpectedNull : io.kotest.assertions.json/JsonError { // io.kotest.assertions.json/JsonError.ExpectedNull|null[0]
        constructor <init>(kotlin.collections/List<kotlin/String>, io.kotest.assertions.json/JsonNode) // io.kotest.assertions.json/JsonError.ExpectedNull.<init>|<init>(kotlin.collections.List<kotlin.String>;io.kotest.assertions.json.JsonNode){}[0]
        final fun component1(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.ExpectedNull.component1|component1(){}[0]
        final fun component2(): io.kotest.assertions.json/JsonNode // io.kotest.assertions.json/JsonError.ExpectedNull.component2|component2(){}[0]
        final fun copy(kotlin.collections/List<kotlin/String> =..., io.kotest.assertions.json/JsonNode =...): io.kotest.assertions.json/JsonError.ExpectedNull // io.kotest.assertions.json/JsonError.ExpectedNull.copy|copy(kotlin.collections.List<kotlin.String>;io.kotest.assertions.json.JsonNode){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonError.ExpectedNull.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonError.ExpectedNull.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json/JsonError.ExpectedNull.toString|toString(){}[0]
        final val b // io.kotest.assertions.json/JsonError.ExpectedNull.b|{}b[0]
            final fun <get-b>(): io.kotest.assertions.json/JsonNode // io.kotest.assertions.json/JsonError.ExpectedNull.b.<get-b>|<get-b>(){}[0]
        final val path // io.kotest.assertions.json/JsonError.ExpectedNull.path|{}path[0]
            final fun <get-path>(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.ExpectedNull.path.<get-path>|<get-path>(){}[0]
    }
    final class ExpectedObject : io.kotest.assertions.json/JsonError { // io.kotest.assertions.json/JsonError.ExpectedObject|null[0]
        constructor <init>(kotlin.collections/List<kotlin/String>, io.kotest.assertions.json/JsonNode) // io.kotest.assertions.json/JsonError.ExpectedObject.<init>|<init>(kotlin.collections.List<kotlin.String>;io.kotest.assertions.json.JsonNode){}[0]
        final fun component1(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.ExpectedObject.component1|component1(){}[0]
        final fun component2(): io.kotest.assertions.json/JsonNode // io.kotest.assertions.json/JsonError.ExpectedObject.component2|component2(){}[0]
        final fun copy(kotlin.collections/List<kotlin/String> =..., io.kotest.assertions.json/JsonNode =...): io.kotest.assertions.json/JsonError.ExpectedObject // io.kotest.assertions.json/JsonError.ExpectedObject.copy|copy(kotlin.collections.List<kotlin.String>;io.kotest.assertions.json.JsonNode){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonError.ExpectedObject.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonError.ExpectedObject.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json/JsonError.ExpectedObject.toString|toString(){}[0]
        final val b // io.kotest.assertions.json/JsonError.ExpectedObject.b|{}b[0]
            final fun <get-b>(): io.kotest.assertions.json/JsonNode // io.kotest.assertions.json/JsonError.ExpectedObject.b.<get-b>|<get-b>(){}[0]
        final val path // io.kotest.assertions.json/JsonError.ExpectedObject.path|{}path[0]
            final fun <get-path>(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.ExpectedObject.path.<get-path>|<get-path>(){}[0]
    }
    final class IncompatibleTypes : io.kotest.assertions.json/JsonError { // io.kotest.assertions.json/JsonError.IncompatibleTypes|null[0]
        constructor <init>(kotlin.collections/List<kotlin/String>, io.kotest.assertions.json/JsonNode, io.kotest.assertions.json/JsonNode) // io.kotest.assertions.json/JsonError.IncompatibleTypes.<init>|<init>(kotlin.collections.List<kotlin.String>;io.kotest.assertions.json.JsonNode;io.kotest.assertions.json.JsonNode){}[0]
        final fun component1(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.IncompatibleTypes.component1|component1(){}[0]
        final fun component2(): io.kotest.assertions.json/JsonNode // io.kotest.assertions.json/JsonError.IncompatibleTypes.component2|component2(){}[0]
        final fun component3(): io.kotest.assertions.json/JsonNode // io.kotest.assertions.json/JsonError.IncompatibleTypes.component3|component3(){}[0]
        final fun copy(kotlin.collections/List<kotlin/String> =..., io.kotest.assertions.json/JsonNode =..., io.kotest.assertions.json/JsonNode =...): io.kotest.assertions.json/JsonError.IncompatibleTypes // io.kotest.assertions.json/JsonError.IncompatibleTypes.copy|copy(kotlin.collections.List<kotlin.String>;io.kotest.assertions.json.JsonNode;io.kotest.assertions.json.JsonNode){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonError.IncompatibleTypes.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonError.IncompatibleTypes.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json/JsonError.IncompatibleTypes.toString|toString(){}[0]
        final val a // io.kotest.assertions.json/JsonError.IncompatibleTypes.a|{}a[0]
            final fun <get-a>(): io.kotest.assertions.json/JsonNode // io.kotest.assertions.json/JsonError.IncompatibleTypes.a.<get-a>|<get-a>(){}[0]
        final val b // io.kotest.assertions.json/JsonError.IncompatibleTypes.b|{}b[0]
            final fun <get-b>(): io.kotest.assertions.json/JsonNode // io.kotest.assertions.json/JsonError.IncompatibleTypes.b.<get-b>|<get-b>(){}[0]
        final val path // io.kotest.assertions.json/JsonError.IncompatibleTypes.path|{}path[0]
            final fun <get-path>(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.IncompatibleTypes.path.<get-path>|<get-path>(){}[0]
    }
    final class NameOrderDiff : io.kotest.assertions.json/JsonError { // io.kotest.assertions.json/JsonError.NameOrderDiff|null[0]
        constructor <init>(kotlin.collections/List<kotlin/String>, kotlin/Int, kotlin/String, kotlin/String) // io.kotest.assertions.json/JsonError.NameOrderDiff.<init>|<init>(kotlin.collections.List<kotlin.String>;kotlin.Int;kotlin.String;kotlin.String){}[0]
        final fun component1(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.NameOrderDiff.component1|component1(){}[0]
        final fun component2(): kotlin/Int // io.kotest.assertions.json/JsonError.NameOrderDiff.component2|component2(){}[0]
        final fun component3(): kotlin/String // io.kotest.assertions.json/JsonError.NameOrderDiff.component3|component3(){}[0]
        final fun component4(): kotlin/String // io.kotest.assertions.json/JsonError.NameOrderDiff.component4|component4(){}[0]
        final fun copy(kotlin.collections/List<kotlin/String> =..., kotlin/Int =..., kotlin/String =..., kotlin/String =...): io.kotest.assertions.json/JsonError.NameOrderDiff // io.kotest.assertions.json/JsonError.NameOrderDiff.copy|copy(kotlin.collections.List<kotlin.String>;kotlin.Int;kotlin.String;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonError.NameOrderDiff.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonError.NameOrderDiff.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json/JsonError.NameOrderDiff.toString|toString(){}[0]
        final val actual // io.kotest.assertions.json/JsonError.NameOrderDiff.actual|{}actual[0]
            final fun <get-actual>(): kotlin/String // io.kotest.assertions.json/JsonError.NameOrderDiff.actual.<get-actual>|<get-actual>(){}[0]
        final val expected // io.kotest.assertions.json/JsonError.NameOrderDiff.expected|{}expected[0]
            final fun <get-expected>(): kotlin/String // io.kotest.assertions.json/JsonError.NameOrderDiff.expected.<get-expected>|<get-expected>(){}[0]
        final val index // io.kotest.assertions.json/JsonError.NameOrderDiff.index|{}index[0]
            final fun <get-index>(): kotlin/Int // io.kotest.assertions.json/JsonError.NameOrderDiff.index.<get-index>|<get-index>(){}[0]
        final val path // io.kotest.assertions.json/JsonError.NameOrderDiff.path|{}path[0]
            final fun <get-path>(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.NameOrderDiff.path.<get-path>|<get-path>(){}[0]
    }
    final class ObjectExtraKeys : io.kotest.assertions.json/JsonError { // io.kotest.assertions.json/JsonError.ObjectExtraKeys|null[0]
        constructor <init>(kotlin.collections/List<kotlin/String>, kotlin.collections/Set<kotlin/String>) // io.kotest.assertions.json/JsonError.ObjectExtraKeys.<init>|<init>(kotlin.collections.List<kotlin.String>;kotlin.collections.Set<kotlin.String>){}[0]
        final fun component1(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.ObjectExtraKeys.component1|component1(){}[0]
        final fun component2(): kotlin.collections/Set<kotlin/String> // io.kotest.assertions.json/JsonError.ObjectExtraKeys.component2|component2(){}[0]
        final fun copy(kotlin.collections/List<kotlin/String> =..., kotlin.collections/Set<kotlin/String> =...): io.kotest.assertions.json/JsonError.ObjectExtraKeys // io.kotest.assertions.json/JsonError.ObjectExtraKeys.copy|copy(kotlin.collections.List<kotlin.String>;kotlin.collections.Set<kotlin.String>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonError.ObjectExtraKeys.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonError.ObjectExtraKeys.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json/JsonError.ObjectExtraKeys.toString|toString(){}[0]
        final val extra // io.kotest.assertions.json/JsonError.ObjectExtraKeys.extra|{}extra[0]
            final fun <get-extra>(): kotlin.collections/Set<kotlin/String> // io.kotest.assertions.json/JsonError.ObjectExtraKeys.extra.<get-extra>|<get-extra>(){}[0]
        final val path // io.kotest.assertions.json/JsonError.ObjectExtraKeys.path|{}path[0]
            final fun <get-path>(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.ObjectExtraKeys.path.<get-path>|<get-path>(){}[0]
    }
    final class ObjectMissingKeys : io.kotest.assertions.json/JsonError { // io.kotest.assertions.json/JsonError.ObjectMissingKeys|null[0]
        constructor <init>(kotlin.collections/List<kotlin/String>, kotlin.collections/Set<kotlin/String>) // io.kotest.assertions.json/JsonError.ObjectMissingKeys.<init>|<init>(kotlin.collections.List<kotlin.String>;kotlin.collections.Set<kotlin.String>){}[0]
        final fun component1(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.ObjectMissingKeys.component1|component1(){}[0]
        final fun component2(): kotlin.collections/Set<kotlin/String> // io.kotest.assertions.json/JsonError.ObjectMissingKeys.component2|component2(){}[0]
        final fun copy(kotlin.collections/List<kotlin/String> =..., kotlin.collections/Set<kotlin/String> =...): io.kotest.assertions.json/JsonError.ObjectMissingKeys // io.kotest.assertions.json/JsonError.ObjectMissingKeys.copy|copy(kotlin.collections.List<kotlin.String>;kotlin.collections.Set<kotlin.String>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonError.ObjectMissingKeys.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonError.ObjectMissingKeys.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json/JsonError.ObjectMissingKeys.toString|toString(){}[0]
        final val missing // io.kotest.assertions.json/JsonError.ObjectMissingKeys.missing|{}missing[0]
            final fun <get-missing>(): kotlin.collections/Set<kotlin/String> // io.kotest.assertions.json/JsonError.ObjectMissingKeys.missing.<get-missing>|<get-missing>(){}[0]
        final val path // io.kotest.assertions.json/JsonError.ObjectMissingKeys.path|{}path[0]
            final fun <get-path>(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.ObjectMissingKeys.path.<get-path>|<get-path>(){}[0]
    }
    final class UnequalArrayContent : io.kotest.assertions.json/JsonError { // io.kotest.assertions.json/JsonError.UnequalArrayContent|null[0]
        constructor <init>(kotlin.collections/List<kotlin/String>, io.kotest.assertions.json/JsonNode.ArrayNode, io.kotest.assertions.json/JsonNode) // io.kotest.assertions.json/JsonError.UnequalArrayContent.<init>|<init>(kotlin.collections.List<kotlin.String>;io.kotest.assertions.json.JsonNode.ArrayNode;io.kotest.assertions.json.JsonNode){}[0]
        final fun component1(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.UnequalArrayContent.component1|component1(){}[0]
        final fun component2(): io.kotest.assertions.json/JsonNode.ArrayNode // io.kotest.assertions.json/JsonError.UnequalArrayContent.component2|component2(){}[0]
        final fun component3(): io.kotest.assertions.json/JsonNode // io.kotest.assertions.json/JsonError.UnequalArrayContent.component3|component3(){}[0]
        final fun copy(kotlin.collections/List<kotlin/String> =..., io.kotest.assertions.json/JsonNode.ArrayNode =..., io.kotest.assertions.json/JsonNode =...): io.kotest.assertions.json/JsonError.UnequalArrayContent // io.kotest.assertions.json/JsonError.UnequalArrayContent.copy|copy(kotlin.collections.List<kotlin.String>;io.kotest.assertions.json.JsonNode.ArrayNode;io.kotest.assertions.json.JsonNode){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonError.UnequalArrayContent.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonError.UnequalArrayContent.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json/JsonError.UnequalArrayContent.toString|toString(){}[0]
        final val expected // io.kotest.assertions.json/JsonError.UnequalArrayContent.expected|{}expected[0]
            final fun <get-expected>(): io.kotest.assertions.json/JsonNode.ArrayNode // io.kotest.assertions.json/JsonError.UnequalArrayContent.expected.<get-expected>|<get-expected>(){}[0]
        final val missing // io.kotest.assertions.json/JsonError.UnequalArrayContent.missing|{}missing[0]
            final fun <get-missing>(): io.kotest.assertions.json/JsonNode // io.kotest.assertions.json/JsonError.UnequalArrayContent.missing.<get-missing>|<get-missing>(){}[0]
        final val path // io.kotest.assertions.json/JsonError.UnequalArrayContent.path|{}path[0]
            final fun <get-path>(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.UnequalArrayContent.path.<get-path>|<get-path>(){}[0]
    }
    final class UnequalArrayLength : io.kotest.assertions.json/JsonError { // io.kotest.assertions.json/JsonError.UnequalArrayLength|null[0]
        constructor <init>(kotlin.collections/List<kotlin/String>, kotlin/Int, kotlin/Int) // io.kotest.assertions.json/JsonError.UnequalArrayLength.<init>|<init>(kotlin.collections.List<kotlin.String>;kotlin.Int;kotlin.Int){}[0]
        final fun component1(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.UnequalArrayLength.component1|component1(){}[0]
        final fun component2(): kotlin/Int // io.kotest.assertions.json/JsonError.UnequalArrayLength.component2|component2(){}[0]
        final fun component3(): kotlin/Int // io.kotest.assertions.json/JsonError.UnequalArrayLength.component3|component3(){}[0]
        final fun copy(kotlin.collections/List<kotlin/String> =..., kotlin/Int =..., kotlin/Int =...): io.kotest.assertions.json/JsonError.UnequalArrayLength // io.kotest.assertions.json/JsonError.UnequalArrayLength.copy|copy(kotlin.collections.List<kotlin.String>;kotlin.Int;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonError.UnequalArrayLength.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonError.UnequalArrayLength.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json/JsonError.UnequalArrayLength.toString|toString(){}[0]
        final val actual // io.kotest.assertions.json/JsonError.UnequalArrayLength.actual|{}actual[0]
            final fun <get-actual>(): kotlin/Int // io.kotest.assertions.json/JsonError.UnequalArrayLength.actual.<get-actual>|<get-actual>(){}[0]
        final val expected // io.kotest.assertions.json/JsonError.UnequalArrayLength.expected|{}expected[0]
            final fun <get-expected>(): kotlin/Int // io.kotest.assertions.json/JsonError.UnequalArrayLength.expected.<get-expected>|<get-expected>(){}[0]
        final val path // io.kotest.assertions.json/JsonError.UnequalArrayLength.path|{}path[0]
            final fun <get-path>(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.UnequalArrayLength.path.<get-path>|<get-path>(){}[0]
    }
    final class UnequalBooleans : io.kotest.assertions.json/JsonError { // io.kotest.assertions.json/JsonError.UnequalBooleans|null[0]
        constructor <init>(kotlin.collections/List<kotlin/String>, kotlin/Boolean, kotlin/Boolean) // io.kotest.assertions.json/JsonError.UnequalBooleans.<init>|<init>(kotlin.collections.List<kotlin.String>;kotlin.Boolean;kotlin.Boolean){}[0]
        final fun component1(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.UnequalBooleans.component1|component1(){}[0]
        final fun component2(): kotlin/Boolean // io.kotest.assertions.json/JsonError.UnequalBooleans.component2|component2(){}[0]
        final fun component3(): kotlin/Boolean // io.kotest.assertions.json/JsonError.UnequalBooleans.component3|component3(){}[0]
        final fun copy(kotlin.collections/List<kotlin/String> =..., kotlin/Boolean =..., kotlin/Boolean =...): io.kotest.assertions.json/JsonError.UnequalBooleans // io.kotest.assertions.json/JsonError.UnequalBooleans.copy|copy(kotlin.collections.List<kotlin.String>;kotlin.Boolean;kotlin.Boolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonError.UnequalBooleans.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonError.UnequalBooleans.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json/JsonError.UnequalBooleans.toString|toString(){}[0]
        final val a // io.kotest.assertions.json/JsonError.UnequalBooleans.a|{}a[0]
            final fun <get-a>(): kotlin/Boolean // io.kotest.assertions.json/JsonError.UnequalBooleans.a.<get-a>|<get-a>(){}[0]
        final val b // io.kotest.assertions.json/JsonError.UnequalBooleans.b|{}b[0]
            final fun <get-b>(): kotlin/Boolean // io.kotest.assertions.json/JsonError.UnequalBooleans.b.<get-b>|<get-b>(){}[0]
        final val path // io.kotest.assertions.json/JsonError.UnequalBooleans.path|{}path[0]
            final fun <get-path>(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.UnequalBooleans.path.<get-path>|<get-path>(){}[0]
    }
    final class UnequalStrings : io.kotest.assertions.json/JsonError { // io.kotest.assertions.json/JsonError.UnequalStrings|null[0]
        constructor <init>(kotlin.collections/List<kotlin/String>, kotlin/String, kotlin/String) // io.kotest.assertions.json/JsonError.UnequalStrings.<init>|<init>(kotlin.collections.List<kotlin.String>;kotlin.String;kotlin.String){}[0]
        final fun component1(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.UnequalStrings.component1|component1(){}[0]
        final fun component2(): kotlin/String // io.kotest.assertions.json/JsonError.UnequalStrings.component2|component2(){}[0]
        final fun component3(): kotlin/String // io.kotest.assertions.json/JsonError.UnequalStrings.component3|component3(){}[0]
        final fun copy(kotlin.collections/List<kotlin/String> =..., kotlin/String =..., kotlin/String =...): io.kotest.assertions.json/JsonError.UnequalStrings // io.kotest.assertions.json/JsonError.UnequalStrings.copy|copy(kotlin.collections.List<kotlin.String>;kotlin.String;kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonError.UnequalStrings.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonError.UnequalStrings.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json/JsonError.UnequalStrings.toString|toString(){}[0]
        final val a // io.kotest.assertions.json/JsonError.UnequalStrings.a|{}a[0]
            final fun <get-a>(): kotlin/String // io.kotest.assertions.json/JsonError.UnequalStrings.a.<get-a>|<get-a>(){}[0]
        final val b // io.kotest.assertions.json/JsonError.UnequalStrings.b|{}b[0]
            final fun <get-b>(): kotlin/String // io.kotest.assertions.json/JsonError.UnequalStrings.b.<get-b>|<get-b>(){}[0]
        final val path // io.kotest.assertions.json/JsonError.UnequalStrings.path|{}path[0]
            final fun <get-path>(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.UnequalStrings.path.<get-path>|<get-path>(){}[0]
    }
    final class UnequalValues : io.kotest.assertions.json/JsonError { // io.kotest.assertions.json/JsonError.UnequalValues|null[0]
        constructor <init>(kotlin.collections/List<kotlin/String>, kotlin/Any, kotlin/Any) // io.kotest.assertions.json/JsonError.UnequalValues.<init>|<init>(kotlin.collections.List<kotlin.String>;kotlin.Any;kotlin.Any){}[0]
        final fun component1(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.UnequalValues.component1|component1(){}[0]
        final fun component2(): kotlin/Any // io.kotest.assertions.json/JsonError.UnequalValues.component2|component2(){}[0]
        final fun component3(): kotlin/Any // io.kotest.assertions.json/JsonError.UnequalValues.component3|component3(){}[0]
        final fun copy(kotlin.collections/List<kotlin/String> =..., kotlin/Any =..., kotlin/Any =...): io.kotest.assertions.json/JsonError.UnequalValues // io.kotest.assertions.json/JsonError.UnequalValues.copy|copy(kotlin.collections.List<kotlin.String>;kotlin.Any;kotlin.Any){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonError.UnequalValues.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonError.UnequalValues.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json/JsonError.UnequalValues.toString|toString(){}[0]
        final val a // io.kotest.assertions.json/JsonError.UnequalValues.a|{}a[0]
            final fun <get-a>(): kotlin/Any // io.kotest.assertions.json/JsonError.UnequalValues.a.<get-a>|<get-a>(){}[0]
        final val b // io.kotest.assertions.json/JsonError.UnequalValues.b|{}b[0]
            final fun <get-b>(): kotlin/Any // io.kotest.assertions.json/JsonError.UnequalValues.b.<get-b>|<get-b>(){}[0]
        final val path // io.kotest.assertions.json/JsonError.UnequalValues.path|{}path[0]
            final fun <get-path>(): kotlin.collections/List<kotlin/String> // io.kotest.assertions.json/JsonError.UnequalValues.path.<get-path>|<get-path>(){}[0]
    }
}
sealed class io.kotest.assertions.json/JsonNode { // io.kotest.assertions.json/JsonNode|null[0]
    abstract interface ValueNode // io.kotest.assertions.json/JsonNode.ValueNode|null[0]
    constructor <init>() // io.kotest.assertions.json/JsonNode.<init>|<init>(){}[0]
    constructor <init>(kotlin/Int, kotlinx.serialization.internal/SerializationConstructorMarker?) // io.kotest.assertions.json/JsonNode.<init>|<init>(kotlin.Int;kotlinx.serialization.internal.SerializationConstructorMarker?){}[0]
    final class ArrayNode : io.kotest.assertions.json/JsonNode { // io.kotest.assertions.json/JsonNode.ArrayNode|null[0]
        constructor <init>(kotlin.collections/List<io.kotest.assertions.json/JsonNode>) // io.kotest.assertions.json/JsonNode.ArrayNode.<init>|<init>(kotlin.collections.List<io.kotest.assertions.json.JsonNode>){}[0]
        final fun component1(): kotlin.collections/List<io.kotest.assertions.json/JsonNode> // io.kotest.assertions.json/JsonNode.ArrayNode.component1|component1(){}[0]
        final fun copy(kotlin.collections/List<io.kotest.assertions.json/JsonNode> =...): io.kotest.assertions.json/JsonNode.ArrayNode // io.kotest.assertions.json/JsonNode.ArrayNode.copy|copy(kotlin.collections.List<io.kotest.assertions.json.JsonNode>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonNode.ArrayNode.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonNode.ArrayNode.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json/JsonNode.ArrayNode.toString|toString(){}[0]
        final val elements // io.kotest.assertions.json/JsonNode.ArrayNode.elements|{}elements[0]
            final fun <get-elements>(): kotlin.collections/List<io.kotest.assertions.json/JsonNode> // io.kotest.assertions.json/JsonNode.ArrayNode.elements.<get-elements>|<get-elements>(){}[0]
    }
    final class BooleanNode : io.kotest.assertions.json/JsonNode, io.kotest.assertions.json/JsonNode.ValueNode { // io.kotest.assertions.json/JsonNode.BooleanNode|null[0]
        constructor <init>(kotlin/Boolean) // io.kotest.assertions.json/JsonNode.BooleanNode.<init>|<init>(kotlin.Boolean){}[0]
        final fun component1(): kotlin/Boolean // io.kotest.assertions.json/JsonNode.BooleanNode.component1|component1(){}[0]
        final fun copy(kotlin/Boolean =...): io.kotest.assertions.json/JsonNode.BooleanNode // io.kotest.assertions.json/JsonNode.BooleanNode.copy|copy(kotlin.Boolean){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonNode.BooleanNode.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonNode.BooleanNode.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json/JsonNode.BooleanNode.toString|toString(){}[0]
        final val value // io.kotest.assertions.json/JsonNode.BooleanNode.value|{}value[0]
            final fun <get-value>(): kotlin/Boolean // io.kotest.assertions.json/JsonNode.BooleanNode.value.<get-value>|<get-value>(){}[0]
    }
    final class NumberNode : io.kotest.assertions.json/JsonNode, io.kotest.assertions.json/JsonNode.ValueNode { // io.kotest.assertions.json/JsonNode.NumberNode|null[0]
        constructor <init>(kotlin/String) // io.kotest.assertions.json/JsonNode.NumberNode.<init>|<init>(kotlin.String){}[0]
        final fun component1(): kotlin/String // io.kotest.assertions.json/JsonNode.NumberNode.component1|component1(){}[0]
        final fun copy(kotlin/String =...): io.kotest.assertions.json/JsonNode.NumberNode // io.kotest.assertions.json/JsonNode.NumberNode.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonNode.NumberNode.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonNode.NumberNode.hashCode|hashCode(){}[0]
        final fun lenientEquals(io.kotest.assertions.json/JsonNode.NumberNode): kotlin/Boolean // io.kotest.assertions.json/JsonNode.NumberNode.lenientEquals|lenientEquals(io.kotest.assertions.json.JsonNode.NumberNode){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json/JsonNode.NumberNode.toString|toString(){}[0]
        final object Companion // io.kotest.assertions.json/JsonNode.NumberNode.Companion|null[0]
        final val content // io.kotest.assertions.json/JsonNode.NumberNode.content|{}content[0]
            final fun <get-content>(): kotlin/String // io.kotest.assertions.json/JsonNode.NumberNode.content.<get-content>|<get-content>(){}[0]
    }
    final class ObjectNode : io.kotest.assertions.json/JsonNode { // io.kotest.assertions.json/JsonNode.ObjectNode|null[0]
        constructor <init>(kotlin.collections/Map<kotlin/String, io.kotest.assertions.json/JsonNode>) // io.kotest.assertions.json/JsonNode.ObjectNode.<init>|<init>(kotlin.collections.Map<kotlin.String,io.kotest.assertions.json.JsonNode>){}[0]
        final fun component1(): kotlin.collections/Map<kotlin/String, io.kotest.assertions.json/JsonNode> // io.kotest.assertions.json/JsonNode.ObjectNode.component1|component1(){}[0]
        final fun copy(kotlin.collections/Map<kotlin/String, io.kotest.assertions.json/JsonNode> =...): io.kotest.assertions.json/JsonNode.ObjectNode // io.kotest.assertions.json/JsonNode.ObjectNode.copy|copy(kotlin.collections.Map<kotlin.String,io.kotest.assertions.json.JsonNode>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonNode.ObjectNode.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonNode.ObjectNode.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json/JsonNode.ObjectNode.toString|toString(){}[0]
        final val elements // io.kotest.assertions.json/JsonNode.ObjectNode.elements|{}elements[0]
            final fun <get-elements>(): kotlin.collections/Map<kotlin/String, io.kotest.assertions.json/JsonNode> // io.kotest.assertions.json/JsonNode.ObjectNode.elements.<get-elements>|<get-elements>(){}[0]
    }
    final class StringNode : io.kotest.assertions.json/JsonNode, io.kotest.assertions.json/JsonNode.ValueNode { // io.kotest.assertions.json/JsonNode.StringNode|null[0]
        constructor <init>(kotlin/String) // io.kotest.assertions.json/JsonNode.StringNode.<init>|<init>(kotlin.String){}[0]
        final fun component1(): kotlin/String // io.kotest.assertions.json/JsonNode.StringNode.component1|component1(){}[0]
        final fun copy(kotlin/String =...): io.kotest.assertions.json/JsonNode.StringNode // io.kotest.assertions.json/JsonNode.StringNode.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // io.kotest.assertions.json/JsonNode.StringNode.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // io.kotest.assertions.json/JsonNode.StringNode.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // io.kotest.assertions.json/JsonNode.StringNode.toString|toString(){}[0]
        final object Companion // io.kotest.assertions.json/JsonNode.StringNode.Companion|null[0]
        final val value // io.kotest.assertions.json/JsonNode.StringNode.value|{}value[0]
            final fun <get-value>(): kotlin/String // io.kotest.assertions.json/JsonNode.StringNode.value.<get-value>|<get-value>(){}[0]
    }
    final fun type(): kotlin/String // io.kotest.assertions.json/JsonNode.type|type(){}[0]
    final object Companion : kotlinx.serialization.internal/SerializerFactory { // io.kotest.assertions.json/JsonNode.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<io.kotest.assertions.json/JsonNode> // io.kotest.assertions.json/JsonNode.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // io.kotest.assertions.json/JsonNode.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
    final object NullNode : io.kotest.assertions.json/JsonNode, io.kotest.assertions.json/JsonNode.ValueNode // io.kotest.assertions.json/JsonNode.NullNode|null[0]
}
sealed interface io.kotest.assertions.json.schema/JsonSchemaElement { // io.kotest.assertions.json.schema/JsonSchemaElement|null[0]
    abstract fun typeName(): kotlin/String // io.kotest.assertions.json.schema/JsonSchemaElement.typeName|typeName(){}[0]
    final object Companion : kotlinx.serialization.internal/SerializerFactory { // io.kotest.assertions.json.schema/JsonSchemaElement.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<io.kotest.assertions.json.schema/JsonSchemaElement> // io.kotest.assertions.json.schema/JsonSchemaElement.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // io.kotest.assertions.json.schema/JsonSchemaElement.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}
